// Code generated by goa v3.19.1, DO NOT EDIT.
//
// fileserver endpoints
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/internal/service/design -o
// ./service

package fileserver

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "fileserver" service endpoints.
type Endpoints struct {
	RequestToPublish      goa.Endpoint
	QueryPublishingStatus goa.Endpoint
}

// NewEndpoints wraps the methods of the "fileserver" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		RequestToPublish:      NewRequestToPublishEndpoint(s),
		QueryPublishingStatus: NewQueryPublishingStatusEndpoint(s),
	}
}

// Use applies the given middleware to all the "fileserver" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.RequestToPublish = m(e.RequestToPublish)
	e.QueryPublishingStatus = m(e.QueryPublishingStatus)
}

// NewRequestToPublishEndpoint returns an endpoint function that calls the
// method "request-to-publish" of service "fileserver".
func NewRequestToPublishEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RequestToPublishPayload)
		return s.RequestToPublish(ctx, p)
	}
}

// NewQueryPublishingStatusEndpoint returns an endpoint function that calls the
// method "query-publishing-status" of service "fileserver".
func NewQueryPublishingStatusEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*QueryPublishingStatusPayload)
		return s.QueryPublishingStatus(ctx, p)
	}
}
