// Code generated by goa v3.19.1, DO NOT EDIT.
//
// publisher HTTP client CLI support package
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/internal/service/design -o
// ./service

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	fileserverc "github.com/PingCAP-QE/ee-apps/publisher/internal/service/gen/http/fileserver/client"
	imagec "github.com/PingCAP-QE/ee-apps/publisher/internal/service/gen/http/image/client"
	tiupc "github.com/PingCAP-QE/ee-apps/publisher/internal/service/gen/http/tiup/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `tiup (request-to-publish|query-publishing-status|reset-rate-limit)
fileserver (request-to-publish|query-publishing-status)
image (request-to-copy|query-copying-status)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` tiup request-to-publish --body '{
      "artifact_url": "Consequatur ea eum saepe.",
      "request_id": "Voluptates voluptatem accusamus nisi omnis quia molestias.",
      "tiup-mirror": "Voluptas dolore eos eveniet vero voluptas.",
      "version": "Omnis dolorem eveniet fugit nemo."
   }'` + "\n" +
		os.Args[0] + ` fileserver request-to-publish --body '{
      "artifact_url": "Tenetur mollitia consequatur perferendis."
   }'` + "\n" +
		os.Args[0] + ` image request-to-copy --body '{
      "destination": "Quia sed sunt vero.",
      "source": "Iusto ut et deserunt nisi voluptates."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		tiupFlags = flag.NewFlagSet("tiup", flag.ContinueOnError)

		tiupRequestToPublishFlags    = flag.NewFlagSet("request-to-publish", flag.ExitOnError)
		tiupRequestToPublishBodyFlag = tiupRequestToPublishFlags.String("body", "REQUIRED", "")

		tiupQueryPublishingStatusFlags         = flag.NewFlagSet("query-publishing-status", flag.ExitOnError)
		tiupQueryPublishingStatusRequestIDFlag = tiupQueryPublishingStatusFlags.String("request-id", "REQUIRED", "request track id")

		tiupResetRateLimitFlags = flag.NewFlagSet("reset-rate-limit", flag.ExitOnError)

		fileserverFlags = flag.NewFlagSet("fileserver", flag.ContinueOnError)

		fileserverRequestToPublishFlags    = flag.NewFlagSet("request-to-publish", flag.ExitOnError)
		fileserverRequestToPublishBodyFlag = fileserverRequestToPublishFlags.String("body", "REQUIRED", "")

		fileserverQueryPublishingStatusFlags         = flag.NewFlagSet("query-publishing-status", flag.ExitOnError)
		fileserverQueryPublishingStatusRequestIDFlag = fileserverQueryPublishingStatusFlags.String("request-id", "REQUIRED", "request track id")

		imageFlags = flag.NewFlagSet("image", flag.ContinueOnError)

		imageRequestToCopyFlags    = flag.NewFlagSet("request-to-copy", flag.ExitOnError)
		imageRequestToCopyBodyFlag = imageRequestToCopyFlags.String("body", "REQUIRED", "")

		imageQueryCopyingStatusFlags         = flag.NewFlagSet("query-copying-status", flag.ExitOnError)
		imageQueryCopyingStatusRequestIDFlag = imageQueryCopyingStatusFlags.String("request-id", "REQUIRED", "request track id")
	)
	tiupFlags.Usage = tiupUsage
	tiupRequestToPublishFlags.Usage = tiupRequestToPublishUsage
	tiupQueryPublishingStatusFlags.Usage = tiupQueryPublishingStatusUsage
	tiupResetRateLimitFlags.Usage = tiupResetRateLimitUsage

	fileserverFlags.Usage = fileserverUsage
	fileserverRequestToPublishFlags.Usage = fileserverRequestToPublishUsage
	fileserverQueryPublishingStatusFlags.Usage = fileserverQueryPublishingStatusUsage

	imageFlags.Usage = imageUsage
	imageRequestToCopyFlags.Usage = imageRequestToCopyUsage
	imageQueryCopyingStatusFlags.Usage = imageQueryCopyingStatusUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "tiup":
			svcf = tiupFlags
		case "fileserver":
			svcf = fileserverFlags
		case "image":
			svcf = imageFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "tiup":
			switch epn {
			case "request-to-publish":
				epf = tiupRequestToPublishFlags

			case "query-publishing-status":
				epf = tiupQueryPublishingStatusFlags

			case "reset-rate-limit":
				epf = tiupResetRateLimitFlags

			}

		case "fileserver":
			switch epn {
			case "request-to-publish":
				epf = fileserverRequestToPublishFlags

			case "query-publishing-status":
				epf = fileserverQueryPublishingStatusFlags

			}

		case "image":
			switch epn {
			case "request-to-copy":
				epf = imageRequestToCopyFlags

			case "query-copying-status":
				epf = imageQueryCopyingStatusFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "tiup":
			c := tiupc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "request-to-publish":
				endpoint = c.RequestToPublish()
				data, err = tiupc.BuildRequestToPublishPayload(*tiupRequestToPublishBodyFlag)
			case "query-publishing-status":
				endpoint = c.QueryPublishingStatus()
				data, err = tiupc.BuildQueryPublishingStatusPayload(*tiupQueryPublishingStatusRequestIDFlag)
			case "reset-rate-limit":
				endpoint = c.ResetRateLimit()
			}
		case "fileserver":
			c := fileserverc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "request-to-publish":
				endpoint = c.RequestToPublish()
				data, err = fileserverc.BuildRequestToPublishPayload(*fileserverRequestToPublishBodyFlag)
			case "query-publishing-status":
				endpoint = c.QueryPublishingStatus()
				data, err = fileserverc.BuildQueryPublishingStatusPayload(*fileserverQueryPublishingStatusRequestIDFlag)
			}
		case "image":
			c := imagec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "request-to-copy":
				endpoint = c.RequestToCopy()
				data, err = imagec.BuildRequestToCopyPayload(*imageRequestToCopyBodyFlag)
			case "query-copying-status":
				endpoint = c.QueryCopyingStatus()
				data, err = imagec.BuildQueryCopyingStatusPayload(*imageQueryCopyingStatusRequestIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// tiupUsage displays the usage of the tiup command and its subcommands.
func tiupUsage() {
	fmt.Fprintf(os.Stderr, `TiUP Publisher service
Usage:
    %[1]s [globalflags] tiup COMMAND [flags]

COMMAND:
    request-to-publish: RequestToPublish implements request-to-publish.
    query-publishing-status: QueryPublishingStatus implements query-publishing-status.
    reset-rate-limit: ResetRateLimit implements reset-rate-limit.

Additional help:
    %[1]s tiup COMMAND --help
`, os.Args[0])
}
func tiupRequestToPublishUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tiup request-to-publish -body JSON

RequestToPublish implements request-to-publish.
    -body JSON:

Example:
    %[1]s tiup request-to-publish --body '{
      "artifact_url": "Consequatur ea eum saepe.",
      "request_id": "Voluptates voluptatem accusamus nisi omnis quia molestias.",
      "tiup-mirror": "Voluptas dolore eos eveniet vero voluptas.",
      "version": "Omnis dolorem eveniet fugit nemo."
   }'
`, os.Args[0])
}

func tiupQueryPublishingStatusUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tiup query-publishing-status -request-id STRING

QueryPublishingStatus implements query-publishing-status.
    -request-id STRING: request track id

Example:
    %[1]s tiup query-publishing-status --request-id "Consectetur dolor magnam aut et labore."
`, os.Args[0])
}

func tiupResetRateLimitUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tiup reset-rate-limit

ResetRateLimit implements reset-rate-limit.

Example:
    %[1]s tiup reset-rate-limit
`, os.Args[0])
}

// fileserverUsage displays the usage of the fileserver command and its
// subcommands.
func fileserverUsage() {
	fmt.Fprintf(os.Stderr, `Publisher service for static file server
Usage:
    %[1]s [globalflags] fileserver COMMAND [flags]

COMMAND:
    request-to-publish: RequestToPublish implements request-to-publish.
    query-publishing-status: QueryPublishingStatus implements query-publishing-status.

Additional help:
    %[1]s fileserver COMMAND --help
`, os.Args[0])
}
func fileserverRequestToPublishUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] fileserver request-to-publish -body JSON

RequestToPublish implements request-to-publish.
    -body JSON:

Example:
    %[1]s fileserver request-to-publish --body '{
      "artifact_url": "Tenetur mollitia consequatur perferendis."
   }'
`, os.Args[0])
}

func fileserverQueryPublishingStatusUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] fileserver query-publishing-status -request-id STRING

QueryPublishingStatus implements query-publishing-status.
    -request-id STRING: request track id

Example:
    %[1]s fileserver query-publishing-status --request-id "Adipisci pariatur maiores neque enim perferendis."
`, os.Args[0])
}

// imageUsage displays the usage of the image command and its subcommands.
func imageUsage() {
	fmt.Fprintf(os.Stderr, `Publisher service for container image
Usage:
    %[1]s [globalflags] image COMMAND [flags]

COMMAND:
    request-to-copy: RequestToCopy implements request-to-copy.
    query-copying-status: QueryCopyingStatus implements query-copying-status.

Additional help:
    %[1]s image COMMAND --help
`, os.Args[0])
}
func imageRequestToCopyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] image request-to-copy -body JSON

RequestToCopy implements request-to-copy.
    -body JSON:

Example:
    %[1]s image request-to-copy --body '{
      "destination": "Quia sed sunt vero.",
      "source": "Iusto ut et deserunt nisi voluptates."
   }'
`, os.Args[0])
}

func imageQueryCopyingStatusUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] image query-copying-status -request-id STRING

QueryCopyingStatus implements query-copying-status.
    -request-id STRING: request track id

Example:
    %[1]s image query-copying-status --request-id "b950a88c-f01c-4fe7-bd5e-218a50d70137"
`, os.Args[0])
}
