// Code generated by goa v3.19.1, DO NOT EDIT.
//
// fileserver HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/internal/service/design -o
// ./service

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	fileserver "github.com/PingCAP-QE/ee-apps/publisher/internal/service/gen/fileserver"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildRequestToPublishRequest instantiates a HTTP request object with method
// and path set to call the "fileserver" service "request-to-publish" endpoint
func (c *Client) BuildRequestToPublishRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RequestToPublishFileserverPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fileserver", "request-to-publish", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRequestToPublishRequest returns an encoder for requests sent to the
// fileserver request-to-publish server.
func EncodeRequestToPublishRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*fileserver.RequestToPublishPayload)
		if !ok {
			return goahttp.ErrInvalidType("fileserver", "request-to-publish", "*fileserver.RequestToPublishPayload", v)
		}
		body := NewRequestToPublishRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("fileserver", "request-to-publish", err)
		}
		return nil
	}
}

// DecodeRequestToPublishResponse returns a decoder for responses returned by
// the fileserver request-to-publish endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeRequestToPublishResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fileserver", "request-to-publish", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fileserver", "request-to-publish", resp.StatusCode, string(body))
		}
	}
}

// BuildQueryPublishingStatusRequest instantiates a HTTP request object with
// method and path set to call the "fileserver" service
// "query-publishing-status" endpoint
func (c *Client) BuildQueryPublishingStatusRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		requestID string
	)
	{
		p, ok := v.(*fileserver.QueryPublishingStatusPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("fileserver", "query-publishing-status", "*fileserver.QueryPublishingStatusPayload", v)
		}
		requestID = p.RequestID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: QueryPublishingStatusFileserverPath(requestID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fileserver", "query-publishing-status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeQueryPublishingStatusResponse returns a decoder for responses returned
// by the fileserver query-publishing-status endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeQueryPublishingStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fileserver", "query-publishing-status", err)
			}
			if !(body == "queued" || body == "processing" || body == "success" || body == "failed" || body == "canceled") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body", body, []any{"queued", "processing", "success", "failed", "canceled"}))
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("fileserver", "query-publishing-status", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fileserver", "query-publishing-status", resp.StatusCode, string(body))
		}
	}
}
