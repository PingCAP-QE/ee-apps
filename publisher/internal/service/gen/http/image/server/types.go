// Code generated by goa v3.19.1, DO NOT EDIT.
//
// image HTTP server types
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/internal/service/design -o
// ./service

package server

import (
	image "github.com/PingCAP-QE/ee-apps/publisher/internal/service/gen/image"
	goa "goa.design/goa/v3/pkg"
)

// RequestToCopyRequestBody is the type of the "image" service
// "request-to-copy" endpoint HTTP request body.
type RequestToCopyRequestBody struct {
	// source image url
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// destination image url
	Destination *string `form:"destination,omitempty" json:"destination,omitempty" xml:"destination,omitempty"`
}

// NewRequestToCopyPayload builds a image service request-to-copy endpoint
// payload.
func NewRequestToCopyPayload(body *RequestToCopyRequestBody) *image.RequestToCopyPayload {
	v := &image.RequestToCopyPayload{
		Source:      *body.Source,
		Destination: *body.Destination,
	}

	return v
}

// NewQueryCopyingStatusPayload builds a image service query-copying-status
// endpoint payload.
func NewQueryCopyingStatusPayload(requestID string) *image.QueryCopyingStatusPayload {
	v := &image.QueryCopyingStatusPayload{}
	v.RequestID = requestID

	return v
}

// ValidateRequestToCopyRequestBody runs the validations defined on
// Request-To-CopyRequestBody
func ValidateRequestToCopyRequestBody(body *RequestToCopyRequestBody) (err error) {
	if body.Source == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("source", "body"))
	}
	if body.Destination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("destination", "body"))
	}
	return
}
