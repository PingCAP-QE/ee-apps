// Code generated by goa v3.19.1, DO NOT EDIT.
//
// image HTTP client CLI support package
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/internal/service/design -o
// ./service

package client

import (
	"encoding/json"
	"fmt"

	image "github.com/PingCAP-QE/ee-apps/publisher/internal/service/gen/image"
	goa "goa.design/goa/v3/pkg"
)

// BuildRequestToCopyPayload builds the payload for the image request-to-copy
// endpoint from CLI flags.
func BuildRequestToCopyPayload(imageRequestToCopyBody string) (*image.RequestToCopyPayload, error) {
	var err error
	var body RequestToCopyRequestBody
	{
		err = json.Unmarshal([]byte(imageRequestToCopyBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"destination\": \"Reprehenderit quaerat quam sapiente.\",\n      \"source\": \"Voluptas excepturi laudantium ullam dicta tenetur et.\"\n   }'")
		}
	}
	v := &image.RequestToCopyPayload{
		Source:      body.Source,
		Destination: body.Destination,
	}

	return v, nil
}

// BuildQueryCopyingStatusPayload builds the payload for the image
// query-copying-status endpoint from CLI flags.
func BuildQueryCopyingStatusPayload(imageQueryCopyingStatusRequestID string) (*image.QueryCopyingStatusPayload, error) {
	var err error
	var requestID string
	{
		requestID = imageQueryCopyingStatusRequestID
		err = goa.MergeErrors(err, goa.ValidateFormat("request_id", requestID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &image.QueryCopyingStatusPayload{}
	v.RequestID = requestID

	return v, nil
}

// BuildRequestMultiarchCollectPayload builds the payload for the image
// request-multiarch-collect endpoint from CLI flags.
func BuildRequestMultiarchCollectPayload(imageRequestMultiarchCollectBody string) (*image.RequestMultiarchCollectPayload, error) {
	var err error
	var body RequestMultiarchCollectRequestBody
	{
		err = json.Unmarshal([]byte(imageRequestMultiarchCollectBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"async\": false,\n      \"image_url\": \"Est delectus deserunt ut.\",\n      \"release_tag_suffix\": \"Modi ipsum.\"\n   }'")
		}
	}
	v := &image.RequestMultiarchCollectPayload{
		ImageURL:         body.ImageURL,
		ReleaseTagSuffix: body.ReleaseTagSuffix,
		Async:            body.Async,
	}
	{
		var zero string
		if v.ReleaseTagSuffix == zero {
			v.ReleaseTagSuffix = "release"
		}
	}
	{
		var zero bool
		if v.Async == zero {
			v.Async = false
		}
	}

	return v, nil
}

// BuildQueryMultiarchCollectStatusPayload builds the payload for the image
// query-multiarch-collect-status endpoint from CLI flags.
func BuildQueryMultiarchCollectStatusPayload(imageQueryMultiarchCollectStatusRequestID string) (*image.QueryMultiarchCollectStatusPayload, error) {
	var err error
	var requestID string
	{
		requestID = imageQueryMultiarchCollectStatusRequestID
		err = goa.MergeErrors(err, goa.ValidateFormat("request_id", requestID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &image.QueryMultiarchCollectStatusPayload{}
	v.RequestID = requestID

	return v, nil
}
