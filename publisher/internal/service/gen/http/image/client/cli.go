// Code generated by goa v3.19.1, DO NOT EDIT.
//
// image HTTP client CLI support package
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/internal/service/design -o
// ./service

package client

import (
	"encoding/json"
	"fmt"

	image "github.com/PingCAP-QE/ee-apps/publisher/internal/service/gen/image"
	goa "goa.design/goa/v3/pkg"
)

// BuildRequestToCopyPayload builds the payload for the image request-to-copy
// endpoint from CLI flags.
func BuildRequestToCopyPayload(imageRequestToCopyBody string) (*image.RequestToCopyPayload, error) {
	var err error
	var body RequestToCopyRequestBody
	{
		err = json.Unmarshal([]byte(imageRequestToCopyBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"destination\": \"Odit quae molestiae quis.\",\n      \"source\": \"Et fuga accusamus.\"\n   }'")
		}
	}
	v := &image.RequestToCopyPayload{
		Source:      body.Source,
		Destination: body.Destination,
	}

	return v, nil
}

// BuildQueryCopyingStatusPayload builds the payload for the image
// query-copying-status endpoint from CLI flags.
func BuildQueryCopyingStatusPayload(imageQueryCopyingStatusRequestID string) (*image.QueryCopyingStatusPayload, error) {
	var err error
	var requestID string
	{
		requestID = imageQueryCopyingStatusRequestID
		err = goa.MergeErrors(err, goa.ValidateFormat("request_id", requestID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &image.QueryCopyingStatusPayload{}
	v.RequestID = requestID

	return v, nil
}
