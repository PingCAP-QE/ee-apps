// Code generated by goa v3.19.1, DO NOT EDIT.
//
// image client HTTP transport
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/internal/service/design -o
// ./service

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the image service endpoint HTTP clients.
type Client struct {
	// RequestToCopy Doer is the HTTP client used to make requests to the
	// request-to-copy endpoint.
	RequestToCopyDoer goahttp.Doer

	// QueryCopyingStatus Doer is the HTTP client used to make requests to the
	// query-copying-status endpoint.
	QueryCopyingStatusDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the image service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		RequestToCopyDoer:      doer,
		QueryCopyingStatusDoer: doer,
		RestoreResponseBody:    restoreBody,
		scheme:                 scheme,
		host:                   host,
		decoder:                dec,
		encoder:                enc,
	}
}

// RequestToCopy returns an endpoint that makes HTTP requests to the image
// service request-to-copy server.
func (c *Client) RequestToCopy() goa.Endpoint {
	var (
		encodeRequest  = EncodeRequestToCopyRequest(c.encoder)
		decodeResponse = DecodeRequestToCopyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRequestToCopyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RequestToCopyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("image", "request-to-copy", err)
		}
		return decodeResponse(resp)
	}
}

// QueryCopyingStatus returns an endpoint that makes HTTP requests to the image
// service query-copying-status server.
func (c *Client) QueryCopyingStatus() goa.Endpoint {
	var (
		decodeResponse = DecodeQueryCopyingStatusResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildQueryCopyingStatusRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.QueryCopyingStatusDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("image", "query-copying-status", err)
		}
		return decodeResponse(resp)
	}
}
