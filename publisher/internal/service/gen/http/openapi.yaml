swagger: "2.0"
info:
    title: Publish API
    description: Publish API
    contact:
        name: WuHui Zuo
        email: wuhui.zuo@pingcap.com
        url: https://github.com/wuhuizuo
    version: 1.0.0
host: 0.0.0.0:80
consumes:
    - application/json
    - application/xml
    - application/gob
produces:
    - application/json
    - application/xml
    - application/gob
paths:
    /fs/publish-request:
        post:
            tags:
                - fileserver
            summary: request-to-publish fileserver
            operationId: fileserver#request-to-publish
            parameters:
                - name: Request-To-PublishRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/FileserverRequestToPublishRequestBody'
                    required:
                        - artifact_url
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            type: string
                            example: Excepturi excepturi ut omnis quibusdam.
            schemes:
                - http
    /fs/publish-request/{request_id}:
        get:
            tags:
                - fileserver
            summary: query-publishing-status fileserver
            operationId: fileserver#query-publishing-status
            parameters:
                - name: request_id
                  in: path
                  description: request track id
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: string
                        enum:
                            - queued
                            - processing
                            - success
                            - failed
                            - canceled
            schemes:
                - http
    /image/collect-multiarch:
        post:
            tags:
                - image
            summary: request-multiarch-collect image
            operationId: image#request-multiarch-collect
            parameters:
                - name: Request-Multiarch-CollectRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/ImageRequestMultiarchCollectRequestBody'
                    required:
                        - image_url
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/ImageRequestMultiarchCollectResponseBody'
                        required:
                            - async
            schemes:
                - http
    /image/collect-multiarch/{request_id}:
        get:
            tags:
                - image
            summary: query-multiarch-collect-status image
            operationId: image#query-multiarch-collect-status
            parameters:
                - name: request_id
                  in: path
                  description: Request track id
                  required: true
                  type: string
                  format: uuid
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: string
                        enum:
                            - queued
                            - processing
                            - success
                            - failed
                            - canceled
            schemes:
                - http
    /image/copy:
        post:
            tags:
                - image
            summary: request-to-copy image
            operationId: image#request-to-copy
            parameters:
                - name: Request-To-CopyRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/ImageRequestToCopyRequestBody'
                    required:
                        - source
                        - destination
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: string
                        format: uuid
            schemes:
                - http
    /image/copy/{request_id}:
        get:
            tags:
                - image
            summary: query-copying-status image
            operationId: image#query-copying-status
            parameters:
                - name: request_id
                  in: path
                  description: request track id
                  required: true
                  type: string
                  format: uuid
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: string
                        enum:
                            - queued
                            - processing
                            - success
                            - failed
                            - canceled
            schemes:
                - http
    /tiup/publish-request:
        post:
            tags:
                - tiup
            summary: request-to-publish tiup
            operationId: tiup#request-to-publish
            parameters:
                - name: Request-To-PublishRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/TiupRequestToPublishRequestBody'
                    required:
                        - artifact_url
                        - tiup-mirror
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            type: string
                            example: Est vel aut qui porro officiis.
            schemes:
                - http
    /tiup/publish-request/{request_id}:
        get:
            tags:
                - tiup
            summary: query-publishing-status tiup
            operationId: tiup#query-publishing-status
            parameters:
                - name: request_id
                  in: path
                  description: request track id
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: string
                        enum:
                            - queued
                            - processing
                            - success
                            - failed
                            - canceled
            schemes:
                - http
    /tiup/reset-rate-limit:
        post:
            tags:
                - tiup
            summary: reset-rate-limit tiup
            operationId: tiup#reset-rate-limit
            responses:
                "200":
                    description: OK response.
            schemes:
                - http
definitions:
    FileserverRequestToPublishRequestBody:
        title: FileserverRequestToPublishRequestBody
        type: object
        properties:
            artifact_url:
                type: string
                description: The full url of the pushed OCI artifact, contain the tag part. It will parse the repo from it.
                example: Deleniti culpa qui.
        example:
            artifact_url: Libero et ea consequatur sunt quis.
        required:
            - artifact_url
    ImageRequestMultiarchCollectRequestBody:
        title: ImageRequestMultiarchCollectRequestBody
        type: object
        properties:
            async:
                type: boolean
                description: Whether to run the collection asynchronously. If true, returns a request id. If false or omitted, runs synchronously and returns the result directly.
                default: false
                example: false
            image_url:
                type: string
                description: The image URL to collect
                example: At officiis est necessitatibus et velit.
            release_tag_suffix:
                type: string
                description: Suffix for the release tag
                default: release
                example: Est corrupti aut velit nihil.
        example:
            async: true
            image_url: Sint amet ullam impedit animi quo similique.
            release_tag_suffix: Dolores ea fugit.
        required:
            - image_url
    ImageRequestMultiarchCollectResponseBody:
        title: ImageRequestMultiarchCollectResponseBody
        type: object
        properties:
            async:
                type: boolean
                description: Whether to run the collection asynchronously. If true, returns a request id. If false or omitted, runs synchronously and returns the result directly.
                default: false
                example: true
            repo:
                type: string
                description: Repository of the collected image
                example: Dolores nihil autem veritatis maiores quis eos.
            request_id:
                type: string
                description: Request id for async mode (uuidv4 format)
                example: 1f852fe5-7f59-42e8-8714-ffd750c12d56
                format: uuid
            tags:
                type: array
                items:
                    type: string
                    example: Minus voluptatem omnis molestias voluptate.
                description: Tags of the collected image
                example:
                    - Ut nobis dolores facilis.
                    - Sit accusamus.
        example:
            async: true
            repo: Est minima aspernatur.
            request_id: 337f8242-a149-4d72-8145-336084c72852
            tags:
                - Dolorem eaque possimus dolorem aut aut.
                - Enim nemo labore quis.
                - Corrupti nisi non sit voluptatem.
                - Est et quasi.
        required:
            - async
    ImageRequestToCopyRequestBody:
        title: ImageRequestToCopyRequestBody
        type: object
        properties:
            destination:
                type: string
                description: destination image url
                example: Sint amet earum minus voluptatem.
            source:
                type: string
                description: source image url
                example: Quo enim qui repudiandae eius.
        example:
            destination: Similique magni ut aperiam excepturi.
            source: Quas id exercitationem est assumenda.
        required:
            - source
            - destination
    TiupRequestToPublishRequestBody:
        title: TiupRequestToPublishRequestBody
        type: object
        properties:
            artifact_url:
                type: string
                description: The full url of the pushed OCI artifact, contain the tag part. It will parse the repo from it.
                example: Quia laborum nemo totam corrupti sint.
            request_id:
                type: string
                description: The request id
                example: Occaecati quaerat.
            tiup-mirror:
                type: string
                description: Staging is http://tiup.pingcap.net:8988, product is http://tiup.pingcap.net:8987.
                default: http://tiup.pingcap.net:8988
                example: Nostrum iste.
            version:
                type: string
                description: Force set the version. Default is the artifact version read from `org.opencontainers.image.version` of the manifest config.
                example: Illo facere.
        example:
            artifact_url: Iure sequi.
            request_id: Non repellat et commodi.
            tiup-mirror: Odit qui consequatur dolor distinctio assumenda et.
            version: Ut culpa ut.
        required:
            - artifact_url
            - tiup-mirror
