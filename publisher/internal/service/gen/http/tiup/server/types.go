// Code generated by goa v3.19.1, DO NOT EDIT.
//
// tiup HTTP server types
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/internal/service/design -o
// ./service

package server

import (
	tiup "github.com/PingCAP-QE/ee-apps/publisher/internal/service/gen/tiup"
	goa "goa.design/goa/v3/pkg"
)

// RequestToPublishRequestBody is the type of the "tiup" service
// "request-to-publish" endpoint HTTP request body.
type RequestToPublishRequestBody struct {
	// The full url of the pushed OCI artifact, contain the tag part. It will parse
	// the repo from it.
	ArtifactURL *string `form:"artifact_url,omitempty" json:"artifact_url,omitempty" xml:"artifact_url,omitempty"`
	// Force set the version. Default is the artifact version read from
	// `org.opencontainers.image.version` of the manifest config.
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Staging is http://tiup.pingcap.net:8988, product is
	// http://tiup.pingcap.net:8987.
	TiupMirror *string `form:"tiup-mirror,omitempty" json:"tiup-mirror,omitempty" xml:"tiup-mirror,omitempty"`
}

// RequestToPublishSingleRequestBody is the type of the "tiup" service
// "request-to-publish-single" endpoint HTTP request body.
type RequestToPublishSingleRequestBody struct {
	From    *FromRequestBody            `json:"from,omitempty"`
	Publish *PublishInfoTiUPRequestBody `json:"publish,omitempty"`
}

// FromRequestBody is used to define fields on request body types.
type FromRequestBody struct {
	Type *string              `json:"type,omitempty"`
	Oci  *FromOciRequestBody  `json:"oci,omitempty"`
	HTTP *FromHTTPRequestBody `json:"http,omitempty"`
}

// FromOciRequestBody is used to define fields on request body types.
type FromOciRequestBody struct {
	Repo *string `json:"repo,omitempty"`
	Tag  *string `json:"tag,omitempty"`
	File *string `json:"file,omitempty"`
}

// FromHTTPRequestBody is used to define fields on request body types.
type FromHTTPRequestBody struct {
	URL *string `json:"url,omitempty"`
}

// PublishInfoTiUPRequestBody is used to define fields on request body types.
type PublishInfoTiUPRequestBody struct {
	Name        *string `json:"name,omitempty"`
	Os          *string `json:"os,omitempty"`
	Arch        *string `json:"arch,omitempty"`
	Version     *string `json:"version,omitempty"`
	Description *string `json:"description,omitempty"`
	EntryPoint  *string `json:"entry_point,omitempty"`
	Standalone  *bool   `json:"standalone,omitempty"`
}

// NewRequestToPublishPayload builds a tiup service request-to-publish endpoint
// payload.
func NewRequestToPublishPayload(body *RequestToPublishRequestBody) *tiup.RequestToPublishPayload {
	v := &tiup.RequestToPublishPayload{
		ArtifactURL: *body.ArtifactURL,
		Version:     body.Version,
		TiupMirror:  *body.TiupMirror,
	}

	return v
}

// NewRequestToPublishSinglePublishRequestTiUP builds a tiup service
// request-to-publish-single endpoint payload.
func NewRequestToPublishSinglePublishRequestTiUP(body *RequestToPublishSingleRequestBody) *tiup.PublishRequestTiUP {
	v := &tiup.PublishRequestTiUP{}
	v.From = unmarshalFromRequestBodyToTiupFrom(body.From)
	v.Publish = unmarshalPublishInfoTiUPRequestBodyToTiupPublishInfoTiUP(body.Publish)

	return v
}

// NewQueryPublishingStatusPayload builds a tiup service
// query-publishing-status endpoint payload.
func NewQueryPublishingStatusPayload(requestID string) *tiup.QueryPublishingStatusPayload {
	v := &tiup.QueryPublishingStatusPayload{}
	v.RequestID = requestID

	return v
}

// ValidateRequestToPublishRequestBody runs the validations defined on
// Request-To-PublishRequestBody
func ValidateRequestToPublishRequestBody(body *RequestToPublishRequestBody) (err error) {
	if body.ArtifactURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artifact_url", "body"))
	}
	if body.TiupMirror == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tiup-mirror", "body"))
	}
	return
}

// ValidateRequestToPublishSingleRequestBody runs the validations defined on
// Request-To-Publish-SingleRequestBody
func ValidateRequestToPublishSingleRequestBody(body *RequestToPublishSingleRequestBody) (err error) {
	if body.From == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("from", "body"))
	}
	if body.Publish == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publish", "body"))
	}
	if body.From != nil {
		if err2 := ValidateFromRequestBody(body.From); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Publish != nil {
		if err2 := ValidatePublishInfoTiUPRequestBody(body.Publish); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFromRequestBody runs the validations defined on FromRequestBody
func ValidateFromRequestBody(body *FromRequestBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "oci" || *body.Type == "http") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"oci", "http"}))
		}
	}
	if body.Oci != nil {
		if err2 := ValidateFromOciRequestBody(body.Oci); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.HTTP != nil {
		if err2 := ValidateFromHTTPRequestBody(body.HTTP); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFromOciRequestBody runs the validations defined on FromOciRequestBody
func ValidateFromOciRequestBody(body *FromOciRequestBody) (err error) {
	if body.Repo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repo", "body"))
	}
	if body.Tag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tag", "body"))
	}
	if body.File == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	return
}

// ValidateFromHTTPRequestBody runs the validations defined on
// FromHTTPRequestBody
func ValidateFromHTTPRequestBody(body *FromHTTPRequestBody) (err error) {
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidatePublishInfoTiUPRequestBody runs the validations defined on
// PublishInfoTiUPRequestBody
func ValidatePublishInfoTiUPRequestBody(body *PublishInfoTiUPRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Os == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("os", "body"))
	}
	if body.Arch == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("arch", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	return
}
