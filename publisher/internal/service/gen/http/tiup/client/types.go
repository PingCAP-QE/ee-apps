// Code generated by goa v3.19.1, DO NOT EDIT.
//
// tiup HTTP client types
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/internal/service/design -o
// ./service

package client

import (
	tiup "github.com/PingCAP-QE/ee-apps/publisher/internal/service/gen/tiup"
	goa "goa.design/goa/v3/pkg"
)

// RequestToPublishRequestBody is the type of the "tiup" service
// "request-to-publish" endpoint HTTP request body.
type RequestToPublishRequestBody struct {
	// The full url of the pushed OCI artifact, contain the tag part. It will parse
	// the repo from it.
	ArtifactURL string `form:"artifact_url" json:"artifact_url" xml:"artifact_url"`
	// Force set the version. Default is the artifact version read from
	// `org.opencontainers.image.version` of the manifest config.
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	// Staging is http://tiup.pingcap.net:8988, product is
	// http://tiup.pingcap.net:8987.
	TiupMirror string `form:"tiup-mirror" json:"tiup-mirror" xml:"tiup-mirror"`
}

// RequestToPublishSingleRequestBody is the type of the "tiup" service
// "request-to-publish-single" endpoint HTTP request body.
type RequestToPublishSingleRequestBody struct {
	From    *FromRequestBody            `json:"from,omitempty"`
	Publish *PublishInfoTiUPRequestBody `json:"publish,omitempty"`
}

// FromRequestBody is used to define fields on request body types.
type FromRequestBody struct {
	Type string               `json:"type,omitempty"`
	Oci  *FromOciRequestBody  `json:"oci,omitempty"`
	HTTP *FromHTTPRequestBody `json:"http,omitempty"`
}

// FromOciRequestBody is used to define fields on request body types.
type FromOciRequestBody struct {
	Repo string `json:"repo,omitempty"`
	Tag  string `json:"tag,omitempty"`
	File string `json:"file,omitempty"`
}

// FromHTTPRequestBody is used to define fields on request body types.
type FromHTTPRequestBody struct {
	URL string `json:"url,omitempty"`
}

// PublishInfoTiUPRequestBody is used to define fields on request body types.
type PublishInfoTiUPRequestBody struct {
	Name        string  `json:"name,omitempty"`
	Os          string  `json:"os,omitempty"`
	Arch        string  `json:"arch,omitempty"`
	Version     string  `json:"version,omitempty"`
	Description *string `json:"description,omitempty"`
	EntryPoint  *string `json:"entry_point,omitempty"`
	Standalone  *bool   `json:"standalone,omitempty"`
}

// NewRequestToPublishRequestBody builds the HTTP request body from the payload
// of the "request-to-publish" endpoint of the "tiup" service.
func NewRequestToPublishRequestBody(p *tiup.RequestToPublishPayload) *RequestToPublishRequestBody {
	body := &RequestToPublishRequestBody{
		ArtifactURL: p.ArtifactURL,
		Version:     p.Version,
		TiupMirror:  p.TiupMirror,
	}
	return body
}

// NewRequestToPublishSingleRequestBody builds the HTTP request body from the
// payload of the "request-to-publish-single" endpoint of the "tiup" service.
func NewRequestToPublishSingleRequestBody(p *tiup.PublishRequestTiUP) *RequestToPublishSingleRequestBody {
	body := &RequestToPublishSingleRequestBody{}
	if p.From != nil {
		body.From = marshalTiupFromToFromRequestBody(p.From)
	}
	if p.Publish != nil {
		body.Publish = marshalTiupPublishInfoTiUPToPublishInfoTiUPRequestBody(p.Publish)
	}
	return body
}

// ValidateFromRequestBody runs the validations defined on FromRequestBody
func ValidateFromRequestBody(body *FromRequestBody) (err error) {
	if !(body.Type == "oci" || body.Type == "http") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []any{"oci", "http"}))
	}
	return
}
