// Code generated by goa v3.19.1, DO NOT EDIT.
//
// image endpoints
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/internal/service/design -o
// ./service

package image

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "image" service endpoints.
type Endpoints struct {
	RequestToCopy      goa.Endpoint
	QueryCopyingStatus goa.Endpoint
}

// NewEndpoints wraps the methods of the "image" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		RequestToCopy:      NewRequestToCopyEndpoint(s),
		QueryCopyingStatus: NewQueryCopyingStatusEndpoint(s),
	}
}

// Use applies the given middleware to all the "image" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.RequestToCopy = m(e.RequestToCopy)
	e.QueryCopyingStatus = m(e.QueryCopyingStatus)
}

// NewRequestToCopyEndpoint returns an endpoint function that calls the method
// "request-to-copy" of service "image".
func NewRequestToCopyEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RequestToCopyPayload)
		return s.RequestToCopy(ctx, p)
	}
}

// NewQueryCopyingStatusEndpoint returns an endpoint function that calls the
// method "query-copying-status" of service "image".
func NewQueryCopyingStatusEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*QueryCopyingStatusPayload)
		return s.QueryCopyingStatus(ctx, p)
	}
}
