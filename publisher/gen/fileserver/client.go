// Code generated by goa v3.19.1, DO NOT EDIT.
//
// fileserver client
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/design

package fileserver

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "fileserver" service client.
type Client struct {
	RequestToPublishEndpoint      goa.Endpoint
	QueryPublishingStatusEndpoint goa.Endpoint
}

// NewClient initializes a "fileserver" service client given the endpoints.
func NewClient(requestToPublish, queryPublishingStatus goa.Endpoint) *Client {
	return &Client{
		RequestToPublishEndpoint:      requestToPublish,
		QueryPublishingStatusEndpoint: queryPublishingStatus,
	}
}

// RequestToPublish calls the "request-to-publish" endpoint of the "fileserver"
// service.
func (c *Client) RequestToPublish(ctx context.Context, p *RequestToPublishPayload) (res []string, err error) {
	var ires any
	ires, err = c.RequestToPublishEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]string), nil
}

// QueryPublishingStatus calls the "query-publishing-status" endpoint of the
// "fileserver" service.
func (c *Client) QueryPublishingStatus(ctx context.Context, p *QueryPublishingStatusPayload) (res string, err error) {
	var ires any
	ires, err = c.QueryPublishingStatusEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}
