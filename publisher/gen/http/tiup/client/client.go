// Code generated by goa v3.19.1, DO NOT EDIT.
//
// tiup client HTTP transport
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the tiup service endpoint HTTP clients.
type Client struct {
	// RequestToPublish Doer is the HTTP client used to make requests to the
	// request-to-publish endpoint.
	RequestToPublishDoer goahttp.Doer

	// QueryPublishingStatus Doer is the HTTP client used to make requests to the
	// query-publishing-status endpoint.
	QueryPublishingStatusDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the tiup service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		RequestToPublishDoer:      doer,
		QueryPublishingStatusDoer: doer,
		RestoreResponseBody:       restoreBody,
		scheme:                    scheme,
		host:                      host,
		decoder:                   dec,
		encoder:                   enc,
	}
}

// RequestToPublish returns an endpoint that makes HTTP requests to the tiup
// service request-to-publish server.
func (c *Client) RequestToPublish() goa.Endpoint {
	var (
		encodeRequest  = EncodeRequestToPublishRequest(c.encoder)
		decodeResponse = DecodeRequestToPublishResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRequestToPublishRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RequestToPublishDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tiup", "request-to-publish", err)
		}
		return decodeResponse(resp)
	}
}

// QueryPublishingStatus returns an endpoint that makes HTTP requests to the
// tiup service query-publishing-status server.
func (c *Client) QueryPublishingStatus() goa.Endpoint {
	var (
		decodeResponse = DecodeQueryPublishingStatusResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildQueryPublishingStatusRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.QueryPublishingStatusDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tiup", "query-publishing-status", err)
		}
		return decodeResponse(resp)
	}
}
