// Code generated by goa v3.19.1, DO NOT EDIT.
//
// publisher HTTP client CLI support package
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/publisher/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	tiupc "github.com/PingCAP-QE/ee-apps/publisher/gen/http/tiup/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `tiup (request-to-publish|query-publishing-status)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` tiup request-to-publish --body '{
      "artifact_url": "Omnis expedita.",
      "request_id": "Est sequi placeat.",
      "tiup-mirror": "Pariatur rerum consectetur deleniti architecto sunt.",
      "version": "Dicta id perferendis rem a."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		tiupFlags = flag.NewFlagSet("tiup", flag.ContinueOnError)

		tiupRequestToPublishFlags    = flag.NewFlagSet("request-to-publish", flag.ExitOnError)
		tiupRequestToPublishBodyFlag = tiupRequestToPublishFlags.String("body", "REQUIRED", "")

		tiupQueryPublishingStatusFlags         = flag.NewFlagSet("query-publishing-status", flag.ExitOnError)
		tiupQueryPublishingStatusRequestIDFlag = tiupQueryPublishingStatusFlags.String("request-id", "REQUIRED", "request track id")
	)
	tiupFlags.Usage = tiupUsage
	tiupRequestToPublishFlags.Usage = tiupRequestToPublishUsage
	tiupQueryPublishingStatusFlags.Usage = tiupQueryPublishingStatusUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "tiup":
			svcf = tiupFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "tiup":
			switch epn {
			case "request-to-publish":
				epf = tiupRequestToPublishFlags

			case "query-publishing-status":
				epf = tiupQueryPublishingStatusFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "tiup":
			c := tiupc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "request-to-publish":
				endpoint = c.RequestToPublish()
				data, err = tiupc.BuildRequestToPublishPayload(*tiupRequestToPublishBodyFlag)
			case "query-publishing-status":
				endpoint = c.QueryPublishingStatus()
				data, err = tiupc.BuildQueryPublishingStatusPayload(*tiupQueryPublishingStatusRequestIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// tiupUsage displays the usage of the tiup command and its subcommands.
func tiupUsage() {
	fmt.Fprintf(os.Stderr, `TiUP Publisher service
Usage:
    %[1]s [globalflags] tiup COMMAND [flags]

COMMAND:
    request-to-publish: RequestToPublish implements request-to-publish.
    query-publishing-status: QueryPublishingStatus implements query-publishing-status.

Additional help:
    %[1]s tiup COMMAND --help
`, os.Args[0])
}
func tiupRequestToPublishUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tiup request-to-publish -body JSON

RequestToPublish implements request-to-publish.
    -body JSON: 

Example:
    %[1]s tiup request-to-publish --body '{
      "artifact_url": "Omnis expedita.",
      "request_id": "Est sequi placeat.",
      "tiup-mirror": "Pariatur rerum consectetur deleniti architecto sunt.",
      "version": "Dicta id perferendis rem a."
   }'
`, os.Args[0])
}

func tiupQueryPublishingStatusUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tiup query-publishing-status -request-id STRING

QueryPublishingStatus implements query-publishing-status.
    -request-id STRING: request track id

Example:
    %[1]s tiup query-publishing-status --request-id "Aspernatur quis voluptas."
`, os.Args[0])
}
