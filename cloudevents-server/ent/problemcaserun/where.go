// Code generated by ent, DO NOT EDIT.

package problemcaserun

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/PingCAP-QE/ee-apps/cloudevents-server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLTE(FieldID, id))
}

// Repo applies equality check predicate on the "repo" field. It's identical to RepoEQ.
func Repo(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldRepo, v))
}

// Branch applies equality check predicate on the "branch" field. It's identical to BranchEQ.
func Branch(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldBranch, v))
}

// SuiteName applies equality check predicate on the "suite_name" field. It's identical to SuiteNameEQ.
func SuiteName(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldSuiteName, v))
}

// CaseName applies equality check predicate on the "case_name" field. It's identical to CaseNameEQ.
func CaseName(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldCaseName, v))
}

// Flaky applies equality check predicate on the "flaky" field. It's identical to FlakyEQ.
func Flaky(v bool) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldFlaky, v))
}

// TimecostMs applies equality check predicate on the "timecost_ms" field. It's identical to TimecostMsEQ.
func TimecostMs(v int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldTimecostMs, v))
}

// ReportTime applies equality check predicate on the "report_time" field. It's identical to ReportTimeEQ.
func ReportTime(v time.Time) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldReportTime, v))
}

// BuildURL applies equality check predicate on the "build_url" field. It's identical to BuildURLEQ.
func BuildURL(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldBuildURL, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldReason, v))
}

// RepoEQ applies the EQ predicate on the "repo" field.
func RepoEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldRepo, v))
}

// RepoNEQ applies the NEQ predicate on the "repo" field.
func RepoNEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNEQ(FieldRepo, v))
}

// RepoIn applies the In predicate on the "repo" field.
func RepoIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldIn(FieldRepo, vs...))
}

// RepoNotIn applies the NotIn predicate on the "repo" field.
func RepoNotIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNotIn(FieldRepo, vs...))
}

// RepoGT applies the GT predicate on the "repo" field.
func RepoGT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGT(FieldRepo, v))
}

// RepoGTE applies the GTE predicate on the "repo" field.
func RepoGTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGTE(FieldRepo, v))
}

// RepoLT applies the LT predicate on the "repo" field.
func RepoLT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLT(FieldRepo, v))
}

// RepoLTE applies the LTE predicate on the "repo" field.
func RepoLTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLTE(FieldRepo, v))
}

// RepoContains applies the Contains predicate on the "repo" field.
func RepoContains(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContains(FieldRepo, v))
}

// RepoHasPrefix applies the HasPrefix predicate on the "repo" field.
func RepoHasPrefix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasPrefix(FieldRepo, v))
}

// RepoHasSuffix applies the HasSuffix predicate on the "repo" field.
func RepoHasSuffix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasSuffix(FieldRepo, v))
}

// RepoEqualFold applies the EqualFold predicate on the "repo" field.
func RepoEqualFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEqualFold(FieldRepo, v))
}

// RepoContainsFold applies the ContainsFold predicate on the "repo" field.
func RepoContainsFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContainsFold(FieldRepo, v))
}

// BranchEQ applies the EQ predicate on the "branch" field.
func BranchEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldBranch, v))
}

// BranchNEQ applies the NEQ predicate on the "branch" field.
func BranchNEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNEQ(FieldBranch, v))
}

// BranchIn applies the In predicate on the "branch" field.
func BranchIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldIn(FieldBranch, vs...))
}

// BranchNotIn applies the NotIn predicate on the "branch" field.
func BranchNotIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNotIn(FieldBranch, vs...))
}

// BranchGT applies the GT predicate on the "branch" field.
func BranchGT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGT(FieldBranch, v))
}

// BranchGTE applies the GTE predicate on the "branch" field.
func BranchGTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGTE(FieldBranch, v))
}

// BranchLT applies the LT predicate on the "branch" field.
func BranchLT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLT(FieldBranch, v))
}

// BranchLTE applies the LTE predicate on the "branch" field.
func BranchLTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLTE(FieldBranch, v))
}

// BranchContains applies the Contains predicate on the "branch" field.
func BranchContains(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContains(FieldBranch, v))
}

// BranchHasPrefix applies the HasPrefix predicate on the "branch" field.
func BranchHasPrefix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasPrefix(FieldBranch, v))
}

// BranchHasSuffix applies the HasSuffix predicate on the "branch" field.
func BranchHasSuffix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasSuffix(FieldBranch, v))
}

// BranchEqualFold applies the EqualFold predicate on the "branch" field.
func BranchEqualFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEqualFold(FieldBranch, v))
}

// BranchContainsFold applies the ContainsFold predicate on the "branch" field.
func BranchContainsFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContainsFold(FieldBranch, v))
}

// SuiteNameEQ applies the EQ predicate on the "suite_name" field.
func SuiteNameEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldSuiteName, v))
}

// SuiteNameNEQ applies the NEQ predicate on the "suite_name" field.
func SuiteNameNEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNEQ(FieldSuiteName, v))
}

// SuiteNameIn applies the In predicate on the "suite_name" field.
func SuiteNameIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldIn(FieldSuiteName, vs...))
}

// SuiteNameNotIn applies the NotIn predicate on the "suite_name" field.
func SuiteNameNotIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNotIn(FieldSuiteName, vs...))
}

// SuiteNameGT applies the GT predicate on the "suite_name" field.
func SuiteNameGT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGT(FieldSuiteName, v))
}

// SuiteNameGTE applies the GTE predicate on the "suite_name" field.
func SuiteNameGTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGTE(FieldSuiteName, v))
}

// SuiteNameLT applies the LT predicate on the "suite_name" field.
func SuiteNameLT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLT(FieldSuiteName, v))
}

// SuiteNameLTE applies the LTE predicate on the "suite_name" field.
func SuiteNameLTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLTE(FieldSuiteName, v))
}

// SuiteNameContains applies the Contains predicate on the "suite_name" field.
func SuiteNameContains(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContains(FieldSuiteName, v))
}

// SuiteNameHasPrefix applies the HasPrefix predicate on the "suite_name" field.
func SuiteNameHasPrefix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasPrefix(FieldSuiteName, v))
}

// SuiteNameHasSuffix applies the HasSuffix predicate on the "suite_name" field.
func SuiteNameHasSuffix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasSuffix(FieldSuiteName, v))
}

// SuiteNameEqualFold applies the EqualFold predicate on the "suite_name" field.
func SuiteNameEqualFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEqualFold(FieldSuiteName, v))
}

// SuiteNameContainsFold applies the ContainsFold predicate on the "suite_name" field.
func SuiteNameContainsFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContainsFold(FieldSuiteName, v))
}

// CaseNameEQ applies the EQ predicate on the "case_name" field.
func CaseNameEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldCaseName, v))
}

// CaseNameNEQ applies the NEQ predicate on the "case_name" field.
func CaseNameNEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNEQ(FieldCaseName, v))
}

// CaseNameIn applies the In predicate on the "case_name" field.
func CaseNameIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldIn(FieldCaseName, vs...))
}

// CaseNameNotIn applies the NotIn predicate on the "case_name" field.
func CaseNameNotIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNotIn(FieldCaseName, vs...))
}

// CaseNameGT applies the GT predicate on the "case_name" field.
func CaseNameGT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGT(FieldCaseName, v))
}

// CaseNameGTE applies the GTE predicate on the "case_name" field.
func CaseNameGTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGTE(FieldCaseName, v))
}

// CaseNameLT applies the LT predicate on the "case_name" field.
func CaseNameLT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLT(FieldCaseName, v))
}

// CaseNameLTE applies the LTE predicate on the "case_name" field.
func CaseNameLTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLTE(FieldCaseName, v))
}

// CaseNameContains applies the Contains predicate on the "case_name" field.
func CaseNameContains(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContains(FieldCaseName, v))
}

// CaseNameHasPrefix applies the HasPrefix predicate on the "case_name" field.
func CaseNameHasPrefix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasPrefix(FieldCaseName, v))
}

// CaseNameHasSuffix applies the HasSuffix predicate on the "case_name" field.
func CaseNameHasSuffix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasSuffix(FieldCaseName, v))
}

// CaseNameEqualFold applies the EqualFold predicate on the "case_name" field.
func CaseNameEqualFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEqualFold(FieldCaseName, v))
}

// CaseNameContainsFold applies the ContainsFold predicate on the "case_name" field.
func CaseNameContainsFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContainsFold(FieldCaseName, v))
}

// FlakyEQ applies the EQ predicate on the "flaky" field.
func FlakyEQ(v bool) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldFlaky, v))
}

// FlakyNEQ applies the NEQ predicate on the "flaky" field.
func FlakyNEQ(v bool) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNEQ(FieldFlaky, v))
}

// TimecostMsEQ applies the EQ predicate on the "timecost_ms" field.
func TimecostMsEQ(v int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldTimecostMs, v))
}

// TimecostMsNEQ applies the NEQ predicate on the "timecost_ms" field.
func TimecostMsNEQ(v int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNEQ(FieldTimecostMs, v))
}

// TimecostMsIn applies the In predicate on the "timecost_ms" field.
func TimecostMsIn(vs ...int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldIn(FieldTimecostMs, vs...))
}

// TimecostMsNotIn applies the NotIn predicate on the "timecost_ms" field.
func TimecostMsNotIn(vs ...int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNotIn(FieldTimecostMs, vs...))
}

// TimecostMsGT applies the GT predicate on the "timecost_ms" field.
func TimecostMsGT(v int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGT(FieldTimecostMs, v))
}

// TimecostMsGTE applies the GTE predicate on the "timecost_ms" field.
func TimecostMsGTE(v int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGTE(FieldTimecostMs, v))
}

// TimecostMsLT applies the LT predicate on the "timecost_ms" field.
func TimecostMsLT(v int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLT(FieldTimecostMs, v))
}

// TimecostMsLTE applies the LTE predicate on the "timecost_ms" field.
func TimecostMsLTE(v int) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLTE(FieldTimecostMs, v))
}

// ReportTimeEQ applies the EQ predicate on the "report_time" field.
func ReportTimeEQ(v time.Time) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldReportTime, v))
}

// ReportTimeNEQ applies the NEQ predicate on the "report_time" field.
func ReportTimeNEQ(v time.Time) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNEQ(FieldReportTime, v))
}

// ReportTimeIn applies the In predicate on the "report_time" field.
func ReportTimeIn(vs ...time.Time) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldIn(FieldReportTime, vs...))
}

// ReportTimeNotIn applies the NotIn predicate on the "report_time" field.
func ReportTimeNotIn(vs ...time.Time) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNotIn(FieldReportTime, vs...))
}

// ReportTimeGT applies the GT predicate on the "report_time" field.
func ReportTimeGT(v time.Time) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGT(FieldReportTime, v))
}

// ReportTimeGTE applies the GTE predicate on the "report_time" field.
func ReportTimeGTE(v time.Time) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGTE(FieldReportTime, v))
}

// ReportTimeLT applies the LT predicate on the "report_time" field.
func ReportTimeLT(v time.Time) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLT(FieldReportTime, v))
}

// ReportTimeLTE applies the LTE predicate on the "report_time" field.
func ReportTimeLTE(v time.Time) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLTE(FieldReportTime, v))
}

// BuildURLEQ applies the EQ predicate on the "build_url" field.
func BuildURLEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldBuildURL, v))
}

// BuildURLNEQ applies the NEQ predicate on the "build_url" field.
func BuildURLNEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNEQ(FieldBuildURL, v))
}

// BuildURLIn applies the In predicate on the "build_url" field.
func BuildURLIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldIn(FieldBuildURL, vs...))
}

// BuildURLNotIn applies the NotIn predicate on the "build_url" field.
func BuildURLNotIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNotIn(FieldBuildURL, vs...))
}

// BuildURLGT applies the GT predicate on the "build_url" field.
func BuildURLGT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGT(FieldBuildURL, v))
}

// BuildURLGTE applies the GTE predicate on the "build_url" field.
func BuildURLGTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGTE(FieldBuildURL, v))
}

// BuildURLLT applies the LT predicate on the "build_url" field.
func BuildURLLT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLT(FieldBuildURL, v))
}

// BuildURLLTE applies the LTE predicate on the "build_url" field.
func BuildURLLTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLTE(FieldBuildURL, v))
}

// BuildURLContains applies the Contains predicate on the "build_url" field.
func BuildURLContains(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContains(FieldBuildURL, v))
}

// BuildURLHasPrefix applies the HasPrefix predicate on the "build_url" field.
func BuildURLHasPrefix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasPrefix(FieldBuildURL, v))
}

// BuildURLHasSuffix applies the HasSuffix predicate on the "build_url" field.
func BuildURLHasSuffix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasSuffix(FieldBuildURL, v))
}

// BuildURLEqualFold applies the EqualFold predicate on the "build_url" field.
func BuildURLEqualFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEqualFold(FieldBuildURL, v))
}

// BuildURLContainsFold applies the ContainsFold predicate on the "build_url" field.
func BuildURLContainsFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContainsFold(FieldBuildURL, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.FieldContainsFold(FieldReason, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProblemCaseRun) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProblemCaseRun) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProblemCaseRun) predicate.ProblemCaseRun {
	return predicate.ProblemCaseRun(sql.NotPredicates(p))
}
