// Code generated by ent, DO NOT EDIT.

package problemcaserun

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the problemcaserun type in the database.
	Label = "problem_case_run"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRepo holds the string denoting the repo field in the database.
	FieldRepo = "repo"
	// FieldBranch holds the string denoting the branch field in the database.
	FieldBranch = "branch"
	// FieldSuiteName holds the string denoting the suite_name field in the database.
	FieldSuiteName = "suite_name"
	// FieldCaseName holds the string denoting the case_name field in the database.
	FieldCaseName = "case_name"
	// FieldFlaky holds the string denoting the flaky field in the database.
	FieldFlaky = "flaky"
	// FieldTimecostMs holds the string denoting the timecost_ms field in the database.
	FieldTimecostMs = "timecost_ms"
	// FieldReportTime holds the string denoting the report_time field in the database.
	FieldReportTime = "report_time"
	// FieldBuildURL holds the string denoting the build_url field in the database.
	FieldBuildURL = "build_url"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// Table holds the table name of the problemcaserun in the database.
	Table = "problem_case_runs"
)

// Columns holds all SQL columns for problemcaserun fields.
var Columns = []string{
	FieldID,
	FieldRepo,
	FieldBranch,
	FieldSuiteName,
	FieldCaseName,
	FieldFlaky,
	FieldTimecostMs,
	FieldReportTime,
	FieldBuildURL,
	FieldReason,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFlaky holds the default value on creation for the "flaky" field.
	DefaultFlaky bool
	// BuildURLValidator is a validator for the "build_url" field. It is called by the builders before save.
	BuildURLValidator func(string) error
	// ReasonValidator is a validator for the "reason" field. It is called by the builders before save.
	ReasonValidator func(string) error
)

// OrderOption defines the ordering options for the ProblemCaseRun queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRepo orders the results by the repo field.
func ByRepo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepo, opts...).ToFunc()
}

// ByBranch orders the results by the branch field.
func ByBranch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranch, opts...).ToFunc()
}

// BySuiteName orders the results by the suite_name field.
func BySuiteName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuiteName, opts...).ToFunc()
}

// ByCaseName orders the results by the case_name field.
func ByCaseName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaseName, opts...).ToFunc()
}

// ByFlaky orders the results by the flaky field.
func ByFlaky(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlaky, opts...).ToFunc()
}

// ByTimecostMs orders the results by the timecost_ms field.
func ByTimecostMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimecostMs, opts...).ToFunc()
}

// ByReportTime orders the results by the report_time field.
func ByReportTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportTime, opts...).ToFunc()
}

// ByBuildURL orders the results by the build_url field.
func ByBuildURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildURL, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}
