// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PingCAP-QE/ee-apps/cloudevents-server/ent/predicate"
	"github.com/PingCAP-QE/ee-apps/cloudevents-server/ent/problemcaserun"
)

// ProblemCaseRunUpdate is the builder for updating ProblemCaseRun entities.
type ProblemCaseRunUpdate struct {
	config
	hooks    []Hook
	mutation *ProblemCaseRunMutation
}

// Where appends a list predicates to the ProblemCaseRunUpdate builder.
func (pcru *ProblemCaseRunUpdate) Where(ps ...predicate.ProblemCaseRun) *ProblemCaseRunUpdate {
	pcru.mutation.Where(ps...)
	return pcru
}

// SetRepo sets the "repo" field.
func (pcru *ProblemCaseRunUpdate) SetRepo(s string) *ProblemCaseRunUpdate {
	pcru.mutation.SetRepo(s)
	return pcru
}

// SetBranch sets the "branch" field.
func (pcru *ProblemCaseRunUpdate) SetBranch(s string) *ProblemCaseRunUpdate {
	pcru.mutation.SetBranch(s)
	return pcru
}

// SetSuiteName sets the "suite_name" field.
func (pcru *ProblemCaseRunUpdate) SetSuiteName(s string) *ProblemCaseRunUpdate {
	pcru.mutation.SetSuiteName(s)
	return pcru
}

// SetCaseName sets the "case_name" field.
func (pcru *ProblemCaseRunUpdate) SetCaseName(s string) *ProblemCaseRunUpdate {
	pcru.mutation.SetCaseName(s)
	return pcru
}

// SetFlaky sets the "flaky" field.
func (pcru *ProblemCaseRunUpdate) SetFlaky(b bool) *ProblemCaseRunUpdate {
	pcru.mutation.SetFlaky(b)
	return pcru
}

// SetNillableFlaky sets the "flaky" field if the given value is not nil.
func (pcru *ProblemCaseRunUpdate) SetNillableFlaky(b *bool) *ProblemCaseRunUpdate {
	if b != nil {
		pcru.SetFlaky(*b)
	}
	return pcru
}

// SetTimecostMs sets the "timecost_ms" field.
func (pcru *ProblemCaseRunUpdate) SetTimecostMs(i int) *ProblemCaseRunUpdate {
	pcru.mutation.ResetTimecostMs()
	pcru.mutation.SetTimecostMs(i)
	return pcru
}

// AddTimecostMs adds i to the "timecost_ms" field.
func (pcru *ProblemCaseRunUpdate) AddTimecostMs(i int) *ProblemCaseRunUpdate {
	pcru.mutation.AddTimecostMs(i)
	return pcru
}

// SetReportTime sets the "report_time" field.
func (pcru *ProblemCaseRunUpdate) SetReportTime(t time.Time) *ProblemCaseRunUpdate {
	pcru.mutation.SetReportTime(t)
	return pcru
}

// SetBuildURL sets the "build_url" field.
func (pcru *ProblemCaseRunUpdate) SetBuildURL(s string) *ProblemCaseRunUpdate {
	pcru.mutation.SetBuildURL(s)
	return pcru
}

// Mutation returns the ProblemCaseRunMutation object of the builder.
func (pcru *ProblemCaseRunUpdate) Mutation() *ProblemCaseRunMutation {
	return pcru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcru *ProblemCaseRunUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcru.sqlSave, pcru.mutation, pcru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcru *ProblemCaseRunUpdate) SaveX(ctx context.Context) int {
	affected, err := pcru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcru *ProblemCaseRunUpdate) Exec(ctx context.Context) error {
	_, err := pcru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcru *ProblemCaseRunUpdate) ExecX(ctx context.Context) {
	if err := pcru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcru *ProblemCaseRunUpdate) check() error {
	if v, ok := pcru.mutation.BuildURL(); ok {
		if err := problemcaserun.BuildURLValidator(v); err != nil {
			return &ValidationError{Name: "build_url", err: fmt.Errorf(`ent: validator failed for field "ProblemCaseRun.build_url": %w`, err)}
		}
	}
	return nil
}

func (pcru *ProblemCaseRunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(problemcaserun.Table, problemcaserun.Columns, sqlgraph.NewFieldSpec(problemcaserun.FieldID, field.TypeInt))
	if ps := pcru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcru.mutation.Repo(); ok {
		_spec.SetField(problemcaserun.FieldRepo, field.TypeString, value)
	}
	if value, ok := pcru.mutation.Branch(); ok {
		_spec.SetField(problemcaserun.FieldBranch, field.TypeString, value)
	}
	if value, ok := pcru.mutation.SuiteName(); ok {
		_spec.SetField(problemcaserun.FieldSuiteName, field.TypeString, value)
	}
	if value, ok := pcru.mutation.CaseName(); ok {
		_spec.SetField(problemcaserun.FieldCaseName, field.TypeString, value)
	}
	if value, ok := pcru.mutation.Flaky(); ok {
		_spec.SetField(problemcaserun.FieldFlaky, field.TypeBool, value)
	}
	if value, ok := pcru.mutation.TimecostMs(); ok {
		_spec.SetField(problemcaserun.FieldTimecostMs, field.TypeInt, value)
	}
	if value, ok := pcru.mutation.AddedTimecostMs(); ok {
		_spec.AddField(problemcaserun.FieldTimecostMs, field.TypeInt, value)
	}
	if value, ok := pcru.mutation.ReportTime(); ok {
		_spec.SetField(problemcaserun.FieldReportTime, field.TypeTime, value)
	}
	if value, ok := pcru.mutation.BuildURL(); ok {
		_spec.SetField(problemcaserun.FieldBuildURL, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problemcaserun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcru.mutation.done = true
	return n, nil
}

// ProblemCaseRunUpdateOne is the builder for updating a single ProblemCaseRun entity.
type ProblemCaseRunUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProblemCaseRunMutation
}

// SetRepo sets the "repo" field.
func (pcruo *ProblemCaseRunUpdateOne) SetRepo(s string) *ProblemCaseRunUpdateOne {
	pcruo.mutation.SetRepo(s)
	return pcruo
}

// SetBranch sets the "branch" field.
func (pcruo *ProblemCaseRunUpdateOne) SetBranch(s string) *ProblemCaseRunUpdateOne {
	pcruo.mutation.SetBranch(s)
	return pcruo
}

// SetSuiteName sets the "suite_name" field.
func (pcruo *ProblemCaseRunUpdateOne) SetSuiteName(s string) *ProblemCaseRunUpdateOne {
	pcruo.mutation.SetSuiteName(s)
	return pcruo
}

// SetCaseName sets the "case_name" field.
func (pcruo *ProblemCaseRunUpdateOne) SetCaseName(s string) *ProblemCaseRunUpdateOne {
	pcruo.mutation.SetCaseName(s)
	return pcruo
}

// SetFlaky sets the "flaky" field.
func (pcruo *ProblemCaseRunUpdateOne) SetFlaky(b bool) *ProblemCaseRunUpdateOne {
	pcruo.mutation.SetFlaky(b)
	return pcruo
}

// SetNillableFlaky sets the "flaky" field if the given value is not nil.
func (pcruo *ProblemCaseRunUpdateOne) SetNillableFlaky(b *bool) *ProblemCaseRunUpdateOne {
	if b != nil {
		pcruo.SetFlaky(*b)
	}
	return pcruo
}

// SetTimecostMs sets the "timecost_ms" field.
func (pcruo *ProblemCaseRunUpdateOne) SetTimecostMs(i int) *ProblemCaseRunUpdateOne {
	pcruo.mutation.ResetTimecostMs()
	pcruo.mutation.SetTimecostMs(i)
	return pcruo
}

// AddTimecostMs adds i to the "timecost_ms" field.
func (pcruo *ProblemCaseRunUpdateOne) AddTimecostMs(i int) *ProblemCaseRunUpdateOne {
	pcruo.mutation.AddTimecostMs(i)
	return pcruo
}

// SetReportTime sets the "report_time" field.
func (pcruo *ProblemCaseRunUpdateOne) SetReportTime(t time.Time) *ProblemCaseRunUpdateOne {
	pcruo.mutation.SetReportTime(t)
	return pcruo
}

// SetBuildURL sets the "build_url" field.
func (pcruo *ProblemCaseRunUpdateOne) SetBuildURL(s string) *ProblemCaseRunUpdateOne {
	pcruo.mutation.SetBuildURL(s)
	return pcruo
}

// Mutation returns the ProblemCaseRunMutation object of the builder.
func (pcruo *ProblemCaseRunUpdateOne) Mutation() *ProblemCaseRunMutation {
	return pcruo.mutation
}

// Where appends a list predicates to the ProblemCaseRunUpdate builder.
func (pcruo *ProblemCaseRunUpdateOne) Where(ps ...predicate.ProblemCaseRun) *ProblemCaseRunUpdateOne {
	pcruo.mutation.Where(ps...)
	return pcruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcruo *ProblemCaseRunUpdateOne) Select(field string, fields ...string) *ProblemCaseRunUpdateOne {
	pcruo.fields = append([]string{field}, fields...)
	return pcruo
}

// Save executes the query and returns the updated ProblemCaseRun entity.
func (pcruo *ProblemCaseRunUpdateOne) Save(ctx context.Context) (*ProblemCaseRun, error) {
	return withHooks(ctx, pcruo.sqlSave, pcruo.mutation, pcruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcruo *ProblemCaseRunUpdateOne) SaveX(ctx context.Context) *ProblemCaseRun {
	node, err := pcruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcruo *ProblemCaseRunUpdateOne) Exec(ctx context.Context) error {
	_, err := pcruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcruo *ProblemCaseRunUpdateOne) ExecX(ctx context.Context) {
	if err := pcruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcruo *ProblemCaseRunUpdateOne) check() error {
	if v, ok := pcruo.mutation.BuildURL(); ok {
		if err := problemcaserun.BuildURLValidator(v); err != nil {
			return &ValidationError{Name: "build_url", err: fmt.Errorf(`ent: validator failed for field "ProblemCaseRun.build_url": %w`, err)}
		}
	}
	return nil
}

func (pcruo *ProblemCaseRunUpdateOne) sqlSave(ctx context.Context) (_node *ProblemCaseRun, err error) {
	if err := pcruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(problemcaserun.Table, problemcaserun.Columns, sqlgraph.NewFieldSpec(problemcaserun.FieldID, field.TypeInt))
	id, ok := pcruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProblemCaseRun.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, problemcaserun.FieldID)
		for _, f := range fields {
			if !problemcaserun.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != problemcaserun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcruo.mutation.Repo(); ok {
		_spec.SetField(problemcaserun.FieldRepo, field.TypeString, value)
	}
	if value, ok := pcruo.mutation.Branch(); ok {
		_spec.SetField(problemcaserun.FieldBranch, field.TypeString, value)
	}
	if value, ok := pcruo.mutation.SuiteName(); ok {
		_spec.SetField(problemcaserun.FieldSuiteName, field.TypeString, value)
	}
	if value, ok := pcruo.mutation.CaseName(); ok {
		_spec.SetField(problemcaserun.FieldCaseName, field.TypeString, value)
	}
	if value, ok := pcruo.mutation.Flaky(); ok {
		_spec.SetField(problemcaserun.FieldFlaky, field.TypeBool, value)
	}
	if value, ok := pcruo.mutation.TimecostMs(); ok {
		_spec.SetField(problemcaserun.FieldTimecostMs, field.TypeInt, value)
	}
	if value, ok := pcruo.mutation.AddedTimecostMs(); ok {
		_spec.AddField(problemcaserun.FieldTimecostMs, field.TypeInt, value)
	}
	if value, ok := pcruo.mutation.ReportTime(); ok {
		_spec.SetField(problemcaserun.FieldReportTime, field.TypeTime, value)
	}
	if value, ok := pcruo.mutation.BuildURL(); ok {
		_spec.SetField(problemcaserun.FieldBuildURL, field.TypeString, value)
	}
	_node = &ProblemCaseRun{config: pcruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problemcaserun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcruo.mutation.done = true
	return _node, nil
}
