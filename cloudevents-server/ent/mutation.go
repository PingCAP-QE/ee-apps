// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PingCAP-QE/ee-apps/cloudevents-server/ent/predicate"
	"github.com/PingCAP-QE/ee-apps/cloudevents-server/ent/problemcaserun"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProblemCaseRun = "ProblemCaseRun"
)

// ProblemCaseRunMutation represents an operation that mutates the ProblemCaseRun nodes in the graph.
type ProblemCaseRunMutation struct {
	config
	op             Op
	typ            string
	id             *int
	repo           *string
	branch         *string
	suite_name     *string
	case_name      *string
	flaky          *bool
	timecost_ms    *int
	addtimecost_ms *int
	report_time    *time.Time
	build_url      *string
	reason         *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*ProblemCaseRun, error)
	predicates     []predicate.ProblemCaseRun
}

var _ ent.Mutation = (*ProblemCaseRunMutation)(nil)

// problemcaserunOption allows management of the mutation configuration using functional options.
type problemcaserunOption func(*ProblemCaseRunMutation)

// newProblemCaseRunMutation creates new mutation for the ProblemCaseRun entity.
func newProblemCaseRunMutation(c config, op Op, opts ...problemcaserunOption) *ProblemCaseRunMutation {
	m := &ProblemCaseRunMutation{
		config:        c,
		op:            op,
		typ:           TypeProblemCaseRun,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProblemCaseRunID sets the ID field of the mutation.
func withProblemCaseRunID(id int) problemcaserunOption {
	return func(m *ProblemCaseRunMutation) {
		var (
			err   error
			once  sync.Once
			value *ProblemCaseRun
		)
		m.oldValue = func(ctx context.Context) (*ProblemCaseRun, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProblemCaseRun.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProblemCaseRun sets the old ProblemCaseRun of the mutation.
func withProblemCaseRun(node *ProblemCaseRun) problemcaserunOption {
	return func(m *ProblemCaseRunMutation) {
		m.oldValue = func(context.Context) (*ProblemCaseRun, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProblemCaseRunMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProblemCaseRunMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProblemCaseRunMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProblemCaseRunMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProblemCaseRun.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRepo sets the "repo" field.
func (m *ProblemCaseRunMutation) SetRepo(s string) {
	m.repo = &s
}

// Repo returns the value of the "repo" field in the mutation.
func (m *ProblemCaseRunMutation) Repo() (r string, exists bool) {
	v := m.repo
	if v == nil {
		return
	}
	return *v, true
}

// OldRepo returns the old "repo" field's value of the ProblemCaseRun entity.
// If the ProblemCaseRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemCaseRunMutation) OldRepo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepo: %w", err)
	}
	return oldValue.Repo, nil
}

// ResetRepo resets all changes to the "repo" field.
func (m *ProblemCaseRunMutation) ResetRepo() {
	m.repo = nil
}

// SetBranch sets the "branch" field.
func (m *ProblemCaseRunMutation) SetBranch(s string) {
	m.branch = &s
}

// Branch returns the value of the "branch" field in the mutation.
func (m *ProblemCaseRunMutation) Branch() (r string, exists bool) {
	v := m.branch
	if v == nil {
		return
	}
	return *v, true
}

// OldBranch returns the old "branch" field's value of the ProblemCaseRun entity.
// If the ProblemCaseRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemCaseRunMutation) OldBranch(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBranch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBranch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBranch: %w", err)
	}
	return oldValue.Branch, nil
}

// ResetBranch resets all changes to the "branch" field.
func (m *ProblemCaseRunMutation) ResetBranch() {
	m.branch = nil
}

// SetSuiteName sets the "suite_name" field.
func (m *ProblemCaseRunMutation) SetSuiteName(s string) {
	m.suite_name = &s
}

// SuiteName returns the value of the "suite_name" field in the mutation.
func (m *ProblemCaseRunMutation) SuiteName() (r string, exists bool) {
	v := m.suite_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSuiteName returns the old "suite_name" field's value of the ProblemCaseRun entity.
// If the ProblemCaseRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemCaseRunMutation) OldSuiteName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuiteName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuiteName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuiteName: %w", err)
	}
	return oldValue.SuiteName, nil
}

// ResetSuiteName resets all changes to the "suite_name" field.
func (m *ProblemCaseRunMutation) ResetSuiteName() {
	m.suite_name = nil
}

// SetCaseName sets the "case_name" field.
func (m *ProblemCaseRunMutation) SetCaseName(s string) {
	m.case_name = &s
}

// CaseName returns the value of the "case_name" field in the mutation.
func (m *ProblemCaseRunMutation) CaseName() (r string, exists bool) {
	v := m.case_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCaseName returns the old "case_name" field's value of the ProblemCaseRun entity.
// If the ProblemCaseRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemCaseRunMutation) OldCaseName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaseName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaseName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaseName: %w", err)
	}
	return oldValue.CaseName, nil
}

// ResetCaseName resets all changes to the "case_name" field.
func (m *ProblemCaseRunMutation) ResetCaseName() {
	m.case_name = nil
}

// SetFlaky sets the "flaky" field.
func (m *ProblemCaseRunMutation) SetFlaky(b bool) {
	m.flaky = &b
}

// Flaky returns the value of the "flaky" field in the mutation.
func (m *ProblemCaseRunMutation) Flaky() (r bool, exists bool) {
	v := m.flaky
	if v == nil {
		return
	}
	return *v, true
}

// OldFlaky returns the old "flaky" field's value of the ProblemCaseRun entity.
// If the ProblemCaseRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemCaseRunMutation) OldFlaky(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlaky is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlaky requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlaky: %w", err)
	}
	return oldValue.Flaky, nil
}

// ResetFlaky resets all changes to the "flaky" field.
func (m *ProblemCaseRunMutation) ResetFlaky() {
	m.flaky = nil
}

// SetTimecostMs sets the "timecost_ms" field.
func (m *ProblemCaseRunMutation) SetTimecostMs(i int) {
	m.timecost_ms = &i
	m.addtimecost_ms = nil
}

// TimecostMs returns the value of the "timecost_ms" field in the mutation.
func (m *ProblemCaseRunMutation) TimecostMs() (r int, exists bool) {
	v := m.timecost_ms
	if v == nil {
		return
	}
	return *v, true
}

// OldTimecostMs returns the old "timecost_ms" field's value of the ProblemCaseRun entity.
// If the ProblemCaseRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemCaseRunMutation) OldTimecostMs(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimecostMs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimecostMs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimecostMs: %w", err)
	}
	return oldValue.TimecostMs, nil
}

// AddTimecostMs adds i to the "timecost_ms" field.
func (m *ProblemCaseRunMutation) AddTimecostMs(i int) {
	if m.addtimecost_ms != nil {
		*m.addtimecost_ms += i
	} else {
		m.addtimecost_ms = &i
	}
}

// AddedTimecostMs returns the value that was added to the "timecost_ms" field in this mutation.
func (m *ProblemCaseRunMutation) AddedTimecostMs() (r int, exists bool) {
	v := m.addtimecost_ms
	if v == nil {
		return
	}
	return *v, true
}

// ResetTimecostMs resets all changes to the "timecost_ms" field.
func (m *ProblemCaseRunMutation) ResetTimecostMs() {
	m.timecost_ms = nil
	m.addtimecost_ms = nil
}

// SetReportTime sets the "report_time" field.
func (m *ProblemCaseRunMutation) SetReportTime(t time.Time) {
	m.report_time = &t
}

// ReportTime returns the value of the "report_time" field in the mutation.
func (m *ProblemCaseRunMutation) ReportTime() (r time.Time, exists bool) {
	v := m.report_time
	if v == nil {
		return
	}
	return *v, true
}

// OldReportTime returns the old "report_time" field's value of the ProblemCaseRun entity.
// If the ProblemCaseRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemCaseRunMutation) OldReportTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReportTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReportTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReportTime: %w", err)
	}
	return oldValue.ReportTime, nil
}

// ResetReportTime resets all changes to the "report_time" field.
func (m *ProblemCaseRunMutation) ResetReportTime() {
	m.report_time = nil
}

// SetBuildURL sets the "build_url" field.
func (m *ProblemCaseRunMutation) SetBuildURL(s string) {
	m.build_url = &s
}

// BuildURL returns the value of the "build_url" field in the mutation.
func (m *ProblemCaseRunMutation) BuildURL() (r string, exists bool) {
	v := m.build_url
	if v == nil {
		return
	}
	return *v, true
}

// OldBuildURL returns the old "build_url" field's value of the ProblemCaseRun entity.
// If the ProblemCaseRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemCaseRunMutation) OldBuildURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBuildURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBuildURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuildURL: %w", err)
	}
	return oldValue.BuildURL, nil
}

// ResetBuildURL resets all changes to the "build_url" field.
func (m *ProblemCaseRunMutation) ResetBuildURL() {
	m.build_url = nil
}

// SetReason sets the "reason" field.
func (m *ProblemCaseRunMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *ProblemCaseRunMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the ProblemCaseRun entity.
// If the ProblemCaseRun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemCaseRunMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ResetReason resets all changes to the "reason" field.
func (m *ProblemCaseRunMutation) ResetReason() {
	m.reason = nil
}

// Where appends a list predicates to the ProblemCaseRunMutation builder.
func (m *ProblemCaseRunMutation) Where(ps ...predicate.ProblemCaseRun) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProblemCaseRunMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProblemCaseRunMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProblemCaseRun, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProblemCaseRunMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProblemCaseRunMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProblemCaseRun).
func (m *ProblemCaseRunMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProblemCaseRunMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.repo != nil {
		fields = append(fields, problemcaserun.FieldRepo)
	}
	if m.branch != nil {
		fields = append(fields, problemcaserun.FieldBranch)
	}
	if m.suite_name != nil {
		fields = append(fields, problemcaserun.FieldSuiteName)
	}
	if m.case_name != nil {
		fields = append(fields, problemcaserun.FieldCaseName)
	}
	if m.flaky != nil {
		fields = append(fields, problemcaserun.FieldFlaky)
	}
	if m.timecost_ms != nil {
		fields = append(fields, problemcaserun.FieldTimecostMs)
	}
	if m.report_time != nil {
		fields = append(fields, problemcaserun.FieldReportTime)
	}
	if m.build_url != nil {
		fields = append(fields, problemcaserun.FieldBuildURL)
	}
	if m.reason != nil {
		fields = append(fields, problemcaserun.FieldReason)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProblemCaseRunMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case problemcaserun.FieldRepo:
		return m.Repo()
	case problemcaserun.FieldBranch:
		return m.Branch()
	case problemcaserun.FieldSuiteName:
		return m.SuiteName()
	case problemcaserun.FieldCaseName:
		return m.CaseName()
	case problemcaserun.FieldFlaky:
		return m.Flaky()
	case problemcaserun.FieldTimecostMs:
		return m.TimecostMs()
	case problemcaserun.FieldReportTime:
		return m.ReportTime()
	case problemcaserun.FieldBuildURL:
		return m.BuildURL()
	case problemcaserun.FieldReason:
		return m.Reason()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProblemCaseRunMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case problemcaserun.FieldRepo:
		return m.OldRepo(ctx)
	case problemcaserun.FieldBranch:
		return m.OldBranch(ctx)
	case problemcaserun.FieldSuiteName:
		return m.OldSuiteName(ctx)
	case problemcaserun.FieldCaseName:
		return m.OldCaseName(ctx)
	case problemcaserun.FieldFlaky:
		return m.OldFlaky(ctx)
	case problemcaserun.FieldTimecostMs:
		return m.OldTimecostMs(ctx)
	case problemcaserun.FieldReportTime:
		return m.OldReportTime(ctx)
	case problemcaserun.FieldBuildURL:
		return m.OldBuildURL(ctx)
	case problemcaserun.FieldReason:
		return m.OldReason(ctx)
	}
	return nil, fmt.Errorf("unknown ProblemCaseRun field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProblemCaseRunMutation) SetField(name string, value ent.Value) error {
	switch name {
	case problemcaserun.FieldRepo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepo(v)
		return nil
	case problemcaserun.FieldBranch:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBranch(v)
		return nil
	case problemcaserun.FieldSuiteName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuiteName(v)
		return nil
	case problemcaserun.FieldCaseName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaseName(v)
		return nil
	case problemcaserun.FieldFlaky:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlaky(v)
		return nil
	case problemcaserun.FieldTimecostMs:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimecostMs(v)
		return nil
	case problemcaserun.FieldReportTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReportTime(v)
		return nil
	case problemcaserun.FieldBuildURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuildURL(v)
		return nil
	case problemcaserun.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	}
	return fmt.Errorf("unknown ProblemCaseRun field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProblemCaseRunMutation) AddedFields() []string {
	var fields []string
	if m.addtimecost_ms != nil {
		fields = append(fields, problemcaserun.FieldTimecostMs)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProblemCaseRunMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case problemcaserun.FieldTimecostMs:
		return m.AddedTimecostMs()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProblemCaseRunMutation) AddField(name string, value ent.Value) error {
	switch name {
	case problemcaserun.FieldTimecostMs:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTimecostMs(v)
		return nil
	}
	return fmt.Errorf("unknown ProblemCaseRun numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProblemCaseRunMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProblemCaseRunMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProblemCaseRunMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProblemCaseRun nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProblemCaseRunMutation) ResetField(name string) error {
	switch name {
	case problemcaserun.FieldRepo:
		m.ResetRepo()
		return nil
	case problemcaserun.FieldBranch:
		m.ResetBranch()
		return nil
	case problemcaserun.FieldSuiteName:
		m.ResetSuiteName()
		return nil
	case problemcaserun.FieldCaseName:
		m.ResetCaseName()
		return nil
	case problemcaserun.FieldFlaky:
		m.ResetFlaky()
		return nil
	case problemcaserun.FieldTimecostMs:
		m.ResetTimecostMs()
		return nil
	case problemcaserun.FieldReportTime:
		m.ResetReportTime()
		return nil
	case problemcaserun.FieldBuildURL:
		m.ResetBuildURL()
		return nil
	case problemcaserun.FieldReason:
		m.ResetReason()
		return nil
	}
	return fmt.Errorf("unknown ProblemCaseRun field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProblemCaseRunMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProblemCaseRunMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProblemCaseRunMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProblemCaseRunMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProblemCaseRunMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProblemCaseRunMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProblemCaseRunMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProblemCaseRun unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProblemCaseRunMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProblemCaseRun edge %s", name)
}
