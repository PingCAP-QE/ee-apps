// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PingCAP-QE/ee-apps/cloudevents-server/ent/problemcaserun"
)

// ProblemCaseRun is the model entity for the ProblemCaseRun schema.
type ProblemCaseRun struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// repo full name
	Repo string `json:"repo,omitempty"`
	// base branch
	Branch string `json:"branch,omitempty"`
	// suite name, target name in bazel.
	SuiteName string `json:"suite_name,omitempty"`
	// case name, may be TextXxx.TestYyy format.
	CaseName string `json:"case_name,omitempty"`
	// is it a flay run?
	Flaky bool `json:"flaky,omitempty"`
	// timecost(milliseconds) of the test case run
	TimecostMs int `json:"timecost_ms,omitempty"`
	// report unit timestamp
	ReportTime time.Time `json:"report_time,omitempty"`
	// CI build url
	BuildURL     string `json:"build_url,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProblemCaseRun) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case problemcaserun.FieldFlaky:
			values[i] = new(sql.NullBool)
		case problemcaserun.FieldID, problemcaserun.FieldTimecostMs:
			values[i] = new(sql.NullInt64)
		case problemcaserun.FieldRepo, problemcaserun.FieldBranch, problemcaserun.FieldSuiteName, problemcaserun.FieldCaseName, problemcaserun.FieldBuildURL:
			values[i] = new(sql.NullString)
		case problemcaserun.FieldReportTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProblemCaseRun fields.
func (pcr *ProblemCaseRun) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case problemcaserun.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pcr.ID = int(value.Int64)
		case problemcaserun.FieldRepo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repo", values[i])
			} else if value.Valid {
				pcr.Repo = value.String
			}
		case problemcaserun.FieldBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch", values[i])
			} else if value.Valid {
				pcr.Branch = value.String
			}
		case problemcaserun.FieldSuiteName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suite_name", values[i])
			} else if value.Valid {
				pcr.SuiteName = value.String
			}
		case problemcaserun.FieldCaseName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field case_name", values[i])
			} else if value.Valid {
				pcr.CaseName = value.String
			}
		case problemcaserun.FieldFlaky:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field flaky", values[i])
			} else if value.Valid {
				pcr.Flaky = value.Bool
			}
		case problemcaserun.FieldTimecostMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timecost_ms", values[i])
			} else if value.Valid {
				pcr.TimecostMs = int(value.Int64)
			}
		case problemcaserun.FieldReportTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field report_time", values[i])
			} else if value.Valid {
				pcr.ReportTime = value.Time
			}
		case problemcaserun.FieldBuildURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field build_url", values[i])
			} else if value.Valid {
				pcr.BuildURL = value.String
			}
		default:
			pcr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProblemCaseRun.
// This includes values selected through modifiers, order, etc.
func (pcr *ProblemCaseRun) Value(name string) (ent.Value, error) {
	return pcr.selectValues.Get(name)
}

// Update returns a builder for updating this ProblemCaseRun.
// Note that you need to call ProblemCaseRun.Unwrap() before calling this method if this ProblemCaseRun
// was returned from a transaction, and the transaction was committed or rolled back.
func (pcr *ProblemCaseRun) Update() *ProblemCaseRunUpdateOne {
	return NewProblemCaseRunClient(pcr.config).UpdateOne(pcr)
}

// Unwrap unwraps the ProblemCaseRun entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pcr *ProblemCaseRun) Unwrap() *ProblemCaseRun {
	_tx, ok := pcr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProblemCaseRun is not a transactional entity")
	}
	pcr.config.driver = _tx.drv
	return pcr
}

// String implements the fmt.Stringer.
func (pcr *ProblemCaseRun) String() string {
	var builder strings.Builder
	builder.WriteString("ProblemCaseRun(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pcr.ID))
	builder.WriteString("repo=")
	builder.WriteString(pcr.Repo)
	builder.WriteString(", ")
	builder.WriteString("branch=")
	builder.WriteString(pcr.Branch)
	builder.WriteString(", ")
	builder.WriteString("suite_name=")
	builder.WriteString(pcr.SuiteName)
	builder.WriteString(", ")
	builder.WriteString("case_name=")
	builder.WriteString(pcr.CaseName)
	builder.WriteString(", ")
	builder.WriteString("flaky=")
	builder.WriteString(fmt.Sprintf("%v", pcr.Flaky))
	builder.WriteString(", ")
	builder.WriteString("timecost_ms=")
	builder.WriteString(fmt.Sprintf("%v", pcr.TimecostMs))
	builder.WriteString(", ")
	builder.WriteString("report_time=")
	builder.WriteString(pcr.ReportTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("build_url=")
	builder.WriteString(pcr.BuildURL)
	builder.WriteByte(')')
	return builder.String()
}

// ProblemCaseRuns is a parsable slice of ProblemCaseRun.
type ProblemCaseRuns []*ProblemCaseRun
