// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PingCAP-QE/ee-apps/cloudevents-server/ent/predicate"
	"github.com/PingCAP-QE/ee-apps/cloudevents-server/ent/problemcaserun"
)

// ProblemCaseRunDelete is the builder for deleting a ProblemCaseRun entity.
type ProblemCaseRunDelete struct {
	config
	hooks    []Hook
	mutation *ProblemCaseRunMutation
}

// Where appends a list predicates to the ProblemCaseRunDelete builder.
func (pcrd *ProblemCaseRunDelete) Where(ps ...predicate.ProblemCaseRun) *ProblemCaseRunDelete {
	pcrd.mutation.Where(ps...)
	return pcrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pcrd *ProblemCaseRunDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pcrd.sqlExec, pcrd.mutation, pcrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pcrd *ProblemCaseRunDelete) ExecX(ctx context.Context) int {
	n, err := pcrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pcrd *ProblemCaseRunDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(problemcaserun.Table, sqlgraph.NewFieldSpec(problemcaserun.FieldID, field.TypeInt))
	if ps := pcrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pcrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pcrd.mutation.done = true
	return affected, err
}

// ProblemCaseRunDeleteOne is the builder for deleting a single ProblemCaseRun entity.
type ProblemCaseRunDeleteOne struct {
	pcrd *ProblemCaseRunDelete
}

// Where appends a list predicates to the ProblemCaseRunDelete builder.
func (pcrdo *ProblemCaseRunDeleteOne) Where(ps ...predicate.ProblemCaseRun) *ProblemCaseRunDeleteOne {
	pcrdo.pcrd.mutation.Where(ps...)
	return pcrdo
}

// Exec executes the deletion query.
func (pcrdo *ProblemCaseRunDeleteOne) Exec(ctx context.Context) error {
	n, err := pcrdo.pcrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{problemcaserun.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pcrdo *ProblemCaseRunDeleteOne) ExecX(ctx context.Context) {
	if err := pcrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
