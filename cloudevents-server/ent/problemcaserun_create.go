// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PingCAP-QE/ee-apps/cloudevents-server/ent/problemcaserun"
)

// ProblemCaseRunCreate is the builder for creating a ProblemCaseRun entity.
type ProblemCaseRunCreate struct {
	config
	mutation *ProblemCaseRunMutation
	hooks    []Hook
}

// SetRepo sets the "repo" field.
func (pcrc *ProblemCaseRunCreate) SetRepo(s string) *ProblemCaseRunCreate {
	pcrc.mutation.SetRepo(s)
	return pcrc
}

// SetBranch sets the "branch" field.
func (pcrc *ProblemCaseRunCreate) SetBranch(s string) *ProblemCaseRunCreate {
	pcrc.mutation.SetBranch(s)
	return pcrc
}

// SetSuiteName sets the "suite_name" field.
func (pcrc *ProblemCaseRunCreate) SetSuiteName(s string) *ProblemCaseRunCreate {
	pcrc.mutation.SetSuiteName(s)
	return pcrc
}

// SetCaseName sets the "case_name" field.
func (pcrc *ProblemCaseRunCreate) SetCaseName(s string) *ProblemCaseRunCreate {
	pcrc.mutation.SetCaseName(s)
	return pcrc
}

// SetFlaky sets the "flaky" field.
func (pcrc *ProblemCaseRunCreate) SetFlaky(b bool) *ProblemCaseRunCreate {
	pcrc.mutation.SetFlaky(b)
	return pcrc
}

// SetNillableFlaky sets the "flaky" field if the given value is not nil.
func (pcrc *ProblemCaseRunCreate) SetNillableFlaky(b *bool) *ProblemCaseRunCreate {
	if b != nil {
		pcrc.SetFlaky(*b)
	}
	return pcrc
}

// SetTimecostMs sets the "timecost_ms" field.
func (pcrc *ProblemCaseRunCreate) SetTimecostMs(i int) *ProblemCaseRunCreate {
	pcrc.mutation.SetTimecostMs(i)
	return pcrc
}

// SetReportTime sets the "report_time" field.
func (pcrc *ProblemCaseRunCreate) SetReportTime(t time.Time) *ProblemCaseRunCreate {
	pcrc.mutation.SetReportTime(t)
	return pcrc
}

// SetBuildURL sets the "build_url" field.
func (pcrc *ProblemCaseRunCreate) SetBuildURL(s string) *ProblemCaseRunCreate {
	pcrc.mutation.SetBuildURL(s)
	return pcrc
}

// Mutation returns the ProblemCaseRunMutation object of the builder.
func (pcrc *ProblemCaseRunCreate) Mutation() *ProblemCaseRunMutation {
	return pcrc.mutation
}

// Save creates the ProblemCaseRun in the database.
func (pcrc *ProblemCaseRunCreate) Save(ctx context.Context) (*ProblemCaseRun, error) {
	pcrc.defaults()
	return withHooks(ctx, pcrc.sqlSave, pcrc.mutation, pcrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcrc *ProblemCaseRunCreate) SaveX(ctx context.Context) *ProblemCaseRun {
	v, err := pcrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcrc *ProblemCaseRunCreate) Exec(ctx context.Context) error {
	_, err := pcrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcrc *ProblemCaseRunCreate) ExecX(ctx context.Context) {
	if err := pcrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcrc *ProblemCaseRunCreate) defaults() {
	if _, ok := pcrc.mutation.Flaky(); !ok {
		v := problemcaserun.DefaultFlaky
		pcrc.mutation.SetFlaky(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcrc *ProblemCaseRunCreate) check() error {
	if _, ok := pcrc.mutation.Repo(); !ok {
		return &ValidationError{Name: "repo", err: errors.New(`ent: missing required field "ProblemCaseRun.repo"`)}
	}
	if _, ok := pcrc.mutation.Branch(); !ok {
		return &ValidationError{Name: "branch", err: errors.New(`ent: missing required field "ProblemCaseRun.branch"`)}
	}
	if _, ok := pcrc.mutation.SuiteName(); !ok {
		return &ValidationError{Name: "suite_name", err: errors.New(`ent: missing required field "ProblemCaseRun.suite_name"`)}
	}
	if _, ok := pcrc.mutation.CaseName(); !ok {
		return &ValidationError{Name: "case_name", err: errors.New(`ent: missing required field "ProblemCaseRun.case_name"`)}
	}
	if _, ok := pcrc.mutation.Flaky(); !ok {
		return &ValidationError{Name: "flaky", err: errors.New(`ent: missing required field "ProblemCaseRun.flaky"`)}
	}
	if _, ok := pcrc.mutation.TimecostMs(); !ok {
		return &ValidationError{Name: "timecost_ms", err: errors.New(`ent: missing required field "ProblemCaseRun.timecost_ms"`)}
	}
	if _, ok := pcrc.mutation.ReportTime(); !ok {
		return &ValidationError{Name: "report_time", err: errors.New(`ent: missing required field "ProblemCaseRun.report_time"`)}
	}
	if _, ok := pcrc.mutation.BuildURL(); !ok {
		return &ValidationError{Name: "build_url", err: errors.New(`ent: missing required field "ProblemCaseRun.build_url"`)}
	}
	if v, ok := pcrc.mutation.BuildURL(); ok {
		if err := problemcaserun.BuildURLValidator(v); err != nil {
			return &ValidationError{Name: "build_url", err: fmt.Errorf(`ent: validator failed for field "ProblemCaseRun.build_url": %w`, err)}
		}
	}
	return nil
}

func (pcrc *ProblemCaseRunCreate) sqlSave(ctx context.Context) (*ProblemCaseRun, error) {
	if err := pcrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pcrc.mutation.id = &_node.ID
	pcrc.mutation.done = true
	return _node, nil
}

func (pcrc *ProblemCaseRunCreate) createSpec() (*ProblemCaseRun, *sqlgraph.CreateSpec) {
	var (
		_node = &ProblemCaseRun{config: pcrc.config}
		_spec = sqlgraph.NewCreateSpec(problemcaserun.Table, sqlgraph.NewFieldSpec(problemcaserun.FieldID, field.TypeInt))
	)
	if value, ok := pcrc.mutation.Repo(); ok {
		_spec.SetField(problemcaserun.FieldRepo, field.TypeString, value)
		_node.Repo = value
	}
	if value, ok := pcrc.mutation.Branch(); ok {
		_spec.SetField(problemcaserun.FieldBranch, field.TypeString, value)
		_node.Branch = value
	}
	if value, ok := pcrc.mutation.SuiteName(); ok {
		_spec.SetField(problemcaserun.FieldSuiteName, field.TypeString, value)
		_node.SuiteName = value
	}
	if value, ok := pcrc.mutation.CaseName(); ok {
		_spec.SetField(problemcaserun.FieldCaseName, field.TypeString, value)
		_node.CaseName = value
	}
	if value, ok := pcrc.mutation.Flaky(); ok {
		_spec.SetField(problemcaserun.FieldFlaky, field.TypeBool, value)
		_node.Flaky = value
	}
	if value, ok := pcrc.mutation.TimecostMs(); ok {
		_spec.SetField(problemcaserun.FieldTimecostMs, field.TypeInt, value)
		_node.TimecostMs = value
	}
	if value, ok := pcrc.mutation.ReportTime(); ok {
		_spec.SetField(problemcaserun.FieldReportTime, field.TypeTime, value)
		_node.ReportTime = value
	}
	if value, ok := pcrc.mutation.BuildURL(); ok {
		_spec.SetField(problemcaserun.FieldBuildURL, field.TypeString, value)
		_node.BuildURL = value
	}
	return _node, _spec
}

// ProblemCaseRunCreateBulk is the builder for creating many ProblemCaseRun entities in bulk.
type ProblemCaseRunCreateBulk struct {
	config
	builders []*ProblemCaseRunCreate
}

// Save creates the ProblemCaseRun entities in the database.
func (pcrcb *ProblemCaseRunCreateBulk) Save(ctx context.Context) ([]*ProblemCaseRun, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcrcb.builders))
	nodes := make([]*ProblemCaseRun, len(pcrcb.builders))
	mutators := make([]Mutator, len(pcrcb.builders))
	for i := range pcrcb.builders {
		func(i int, root context.Context) {
			builder := pcrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProblemCaseRunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcrcb *ProblemCaseRunCreateBulk) SaveX(ctx context.Context) []*ProblemCaseRun {
	v, err := pcrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcrcb *ProblemCaseRunCreateBulk) Exec(ctx context.Context) error {
	_, err := pcrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcrcb *ProblemCaseRunCreateBulk) ExecX(ctx context.Context) {
	if err := pcrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
