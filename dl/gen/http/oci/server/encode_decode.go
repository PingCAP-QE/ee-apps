// Code generated by goa v3.14.1, DO NOT EDIT.
//
// oci HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/dl/design

package server

import (
	"context"
	"net/http"
	"strconv"

	oci "github.com/PingCAP-QE/ee-apps/dl/gen/oci"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListFilesResponse returns an encoder for responses returned by the oci
// list-files endpoint.
func EncodeListFilesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListFilesRequest returns a decoder for requests sent to the oci
// list-files endpoint.
func DecodeListFilesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			repository string
			tag        string
			err        error

			params = mux.Vars(r)
		)
		repository = params["repository"]
		tag = r.URL.Query().Get("tag")
		if tag == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("tag", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewListFilesPayload(repository, tag)

		return payload, nil
	}
}

// EncodeDownloadFileResponse returns an encoder for responses returned by the
// oci download-file endpoint.
func EncodeDownloadFileResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*oci.DownloadFileResult)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/octet-stream")
		{
			val := res.Length
			lengths := strconv.FormatInt(val, 10)
			w.Header().Set("Content-Length", lengths)
		}
		w.Header().Set("Content-Disposition", res.ContentDisposition)
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDownloadFileRequest returns a decoder for requests sent to the oci
// download-file endpoint.
func DecodeDownloadFileRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			repository string
			file       string
			tag        string
			err        error

			params = mux.Vars(r)
		)
		repository = params["repository"]
		file = r.URL.Query().Get("file")
		if file == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("file", "query string"))
		}
		tag = r.URL.Query().Get("tag")
		if tag == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("tag", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDownloadFilePayload(repository, file, tag)

		return payload, nil
	}
}
