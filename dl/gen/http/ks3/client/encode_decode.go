// Code generated by goa v3.16.1, DO NOT EDIT.
//
// ks3 HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/dl/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strconv"

	ks3 "github.com/PingCAP-QE/ee-apps/dl/gen/ks3"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildDownloadObjectRequest instantiates a HTTP request object with method
// and path set to call the "ks3" service "download-object" endpoint
func (c *Client) BuildDownloadObjectRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		bucket string
		key    string
	)
	{
		p, ok := v.(*ks3.DownloadObjectPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("ks3", "download-object", "*ks3.DownloadObjectPayload", v)
		}
		bucket = p.Bucket
		key = p.Key
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DownloadObjectKs3Path(bucket, key)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ks3", "download-object", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDownloadObjectResponse returns a decoder for responses returned by the
// ks3 download-object endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeDownloadObjectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				length             int64
				contentDisposition string
				err                error
			)
			{
				lengthRaw := resp.Header.Get("Content-Length")
				if lengthRaw == "" {
					return nil, goahttp.ErrValidationError("ks3", "download-object", goa.MissingFieldError("length", "header"))
				}
				v, err2 := strconv.ParseInt(lengthRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("length", lengthRaw, "integer"))
				}
				length = v
			}
			contentDispositionRaw := resp.Header.Get("Content-Disposition")
			if contentDispositionRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("contentDisposition", "header"))
			}
			contentDisposition = contentDispositionRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("ks3", "download-object", err)
			}
			res := NewDownloadObjectResultOK(length, contentDisposition)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ks3", "download-object", resp.StatusCode, string(body))
		}
	}
}
