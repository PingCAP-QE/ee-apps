// Code generated by goa v3.14.1, DO NOT EDIT.
//
// oci endpoints
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/dl/design

package oci

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "oci" service endpoints.
type Endpoints struct {
	ListFiles    goa.Endpoint
	DownloadFile goa.Endpoint
}

// DownloadFileResponseData holds both the result and the HTTP response body
// reader of the "download-file" method.
type DownloadFileResponseData struct {
	// Result is the method result.
	Result *DownloadFileResult
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "oci" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListFiles:    NewListFilesEndpoint(s),
		DownloadFile: NewDownloadFileEndpoint(s),
	}
}

// Use applies the given middleware to all the "oci" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListFiles = m(e.ListFiles)
	e.DownloadFile = m(e.DownloadFile)
}

// NewListFilesEndpoint returns an endpoint function that calls the method
// "list-files" of service "oci".
func NewListFilesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListFilesPayload)
		return s.ListFiles(ctx, p)
	}
}

// NewDownloadFileEndpoint returns an endpoint function that calls the method
// "download-file" of service "oci".
func NewDownloadFileEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DownloadFilePayload)
		res, body, err := s.DownloadFile(ctx, p)
		if err != nil {
			return nil, err
		}
		return &DownloadFileResponseData{Result: res, Body: body}, nil
	}
}
