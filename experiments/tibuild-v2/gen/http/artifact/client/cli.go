// Code generated by goa v3.20.0, DO NOT EDIT.
//
// artifact HTTP client CLI support package
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/tibuild/design

package client

import (
	"encoding/json"
	"fmt"

	artifact "github.com/PingCAP-QE/ee-apps/tibuild/gen/artifact"
	goa "goa.design/goa/v3/pkg"
)

// BuildSyncImagePayload builds the payload for the artifact syncImage endpoint
// from CLI flags.
func BuildSyncImagePayload(artifactSyncImageBody string) (*artifact.SyncImagePayload, error) {
	var err error
	var body SyncImageRequestBody
	{
		err = json.Unmarshal([]byte(artifactSyncImageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ImageSyncRequest\": {\n         \"source\": \"Optio et ut dolorem ullam.\",\n         \"target\": \"Vitae fugiat eligendi omnis.\"\n      }\n   }'")
		}
		if body.ImageSyncRequest == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("ImageSyncRequest", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &artifact.SyncImagePayload{}
	if body.ImageSyncRequest != nil {
		v.ImageSyncRequest = marshalImageSyncRequestRequestBodyToArtifactImageSyncRequest(body.ImageSyncRequest)
	}

	return v, nil
}
