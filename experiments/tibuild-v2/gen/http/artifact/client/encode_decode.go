// Code generated by goa v3.20.0, DO NOT EDIT.
//
// artifact HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/tibuild/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	artifact "github.com/PingCAP-QE/ee-apps/tibuild/gen/artifact"
	goahttp "goa.design/goa/v3/http"
)

// BuildSyncImageRequest instantiates a HTTP request object with method and
// path set to call the "artifact" service "syncImage" endpoint
func (c *Client) BuildSyncImageRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SyncImageArtifactPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("artifact", "syncImage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSyncImageRequest returns an encoder for requests sent to the artifact
// syncImage server.
func EncodeSyncImageRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*artifact.SyncImagePayload)
		if !ok {
			return goahttp.ErrInvalidType("artifact", "syncImage", "*artifact.SyncImagePayload", v)
		}
		body := NewSyncImageRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("artifact", "syncImage", err)
		}
		return nil
	}
}

// DecodeSyncImageResponse returns a decoder for responses returned by the
// artifact syncImage endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSyncImageResponse may return the following errors:
//   - "BadRequest" (type *artifact.HTTPError): http.StatusBadRequest
//   - "InternalServerError" (type *artifact.HTTPError): http.StatusInternalServerError
//   - error: internal error
func DecodeSyncImageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SyncImageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artifact", "syncImage", err)
			}
			err = ValidateSyncImageResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("artifact", "syncImage", err)
			}
			res := NewSyncImageImageSyncRequestOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body SyncImageBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artifact", "syncImage", err)
			}
			err = ValidateSyncImageBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("artifact", "syncImage", err)
			}
			return nil, NewSyncImageBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body SyncImageInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("artifact", "syncImage", err)
			}
			err = ValidateSyncImageInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("artifact", "syncImage", err)
			}
			return nil, NewSyncImageInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("artifact", "syncImage", resp.StatusCode, string(body))
		}
	}
}

// marshalArtifactImageSyncRequestToImageSyncRequestRequestBody builds a value
// of type *ImageSyncRequestRequestBody from a value of type
// *artifact.ImageSyncRequest.
func marshalArtifactImageSyncRequestToImageSyncRequestRequestBody(v *artifact.ImageSyncRequest) *ImageSyncRequestRequestBody {
	res := &ImageSyncRequestRequestBody{
		Source: v.Source,
		Target: v.Target,
	}

	return res
}

// marshalImageSyncRequestRequestBodyToArtifactImageSyncRequest builds a value
// of type *artifact.ImageSyncRequest from a value of type
// *ImageSyncRequestRequestBody.
func marshalImageSyncRequestRequestBodyToArtifactImageSyncRequest(v *ImageSyncRequestRequestBody) *artifact.ImageSyncRequest {
	res := &artifact.ImageSyncRequest{
		Source: v.Source,
		Target: v.Target,
	}

	return res
}
