// Code generated by goa v3.20.0, DO NOT EDIT.
//
// devbuild HTTP client types
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/tibuild/design

package client

import (
	devbuild "github.com/PingCAP-QE/ee-apps/tibuild/gen/devbuild"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "devbuild" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Creator of build
	CreatedBy string `form:"createdBy" json:"createdBy" xml:"createdBy"`
	// Build to create, only spec field is required, others are ignored
	Request *DevBuildRequestRequestBody `form:"request" json:"request" xml:"request"`
}

// UpdateRequestBody is the type of the "devbuild" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// Build to update
	DevBuild *DevBuildRequestBody `form:"DevBuild" json:"DevBuild" xml:"DevBuild"`
}

// ListResponseBody is the type of the "devbuild" service "list" endpoint HTTP
// response body.
type ListResponseBody []*DevBuildResponse

// CreateResponseBody is the type of the "devbuild" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	ID     *int                        `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Meta   *DevBuildMetaResponseBody   `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
	Spec   *DevBuildSpecResponseBody   `form:"spec,omitempty" json:"spec,omitempty" xml:"spec,omitempty"`
	Status *DevBuildStatusResponseBody `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// GetResponseBody is the type of the "devbuild" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	ID     *int                        `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Meta   *DevBuildMetaResponseBody   `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
	Spec   *DevBuildSpecResponseBody   `form:"spec,omitempty" json:"spec,omitempty" xml:"spec,omitempty"`
	Status *DevBuildStatusResponseBody `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// UpdateResponseBody is the type of the "devbuild" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	ID     *int                        `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Meta   *DevBuildMetaResponseBody   `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
	Spec   *DevBuildSpecResponseBody   `form:"spec,omitempty" json:"spec,omitempty" xml:"spec,omitempty"`
	Status *DevBuildStatusResponseBody `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// RerunResponseBody is the type of the "devbuild" service "rerun" endpoint
// HTTP response body.
type RerunResponseBody struct {
	ID     *int                        `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Meta   *DevBuildMetaResponseBody   `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
	Spec   *DevBuildSpecResponseBody   `form:"spec,omitempty" json:"spec,omitempty" xml:"spec,omitempty"`
	Status *DevBuildStatusResponseBody `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// ListBadRequestResponseBody is the type of the "devbuild" service "list"
// endpoint HTTP response body for the "BadRequest" error.
type ListBadRequestResponseBody struct {
	Code    *int    `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "devbuild" service "create"
// endpoint HTTP response body for the "BadRequest" error.
type CreateBadRequestResponseBody struct {
	Code    *int    `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateInternalServerErrorResponseBody is the type of the "devbuild" service
// "create" endpoint HTTP response body for the "InternalServerError" error.
type CreateInternalServerErrorResponseBody struct {
	Code    *int    `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetBadRequestResponseBody is the type of the "devbuild" service "get"
// endpoint HTTP response body for the "BadRequest" error.
type GetBadRequestResponseBody struct {
	Code    *int    `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetInternalServerErrorResponseBody is the type of the "devbuild" service
// "get" endpoint HTTP response body for the "InternalServerError" error.
type GetInternalServerErrorResponseBody struct {
	Code    *int    `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "devbuild" service "update"
// endpoint HTTP response body for the "BadRequest" error.
type UpdateBadRequestResponseBody struct {
	Code    *int    `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateInternalServerErrorResponseBody is the type of the "devbuild" service
// "update" endpoint HTTP response body for the "InternalServerError" error.
type UpdateInternalServerErrorResponseBody struct {
	Code    *int    `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RerunBadRequestResponseBody is the type of the "devbuild" service "rerun"
// endpoint HTTP response body for the "BadRequest" error.
type RerunBadRequestResponseBody struct {
	Code    *int    `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RerunInternalServerErrorResponseBody is the type of the "devbuild" service
// "rerun" endpoint HTTP response body for the "InternalServerError" error.
type RerunInternalServerErrorResponseBody struct {
	Code    *int    `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DevBuildResponse is used to define fields on response body types.
type DevBuildResponse struct {
	ID     *int                    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Meta   *DevBuildMetaResponse   `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
	Spec   *DevBuildSpecResponse   `form:"spec,omitempty" json:"spec,omitempty" xml:"spec,omitempty"`
	Status *DevBuildStatusResponse `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// DevBuildMetaResponse is used to define fields on response body types.
type DevBuildMetaResponse struct {
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	CreatedBy *string `form:"createdBy,omitempty" json:"createdBy,omitempty" xml:"createdBy,omitempty"`
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
}

// DevBuildSpecResponse is used to define fields on response body types.
type DevBuildSpecResponse struct {
	BuildEnv          *string `form:"buildEnv,omitempty" json:"buildEnv,omitempty" xml:"buildEnv,omitempty"`
	BuilderImg        *string `form:"builderImg,omitempty" json:"builderImg,omitempty" xml:"builderImg,omitempty"`
	Edition           *string `form:"edition,omitempty" json:"edition,omitempty" xml:"edition,omitempty"`
	Features          *string `form:"features,omitempty" json:"features,omitempty" xml:"features,omitempty"`
	GitHash           *string `form:"gitHash,omitempty" json:"gitHash,omitempty" xml:"gitHash,omitempty"`
	GitRef            *string `form:"gitRef,omitempty" json:"gitRef,omitempty" xml:"gitRef,omitempty"`
	GithubRepo        *string `form:"githubRepo,omitempty" json:"githubRepo,omitempty" xml:"githubRepo,omitempty"`
	IsHotfix          *bool   `form:"isHotfix,omitempty" json:"isHotfix,omitempty" xml:"isHotfix,omitempty"`
	IsPushGCR         *bool   `form:"isPushGCR,omitempty" json:"isPushGCR,omitempty" xml:"isPushGCR,omitempty"`
	PipelineEngine    *string `form:"pipelineEngine,omitempty" json:"pipelineEngine,omitempty" xml:"pipelineEngine,omitempty"`
	PluginGitRef      *string `form:"pluginGitRef,omitempty" json:"pluginGitRef,omitempty" xml:"pluginGitRef,omitempty"`
	Product           *string `form:"product,omitempty" json:"product,omitempty" xml:"product,omitempty"`
	ProductBaseImg    *string `form:"productBaseImg,omitempty" json:"productBaseImg,omitempty" xml:"productBaseImg,omitempty"`
	ProductDockerfile *string `form:"productDockerfile,omitempty" json:"productDockerfile,omitempty" xml:"productDockerfile,omitempty"`
	TargetImg         *string `form:"targetImg,omitempty" json:"targetImg,omitempty" xml:"targetImg,omitempty"`
	Version           *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// DevBuildStatusResponse is used to define fields on response body types.
type DevBuildStatusResponse struct {
	BuildReport      *BuildReportResponse  `form:"buildReport,omitempty" json:"buildReport,omitempty" xml:"buildReport,omitempty"`
	ErrMsg           *string               `form:"errMsg,omitempty" json:"errMsg,omitempty" xml:"errMsg,omitempty"`
	PipelineBuildID  *int                  `form:"pipelineBuildID,omitempty" json:"pipelineBuildID,omitempty" xml:"pipelineBuildID,omitempty"`
	PipelineEndAt    *string               `form:"pipelineEndAt,omitempty" json:"pipelineEndAt,omitempty" xml:"pipelineEndAt,omitempty"`
	PipelineStartAt  *string               `form:"pipelineStartAt,omitempty" json:"pipelineStartAt,omitempty" xml:"pipelineStartAt,omitempty"`
	PipelineViewURL  *string               `form:"pipelineViewURL,omitempty" json:"pipelineViewURL,omitempty" xml:"pipelineViewURL,omitempty"`
	PipelineViewURLs []string              `form:"pipelineViewURLs,omitempty" json:"pipelineViewURLs,omitempty" xml:"pipelineViewURLs,omitempty"`
	Status           *string               `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	TektonStatus     *TektonStatusResponse `form:"tektonStatus,omitempty" json:"tektonStatus,omitempty" xml:"tektonStatus,omitempty"`
}

// BuildReportResponse is used to define fields on response body types.
type BuildReportResponse struct {
	Binaries       []*BinArtifactResponse   `form:"binaries,omitempty" json:"binaries,omitempty" xml:"binaries,omitempty"`
	GitHash        *string                  `form:"gitHash,omitempty" json:"gitHash,omitempty" xml:"gitHash,omitempty"`
	Images         []*ImageArtifactResponse `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	PluginGitHash  *string                  `form:"pluginGitHash,omitempty" json:"pluginGitHash,omitempty" xml:"pluginGitHash,omitempty"`
	PrintedVersion *string                  `form:"printedVersion,omitempty" json:"printedVersion,omitempty" xml:"printedVersion,omitempty"`
}

// BinArtifactResponse is used to define fields on response body types.
type BinArtifactResponse struct {
	Component     *string          `form:"component,omitempty" json:"component,omitempty" xml:"component,omitempty"`
	OciFile       *OciFileResponse `form:"ociFile,omitempty" json:"ociFile,omitempty" xml:"ociFile,omitempty"`
	Platform      *string          `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	Sha256OciFile *OciFileResponse `form:"sha256OciFile,omitempty" json:"sha256OciFile,omitempty" xml:"sha256OciFile,omitempty"`
	Sha256URL     *string          `form:"sha256URL,omitempty" json:"sha256URL,omitempty" xml:"sha256URL,omitempty"`
	URL           *string          `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// OciFileResponse is used to define fields on response body types.
type OciFileResponse struct {
	File *string `form:"file,omitempty" json:"file,omitempty" xml:"file,omitempty"`
	Repo *string `form:"repo,omitempty" json:"repo,omitempty" xml:"repo,omitempty"`
	Tag  *string `form:"tag,omitempty" json:"tag,omitempty" xml:"tag,omitempty"`
}

// ImageArtifactResponse is used to define fields on response body types.
type ImageArtifactResponse struct {
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	URL      *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// TektonStatusResponse is used to define fields on response body types.
type TektonStatusResponse struct {
	Pipelines []*TektonPipelineResponse `form:"pipelines,omitempty" json:"pipelines,omitempty" xml:"pipelines,omitempty"`
}

// TektonPipelineResponse is used to define fields on response body types.
type TektonPipelineResponse struct {
	EndAt        *string                  `form:"endAt,omitempty" json:"endAt,omitempty" xml:"endAt,omitempty"`
	GitHash      *string                  `form:"gitHash,omitempty" json:"gitHash,omitempty" xml:"gitHash,omitempty"`
	Images       []*ImageArtifactResponse `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	Name         *string                  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	OciArtifacts []*OciArtifactResponse   `form:"ociArtifacts,omitempty" json:"ociArtifacts,omitempty" xml:"ociArtifacts,omitempty"`
	Platform     *string                  `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	StartAt      *string                  `form:"startAt,omitempty" json:"startAt,omitempty" xml:"startAt,omitempty"`
	Status       *string                  `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	URL          *string                  `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// OciArtifactResponse is used to define fields on response body types.
type OciArtifactResponse struct {
	Files []string `form:"files,omitempty" json:"files,omitempty" xml:"files,omitempty"`
	Repo  *string  `form:"repo,omitempty" json:"repo,omitempty" xml:"repo,omitempty"`
	Tag   *string  `form:"tag,omitempty" json:"tag,omitempty" xml:"tag,omitempty"`
}

// DevBuildRequestRequestBody is used to define fields on request body types.
type DevBuildRequestRequestBody struct {
	BuildEnv          *string `form:"buildEnv,omitempty" json:"buildEnv,omitempty" xml:"buildEnv,omitempty"`
	BuilderImg        *string `form:"builderImg,omitempty" json:"builderImg,omitempty" xml:"builderImg,omitempty"`
	Edition           string  `form:"edition" json:"edition" xml:"edition"`
	Features          *string `form:"features,omitempty" json:"features,omitempty" xml:"features,omitempty"`
	GitRef            string  `form:"gitRef" json:"gitRef" xml:"gitRef"`
	GithubRepo        *string `form:"githubRepo,omitempty" json:"githubRepo,omitempty" xml:"githubRepo,omitempty"`
	IsHotfix          *bool   `form:"isHotfix,omitempty" json:"isHotfix,omitempty" xml:"isHotfix,omitempty"`
	IsPushGCR         *bool   `form:"isPushGCR,omitempty" json:"isPushGCR,omitempty" xml:"isPushGCR,omitempty"`
	PipelineEngine    *string `form:"pipelineEngine,omitempty" json:"pipelineEngine,omitempty" xml:"pipelineEngine,omitempty"`
	PluginGitRef      *string `form:"pluginGitRef,omitempty" json:"pluginGitRef,omitempty" xml:"pluginGitRef,omitempty"`
	Product           string  `form:"product" json:"product" xml:"product"`
	ProductBaseImg    *string `form:"productBaseImg,omitempty" json:"productBaseImg,omitempty" xml:"productBaseImg,omitempty"`
	ProductDockerfile *string `form:"productDockerfile,omitempty" json:"productDockerfile,omitempty" xml:"productDockerfile,omitempty"`
	TargetImg         *string `form:"targetImg,omitempty" json:"targetImg,omitempty" xml:"targetImg,omitempty"`
	Version           string  `form:"version" json:"version" xml:"version"`
}

// DevBuildMetaResponseBody is used to define fields on response body types.
type DevBuildMetaResponseBody struct {
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	CreatedBy *string `form:"createdBy,omitempty" json:"createdBy,omitempty" xml:"createdBy,omitempty"`
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
}

// DevBuildSpecResponseBody is used to define fields on response body types.
type DevBuildSpecResponseBody struct {
	BuildEnv          *string `form:"buildEnv,omitempty" json:"buildEnv,omitempty" xml:"buildEnv,omitempty"`
	BuilderImg        *string `form:"builderImg,omitempty" json:"builderImg,omitempty" xml:"builderImg,omitempty"`
	Edition           *string `form:"edition,omitempty" json:"edition,omitempty" xml:"edition,omitempty"`
	Features          *string `form:"features,omitempty" json:"features,omitempty" xml:"features,omitempty"`
	GitHash           *string `form:"gitHash,omitempty" json:"gitHash,omitempty" xml:"gitHash,omitempty"`
	GitRef            *string `form:"gitRef,omitempty" json:"gitRef,omitempty" xml:"gitRef,omitempty"`
	GithubRepo        *string `form:"githubRepo,omitempty" json:"githubRepo,omitempty" xml:"githubRepo,omitempty"`
	IsHotfix          *bool   `form:"isHotfix,omitempty" json:"isHotfix,omitempty" xml:"isHotfix,omitempty"`
	IsPushGCR         *bool   `form:"isPushGCR,omitempty" json:"isPushGCR,omitempty" xml:"isPushGCR,omitempty"`
	PipelineEngine    *string `form:"pipelineEngine,omitempty" json:"pipelineEngine,omitempty" xml:"pipelineEngine,omitempty"`
	PluginGitRef      *string `form:"pluginGitRef,omitempty" json:"pluginGitRef,omitempty" xml:"pluginGitRef,omitempty"`
	Product           *string `form:"product,omitempty" json:"product,omitempty" xml:"product,omitempty"`
	ProductBaseImg    *string `form:"productBaseImg,omitempty" json:"productBaseImg,omitempty" xml:"productBaseImg,omitempty"`
	ProductDockerfile *string `form:"productDockerfile,omitempty" json:"productDockerfile,omitempty" xml:"productDockerfile,omitempty"`
	TargetImg         *string `form:"targetImg,omitempty" json:"targetImg,omitempty" xml:"targetImg,omitempty"`
	Version           *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// DevBuildStatusResponseBody is used to define fields on response body types.
type DevBuildStatusResponseBody struct {
	BuildReport      *BuildReportResponseBody  `form:"buildReport,omitempty" json:"buildReport,omitempty" xml:"buildReport,omitempty"`
	ErrMsg           *string                   `form:"errMsg,omitempty" json:"errMsg,omitempty" xml:"errMsg,omitempty"`
	PipelineBuildID  *int                      `form:"pipelineBuildID,omitempty" json:"pipelineBuildID,omitempty" xml:"pipelineBuildID,omitempty"`
	PipelineEndAt    *string                   `form:"pipelineEndAt,omitempty" json:"pipelineEndAt,omitempty" xml:"pipelineEndAt,omitempty"`
	PipelineStartAt  *string                   `form:"pipelineStartAt,omitempty" json:"pipelineStartAt,omitempty" xml:"pipelineStartAt,omitempty"`
	PipelineViewURL  *string                   `form:"pipelineViewURL,omitempty" json:"pipelineViewURL,omitempty" xml:"pipelineViewURL,omitempty"`
	PipelineViewURLs []string                  `form:"pipelineViewURLs,omitempty" json:"pipelineViewURLs,omitempty" xml:"pipelineViewURLs,omitempty"`
	Status           *string                   `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	TektonStatus     *TektonStatusResponseBody `form:"tektonStatus,omitempty" json:"tektonStatus,omitempty" xml:"tektonStatus,omitempty"`
}

// BuildReportResponseBody is used to define fields on response body types.
type BuildReportResponseBody struct {
	Binaries       []*BinArtifactResponseBody   `form:"binaries,omitempty" json:"binaries,omitempty" xml:"binaries,omitempty"`
	GitHash        *string                      `form:"gitHash,omitempty" json:"gitHash,omitempty" xml:"gitHash,omitempty"`
	Images         []*ImageArtifactResponseBody `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	PluginGitHash  *string                      `form:"pluginGitHash,omitempty" json:"pluginGitHash,omitempty" xml:"pluginGitHash,omitempty"`
	PrintedVersion *string                      `form:"printedVersion,omitempty" json:"printedVersion,omitempty" xml:"printedVersion,omitempty"`
}

// BinArtifactResponseBody is used to define fields on response body types.
type BinArtifactResponseBody struct {
	Component     *string              `form:"component,omitempty" json:"component,omitempty" xml:"component,omitempty"`
	OciFile       *OciFileResponseBody `form:"ociFile,omitempty" json:"ociFile,omitempty" xml:"ociFile,omitempty"`
	Platform      *string              `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	Sha256OciFile *OciFileResponseBody `form:"sha256OciFile,omitempty" json:"sha256OciFile,omitempty" xml:"sha256OciFile,omitempty"`
	Sha256URL     *string              `form:"sha256URL,omitempty" json:"sha256URL,omitempty" xml:"sha256URL,omitempty"`
	URL           *string              `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// OciFileResponseBody is used to define fields on response body types.
type OciFileResponseBody struct {
	File *string `form:"file,omitempty" json:"file,omitempty" xml:"file,omitempty"`
	Repo *string `form:"repo,omitempty" json:"repo,omitempty" xml:"repo,omitempty"`
	Tag  *string `form:"tag,omitempty" json:"tag,omitempty" xml:"tag,omitempty"`
}

// ImageArtifactResponseBody is used to define fields on response body types.
type ImageArtifactResponseBody struct {
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	URL      *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// TektonStatusResponseBody is used to define fields on response body types.
type TektonStatusResponseBody struct {
	Pipelines []*TektonPipelineResponseBody `form:"pipelines,omitempty" json:"pipelines,omitempty" xml:"pipelines,omitempty"`
}

// TektonPipelineResponseBody is used to define fields on response body types.
type TektonPipelineResponseBody struct {
	EndAt        *string                      `form:"endAt,omitempty" json:"endAt,omitempty" xml:"endAt,omitempty"`
	GitHash      *string                      `form:"gitHash,omitempty" json:"gitHash,omitempty" xml:"gitHash,omitempty"`
	Images       []*ImageArtifactResponseBody `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	Name         *string                      `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	OciArtifacts []*OciArtifactResponseBody   `form:"ociArtifacts,omitempty" json:"ociArtifacts,omitempty" xml:"ociArtifacts,omitempty"`
	Platform     *string                      `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	StartAt      *string                      `form:"startAt,omitempty" json:"startAt,omitempty" xml:"startAt,omitempty"`
	Status       *string                      `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	URL          *string                      `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// OciArtifactResponseBody is used to define fields on response body types.
type OciArtifactResponseBody struct {
	Files []string `form:"files,omitempty" json:"files,omitempty" xml:"files,omitempty"`
	Repo  *string  `form:"repo,omitempty" json:"repo,omitempty" xml:"repo,omitempty"`
	Tag   *string  `form:"tag,omitempty" json:"tag,omitempty" xml:"tag,omitempty"`
}

// DevBuildRequestBody is used to define fields on request body types.
type DevBuildRequestBody struct {
	ID     int                        `form:"id" json:"id" xml:"id"`
	Meta   *DevBuildMetaRequestBody   `form:"meta" json:"meta" xml:"meta"`
	Spec   *DevBuildSpecRequestBody   `form:"spec" json:"spec" xml:"spec"`
	Status *DevBuildStatusRequestBody `form:"status" json:"status" xml:"status"`
}

// DevBuildMetaRequestBody is used to define fields on request body types.
type DevBuildMetaRequestBody struct {
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	CreatedBy string `form:"createdBy" json:"createdBy" xml:"createdBy"`
	UpdatedAt string `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
}

// DevBuildSpecRequestBody is used to define fields on request body types.
type DevBuildSpecRequestBody struct {
	BuildEnv          string `form:"buildEnv" json:"buildEnv" xml:"buildEnv"`
	BuilderImg        string `form:"builderImg" json:"builderImg" xml:"builderImg"`
	Edition           string `form:"edition" json:"edition" xml:"edition"`
	Features          string `form:"features" json:"features" xml:"features"`
	GitHash           string `form:"gitHash" json:"gitHash" xml:"gitHash"`
	GitRef            string `form:"gitRef" json:"gitRef" xml:"gitRef"`
	GithubRepo        string `form:"githubRepo" json:"githubRepo" xml:"githubRepo"`
	IsHotfix          bool   `form:"isHotfix" json:"isHotfix" xml:"isHotfix"`
	IsPushGCR         bool   `form:"isPushGCR" json:"isPushGCR" xml:"isPushGCR"`
	PipelineEngine    string `form:"pipelineEngine" json:"pipelineEngine" xml:"pipelineEngine"`
	PluginGitRef      string `form:"pluginGitRef" json:"pluginGitRef" xml:"pluginGitRef"`
	Product           string `form:"product" json:"product" xml:"product"`
	ProductBaseImg    string `form:"productBaseImg" json:"productBaseImg" xml:"productBaseImg"`
	ProductDockerfile string `form:"productDockerfile" json:"productDockerfile" xml:"productDockerfile"`
	TargetImg         string `form:"targetImg" json:"targetImg" xml:"targetImg"`
	Version           string `form:"version" json:"version" xml:"version"`
}

// DevBuildStatusRequestBody is used to define fields on request body types.
type DevBuildStatusRequestBody struct {
	BuildReport      *BuildReportRequestBody  `form:"buildReport" json:"buildReport" xml:"buildReport"`
	ErrMsg           string                   `form:"errMsg" json:"errMsg" xml:"errMsg"`
	PipelineBuildID  int                      `form:"pipelineBuildID" json:"pipelineBuildID" xml:"pipelineBuildID"`
	PipelineEndAt    string                   `form:"pipelineEndAt" json:"pipelineEndAt" xml:"pipelineEndAt"`
	PipelineStartAt  string                   `form:"pipelineStartAt" json:"pipelineStartAt" xml:"pipelineStartAt"`
	PipelineViewURL  string                   `form:"pipelineViewURL" json:"pipelineViewURL" xml:"pipelineViewURL"`
	PipelineViewURLs []string                 `form:"pipelineViewURLs" json:"pipelineViewURLs" xml:"pipelineViewURLs"`
	Status           string                   `form:"status" json:"status" xml:"status"`
	TektonStatus     *TektonStatusRequestBody `form:"tektonStatus" json:"tektonStatus" xml:"tektonStatus"`
}

// BuildReportRequestBody is used to define fields on request body types.
type BuildReportRequestBody struct {
	Binaries       []*BinArtifactRequestBody   `form:"binaries" json:"binaries" xml:"binaries"`
	GitHash        string                      `form:"gitHash" json:"gitHash" xml:"gitHash"`
	Images         []*ImageArtifactRequestBody `form:"images" json:"images" xml:"images"`
	PluginGitHash  string                      `form:"pluginGitHash" json:"pluginGitHash" xml:"pluginGitHash"`
	PrintedVersion string                      `form:"printedVersion" json:"printedVersion" xml:"printedVersion"`
}

// BinArtifactRequestBody is used to define fields on request body types.
type BinArtifactRequestBody struct {
	Component     string              `form:"component" json:"component" xml:"component"`
	OciFile       *OciFileRequestBody `form:"ociFile" json:"ociFile" xml:"ociFile"`
	Platform      string              `form:"platform" json:"platform" xml:"platform"`
	Sha256OciFile *OciFileRequestBody `form:"sha256OciFile" json:"sha256OciFile" xml:"sha256OciFile"`
	Sha256URL     string              `form:"sha256URL" json:"sha256URL" xml:"sha256URL"`
	URL           string              `form:"url" json:"url" xml:"url"`
}

// OciFileRequestBody is used to define fields on request body types.
type OciFileRequestBody struct {
	File string `form:"file" json:"file" xml:"file"`
	Repo string `form:"repo" json:"repo" xml:"repo"`
	Tag  string `form:"tag" json:"tag" xml:"tag"`
}

// ImageArtifactRequestBody is used to define fields on request body types.
type ImageArtifactRequestBody struct {
	Platform string `form:"platform" json:"platform" xml:"platform"`
	URL      string `form:"url" json:"url" xml:"url"`
}

// TektonStatusRequestBody is used to define fields on request body types.
type TektonStatusRequestBody struct {
	Pipelines []*TektonPipelineRequestBody `form:"pipelines" json:"pipelines" xml:"pipelines"`
}

// TektonPipelineRequestBody is used to define fields on request body types.
type TektonPipelineRequestBody struct {
	EndAt        string                      `form:"endAt" json:"endAt" xml:"endAt"`
	GitHash      string                      `form:"gitHash" json:"gitHash" xml:"gitHash"`
	Images       []*ImageArtifactRequestBody `form:"images" json:"images" xml:"images"`
	Name         string                      `form:"name" json:"name" xml:"name"`
	OciArtifacts []*OciArtifactRequestBody   `form:"ociArtifacts" json:"ociArtifacts" xml:"ociArtifacts"`
	Platform     string                      `form:"platform" json:"platform" xml:"platform"`
	StartAt      string                      `form:"startAt" json:"startAt" xml:"startAt"`
	Status       string                      `form:"status" json:"status" xml:"status"`
	URL          string                      `form:"url" json:"url" xml:"url"`
}

// OciArtifactRequestBody is used to define fields on request body types.
type OciArtifactRequestBody struct {
	Files []string `form:"files" json:"files" xml:"files"`
	Repo  string   `form:"repo" json:"repo" xml:"repo"`
	Tag   string   `form:"tag" json:"tag" xml:"tag"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "devbuild" service.
func NewCreateRequestBody(p *devbuild.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		CreatedBy: p.CreatedBy,
	}
	if p.Request != nil {
		body.Request = marshalDevbuildDevBuildRequestToDevBuildRequestRequestBody(p.Request)
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "devbuild" service.
func NewUpdateRequestBody(p *devbuild.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.DevBuild != nil {
		body.DevBuild = marshalDevbuildDevBuildToDevBuildRequestBody(p.DevBuild)
	}
	return body
}

// NewListDevBuildOK builds a "devbuild" service "list" endpoint result from a
// HTTP "OK" response.
func NewListDevBuildOK(body []*DevBuildResponse) []*devbuild.DevBuild {
	v := make([]*devbuild.DevBuild, len(body))
	for i, val := range body {
		v[i] = unmarshalDevBuildResponseToDevbuildDevBuild(val)
	}

	return v
}

// NewListBadRequest builds a devbuild service list endpoint BadRequest error.
func NewListBadRequest(body *ListBadRequestResponseBody) *devbuild.HTTPError {
	v := &devbuild.HTTPError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateDevBuildOK builds a "devbuild" service "create" endpoint result
// from a HTTP "OK" response.
func NewCreateDevBuildOK(body *CreateResponseBody) *devbuild.DevBuild {
	v := &devbuild.DevBuild{
		ID: *body.ID,
	}
	v.Meta = unmarshalDevBuildMetaResponseBodyToDevbuildDevBuildMeta(body.Meta)
	v.Spec = unmarshalDevBuildSpecResponseBodyToDevbuildDevBuildSpec(body.Spec)
	v.Status = unmarshalDevBuildStatusResponseBodyToDevbuildDevBuildStatus(body.Status)

	return v
}

// NewCreateBadRequest builds a devbuild service create endpoint BadRequest
// error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *devbuild.HTTPError {
	v := &devbuild.HTTPError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateInternalServerError builds a devbuild service create endpoint
// InternalServerError error.
func NewCreateInternalServerError(body *CreateInternalServerErrorResponseBody) *devbuild.HTTPError {
	v := &devbuild.HTTPError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetDevBuildOK builds a "devbuild" service "get" endpoint result from a
// HTTP "OK" response.
func NewGetDevBuildOK(body *GetResponseBody) *devbuild.DevBuild {
	v := &devbuild.DevBuild{
		ID: *body.ID,
	}
	v.Meta = unmarshalDevBuildMetaResponseBodyToDevbuildDevBuildMeta(body.Meta)
	v.Spec = unmarshalDevBuildSpecResponseBodyToDevbuildDevBuildSpec(body.Spec)
	v.Status = unmarshalDevBuildStatusResponseBodyToDevbuildDevBuildStatus(body.Status)

	return v
}

// NewGetBadRequest builds a devbuild service get endpoint BadRequest error.
func NewGetBadRequest(body *GetBadRequestResponseBody) *devbuild.HTTPError {
	v := &devbuild.HTTPError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetInternalServerError builds a devbuild service get endpoint
// InternalServerError error.
func NewGetInternalServerError(body *GetInternalServerErrorResponseBody) *devbuild.HTTPError {
	v := &devbuild.HTTPError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateDevBuildOK builds a "devbuild" service "update" endpoint result
// from a HTTP "OK" response.
func NewUpdateDevBuildOK(body *UpdateResponseBody) *devbuild.DevBuild {
	v := &devbuild.DevBuild{
		ID: *body.ID,
	}
	v.Meta = unmarshalDevBuildMetaResponseBodyToDevbuildDevBuildMeta(body.Meta)
	v.Spec = unmarshalDevBuildSpecResponseBodyToDevbuildDevBuildSpec(body.Spec)
	v.Status = unmarshalDevBuildStatusResponseBodyToDevbuildDevBuildStatus(body.Status)

	return v
}

// NewUpdateBadRequest builds a devbuild service update endpoint BadRequest
// error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *devbuild.HTTPError {
	v := &devbuild.HTTPError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateInternalServerError builds a devbuild service update endpoint
// InternalServerError error.
func NewUpdateInternalServerError(body *UpdateInternalServerErrorResponseBody) *devbuild.HTTPError {
	v := &devbuild.HTTPError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewRerunDevBuildOK builds a "devbuild" service "rerun" endpoint result from
// a HTTP "OK" response.
func NewRerunDevBuildOK(body *RerunResponseBody) *devbuild.DevBuild {
	v := &devbuild.DevBuild{
		ID: *body.ID,
	}
	v.Meta = unmarshalDevBuildMetaResponseBodyToDevbuildDevBuildMeta(body.Meta)
	v.Spec = unmarshalDevBuildSpecResponseBodyToDevbuildDevBuildSpec(body.Spec)
	v.Status = unmarshalDevBuildStatusResponseBodyToDevbuildDevBuildStatus(body.Status)

	return v
}

// NewRerunBadRequest builds a devbuild service rerun endpoint BadRequest error.
func NewRerunBadRequest(body *RerunBadRequestResponseBody) *devbuild.HTTPError {
	v := &devbuild.HTTPError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewRerunInternalServerError builds a devbuild service rerun endpoint
// InternalServerError error.
func NewRerunInternalServerError(body *RerunInternalServerErrorResponseBody) *devbuild.HTTPError {
	v := &devbuild.HTTPError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	if body.Spec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("spec", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Meta != nil {
		if err2 := ValidateDevBuildMetaResponseBody(body.Meta); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Spec != nil {
		if err2 := ValidateDevBuildSpecResponseBody(body.Spec); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if err2 := ValidateDevBuildStatusResponseBody(body.Status); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	if body.Spec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("spec", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Meta != nil {
		if err2 := ValidateDevBuildMetaResponseBody(body.Meta); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Spec != nil {
		if err2 := ValidateDevBuildSpecResponseBody(body.Spec); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if err2 := ValidateDevBuildStatusResponseBody(body.Status); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	if body.Spec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("spec", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Meta != nil {
		if err2 := ValidateDevBuildMetaResponseBody(body.Meta); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Spec != nil {
		if err2 := ValidateDevBuildSpecResponseBody(body.Spec); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if err2 := ValidateDevBuildStatusResponseBody(body.Status); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRerunResponseBody runs the validations defined on RerunResponseBody
func ValidateRerunResponseBody(body *RerunResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	if body.Spec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("spec", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Meta != nil {
		if err2 := ValidateDevBuildMetaResponseBody(body.Meta); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Spec != nil {
		if err2 := ValidateDevBuildSpecResponseBody(body.Spec); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if err2 := ValidateDevBuildStatusResponseBody(body.Status); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListBadRequestResponseBody runs the validations defined on
// list_BadRequest_response_body
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_BadRequest_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateInternalServerErrorResponseBody runs the validations defined
// on create_InternalServerError_response_body
func ValidateCreateInternalServerErrorResponseBody(body *CreateInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on
// get_BadRequest_response_body
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetInternalServerErrorResponseBody runs the validations defined on
// get_InternalServerError_response_body
func ValidateGetInternalServerErrorResponseBody(body *GetInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_BadRequest_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateInternalServerErrorResponseBody runs the validations defined
// on update_InternalServerError_response_body
func ValidateUpdateInternalServerErrorResponseBody(body *UpdateInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRerunBadRequestResponseBody runs the validations defined on
// rerun_BadRequest_response_body
func ValidateRerunBadRequestResponseBody(body *RerunBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRerunInternalServerErrorResponseBody runs the validations defined on
// rerun_InternalServerError_response_body
func ValidateRerunInternalServerErrorResponseBody(body *RerunInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDevBuildResponse runs the validations defined on DevBuildResponse
func ValidateDevBuildResponse(body *DevBuildResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	if body.Spec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("spec", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Meta != nil {
		if err2 := ValidateDevBuildMetaResponse(body.Meta); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Spec != nil {
		if err2 := ValidateDevBuildSpecResponse(body.Spec); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if err2 := ValidateDevBuildStatusResponse(body.Status); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDevBuildMetaResponse runs the validations defined on
// DevBuildMetaResponse
func ValidateDevBuildMetaResponse(body *DevBuildMetaResponse) (err error) {
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.CreatedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdBy", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updatedAt", "body"))
	}
	return
}

// ValidateDevBuildSpecResponse runs the validations defined on
// DevBuildSpecResponse
func ValidateDevBuildSpecResponse(body *DevBuildSpecResponse) (err error) {
	if body.BuildEnv == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("buildEnv", "body"))
	}
	if body.BuilderImg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("builderImg", "body"))
	}
	if body.Edition == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("edition", "body"))
	}
	if body.Features == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("features", "body"))
	}
	if body.GitHash == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("gitHash", "body"))
	}
	if body.GitRef == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("gitRef", "body"))
	}
	if body.GithubRepo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("githubRepo", "body"))
	}
	if body.IsHotfix == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isHotfix", "body"))
	}
	if body.IsPushGCR == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isPushGCR", "body"))
	}
	if body.PipelineEngine == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineEngine", "body"))
	}
	if body.PluginGitRef == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pluginGitRef", "body"))
	}
	if body.Product == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product", "body"))
	}
	if body.ProductBaseImg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productBaseImg", "body"))
	}
	if body.ProductDockerfile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productDockerfile", "body"))
	}
	if body.TargetImg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("targetImg", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.Edition != nil {
		if !(*body.Edition == "enterprise" || *body.Edition == "community") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.edition", *body.Edition, []any{"enterprise", "community"}))
		}
	}
	if body.PipelineEngine != nil {
		if !(*body.PipelineEngine == "jenkins" || *body.PipelineEngine == "tekton") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.pipelineEngine", *body.PipelineEngine, []any{"jenkins", "tekton"}))
		}
	}
	if body.Product != nil {
		if !(*body.Product == "tidb" || *body.Product == "enterprise-plugin" || *body.Product == "tikv" || *body.Product == "pd" || *body.Product == "tiflash" || *body.Product == "br" || *body.Product == "dumpling" || *body.Product == "tidb-lightning" || *body.Product == "ticdc" || *body.Product == "ticdc-newarch" || *body.Product == "dm" || *body.Product == "tidb-binlog" || *body.Product == "tidb-tools" || *body.Product == "ng-monitoring" || *body.Product == "tidb-dashboard" || *body.Product == "drainer" || *body.Product == "pump" || *body.Product == "") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.product", *body.Product, []any{"tidb", "enterprise-plugin", "tikv", "pd", "tiflash", "br", "dumpling", "tidb-lightning", "ticdc", "ticdc-newarch", "dm", "tidb-binlog", "tidb-tools", "ng-monitoring", "tidb-dashboard", "drainer", "pump", ""}))
		}
	}
	return
}

// ValidateDevBuildStatusResponse runs the validations defined on
// DevBuildStatusResponse
func ValidateDevBuildStatusResponse(body *DevBuildStatusResponse) (err error) {
	if body.BuildReport == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("buildReport", "body"))
	}
	if body.ErrMsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errMsg", "body"))
	}
	if body.PipelineBuildID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineBuildID", "body"))
	}
	if body.PipelineEndAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineEndAt", "body"))
	}
	if body.PipelineStartAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineStartAt", "body"))
	}
	if body.PipelineViewURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineViewURL", "body"))
	}
	if body.PipelineViewURLs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineViewURLs", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.TektonStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tektonStatus", "body"))
	}
	if body.BuildReport != nil {
		if err2 := ValidateBuildReportResponse(body.BuildReport); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if !(*body.Status == "PENDING" || *body.Status == "PROCESSING" || *body.Status == "ABORTED" || *body.Status == "SUCCESS" || *body.Status == "FAILURE" || *body.Status == "ERROR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"PENDING", "PROCESSING", "ABORTED", "SUCCESS", "FAILURE", "ERROR"}))
		}
	}
	if body.TektonStatus != nil {
		if err2 := ValidateTektonStatusResponse(body.TektonStatus); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBuildReportResponse runs the validations defined on
// BuildReportResponse
func ValidateBuildReportResponse(body *BuildReportResponse) (err error) {
	if body.Binaries == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("binaries", "body"))
	}
	if body.GitHash == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("gitHash", "body"))
	}
	if body.Images == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("images", "body"))
	}
	if body.PluginGitHash == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pluginGitHash", "body"))
	}
	if body.PrintedVersion == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("printedVersion", "body"))
	}
	for _, e := range body.Binaries {
		if e != nil {
			if err2 := ValidateBinArtifactResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Images {
		if e != nil {
			if err2 := ValidateImageArtifactResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateBinArtifactResponse runs the validations defined on
// BinArtifactResponse
func ValidateBinArtifactResponse(body *BinArtifactResponse) (err error) {
	if body.Component == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("component", "body"))
	}
	if body.OciFile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ociFile", "body"))
	}
	if body.Platform == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform", "body"))
	}
	if body.Sha256OciFile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sha256OciFile", "body"))
	}
	if body.Sha256URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sha256URL", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.OciFile != nil {
		if err2 := ValidateOciFileResponse(body.OciFile); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Sha256OciFile != nil {
		if err2 := ValidateOciFileResponse(body.Sha256OciFile); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOciFileResponse runs the validations defined on OciFileResponse
func ValidateOciFileResponse(body *OciFileResponse) (err error) {
	if body.File == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	if body.Repo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repo", "body"))
	}
	if body.Tag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tag", "body"))
	}
	return
}

// ValidateImageArtifactResponse runs the validations defined on
// ImageArtifactResponse
func ValidateImageArtifactResponse(body *ImageArtifactResponse) (err error) {
	if body.Platform == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateTektonStatusResponse runs the validations defined on
// TektonStatusResponse
func ValidateTektonStatusResponse(body *TektonStatusResponse) (err error) {
	if body.Pipelines == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelines", "body"))
	}
	for _, e := range body.Pipelines {
		if e != nil {
			if err2 := ValidateTektonPipelineResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTektonPipelineResponse runs the validations defined on
// TektonPipelineResponse
func ValidateTektonPipelineResponse(body *TektonPipelineResponse) (err error) {
	if body.EndAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endAt", "body"))
	}
	if body.GitHash == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("gitHash", "body"))
	}
	if body.Images == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("images", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.OciArtifacts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ociArtifacts", "body"))
	}
	if body.Platform == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform", "body"))
	}
	if body.StartAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startAt", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	for _, e := range body.Images {
		if e != nil {
			if err2 := ValidateImageArtifactResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.OciArtifacts {
		if e != nil {
			if err2 := ValidateOciArtifactResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Status != nil {
		if !(*body.Status == "PENDING" || *body.Status == "PROCESSING" || *body.Status == "ABORTED" || *body.Status == "SUCCESS" || *body.Status == "FAILURE" || *body.Status == "ERROR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"PENDING", "PROCESSING", "ABORTED", "SUCCESS", "FAILURE", "ERROR"}))
		}
	}
	return
}

// ValidateOciArtifactResponse runs the validations defined on
// OciArtifactResponse
func ValidateOciArtifactResponse(body *OciArtifactResponse) (err error) {
	if body.Files == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("files", "body"))
	}
	if body.Repo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repo", "body"))
	}
	if body.Tag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tag", "body"))
	}
	return
}

// ValidateDevBuildRequestRequestBody runs the validations defined on
// DevBuildRequestRequestBody
func ValidateDevBuildRequestRequestBody(body *DevBuildRequestRequestBody) (err error) {
	if !(body.Edition == "enterprise" || body.Edition == "community") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.edition", body.Edition, []any{"enterprise", "community"}))
	}
	if body.PipelineEngine != nil {
		if !(*body.PipelineEngine == "jenkins" || *body.PipelineEngine == "tekton") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.pipelineEngine", *body.PipelineEngine, []any{"jenkins", "tekton"}))
		}
	}
	if !(body.Product == "tidb" || body.Product == "enterprise-plugin" || body.Product == "tikv" || body.Product == "pd" || body.Product == "tiflash" || body.Product == "br" || body.Product == "dumpling" || body.Product == "tidb-lightning" || body.Product == "ticdc" || body.Product == "ticdc-newarch" || body.Product == "dm" || body.Product == "tidb-binlog" || body.Product == "tidb-tools" || body.Product == "ng-monitoring" || body.Product == "tidb-dashboard" || body.Product == "drainer" || body.Product == "pump" || body.Product == "") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.product", body.Product, []any{"tidb", "enterprise-plugin", "tikv", "pd", "tiflash", "br", "dumpling", "tidb-lightning", "ticdc", "ticdc-newarch", "dm", "tidb-binlog", "tidb-tools", "ng-monitoring", "tidb-dashboard", "drainer", "pump", ""}))
	}
	return
}

// ValidateDevBuildMetaResponseBody runs the validations defined on
// DevBuildMetaResponseBody
func ValidateDevBuildMetaResponseBody(body *DevBuildMetaResponseBody) (err error) {
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.CreatedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdBy", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updatedAt", "body"))
	}
	return
}

// ValidateDevBuildSpecResponseBody runs the validations defined on
// DevBuildSpecResponseBody
func ValidateDevBuildSpecResponseBody(body *DevBuildSpecResponseBody) (err error) {
	if body.BuildEnv == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("buildEnv", "body"))
	}
	if body.BuilderImg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("builderImg", "body"))
	}
	if body.Edition == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("edition", "body"))
	}
	if body.Features == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("features", "body"))
	}
	if body.GitHash == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("gitHash", "body"))
	}
	if body.GitRef == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("gitRef", "body"))
	}
	if body.GithubRepo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("githubRepo", "body"))
	}
	if body.IsHotfix == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isHotfix", "body"))
	}
	if body.IsPushGCR == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isPushGCR", "body"))
	}
	if body.PipelineEngine == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineEngine", "body"))
	}
	if body.PluginGitRef == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pluginGitRef", "body"))
	}
	if body.Product == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product", "body"))
	}
	if body.ProductBaseImg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productBaseImg", "body"))
	}
	if body.ProductDockerfile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productDockerfile", "body"))
	}
	if body.TargetImg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("targetImg", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	if body.Edition != nil {
		if !(*body.Edition == "enterprise" || *body.Edition == "community") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.edition", *body.Edition, []any{"enterprise", "community"}))
		}
	}
	if body.PipelineEngine != nil {
		if !(*body.PipelineEngine == "jenkins" || *body.PipelineEngine == "tekton") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.pipelineEngine", *body.PipelineEngine, []any{"jenkins", "tekton"}))
		}
	}
	if body.Product != nil {
		if !(*body.Product == "tidb" || *body.Product == "enterprise-plugin" || *body.Product == "tikv" || *body.Product == "pd" || *body.Product == "tiflash" || *body.Product == "br" || *body.Product == "dumpling" || *body.Product == "tidb-lightning" || *body.Product == "ticdc" || *body.Product == "ticdc-newarch" || *body.Product == "dm" || *body.Product == "tidb-binlog" || *body.Product == "tidb-tools" || *body.Product == "ng-monitoring" || *body.Product == "tidb-dashboard" || *body.Product == "drainer" || *body.Product == "pump" || *body.Product == "") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.product", *body.Product, []any{"tidb", "enterprise-plugin", "tikv", "pd", "tiflash", "br", "dumpling", "tidb-lightning", "ticdc", "ticdc-newarch", "dm", "tidb-binlog", "tidb-tools", "ng-monitoring", "tidb-dashboard", "drainer", "pump", ""}))
		}
	}
	return
}

// ValidateDevBuildStatusResponseBody runs the validations defined on
// DevBuildStatusResponseBody
func ValidateDevBuildStatusResponseBody(body *DevBuildStatusResponseBody) (err error) {
	if body.BuildReport == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("buildReport", "body"))
	}
	if body.ErrMsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errMsg", "body"))
	}
	if body.PipelineBuildID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineBuildID", "body"))
	}
	if body.PipelineEndAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineEndAt", "body"))
	}
	if body.PipelineStartAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineStartAt", "body"))
	}
	if body.PipelineViewURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineViewURL", "body"))
	}
	if body.PipelineViewURLs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineViewURLs", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.TektonStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tektonStatus", "body"))
	}
	if body.BuildReport != nil {
		if err2 := ValidateBuildReportResponseBody(body.BuildReport); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if !(*body.Status == "PENDING" || *body.Status == "PROCESSING" || *body.Status == "ABORTED" || *body.Status == "SUCCESS" || *body.Status == "FAILURE" || *body.Status == "ERROR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"PENDING", "PROCESSING", "ABORTED", "SUCCESS", "FAILURE", "ERROR"}))
		}
	}
	if body.TektonStatus != nil {
		if err2 := ValidateTektonStatusResponseBody(body.TektonStatus); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBuildReportResponseBody runs the validations defined on
// BuildReportResponseBody
func ValidateBuildReportResponseBody(body *BuildReportResponseBody) (err error) {
	if body.Binaries == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("binaries", "body"))
	}
	if body.GitHash == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("gitHash", "body"))
	}
	if body.Images == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("images", "body"))
	}
	if body.PluginGitHash == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pluginGitHash", "body"))
	}
	if body.PrintedVersion == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("printedVersion", "body"))
	}
	for _, e := range body.Binaries {
		if e != nil {
			if err2 := ValidateBinArtifactResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Images {
		if e != nil {
			if err2 := ValidateImageArtifactResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateBinArtifactResponseBody runs the validations defined on
// BinArtifactResponseBody
func ValidateBinArtifactResponseBody(body *BinArtifactResponseBody) (err error) {
	if body.Component == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("component", "body"))
	}
	if body.OciFile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ociFile", "body"))
	}
	if body.Platform == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform", "body"))
	}
	if body.Sha256OciFile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sha256OciFile", "body"))
	}
	if body.Sha256URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sha256URL", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.OciFile != nil {
		if err2 := ValidateOciFileResponseBody(body.OciFile); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Sha256OciFile != nil {
		if err2 := ValidateOciFileResponseBody(body.Sha256OciFile); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOciFileResponseBody runs the validations defined on
// OciFileResponseBody
func ValidateOciFileResponseBody(body *OciFileResponseBody) (err error) {
	if body.File == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	if body.Repo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repo", "body"))
	}
	if body.Tag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tag", "body"))
	}
	return
}

// ValidateImageArtifactResponseBody runs the validations defined on
// ImageArtifactResponseBody
func ValidateImageArtifactResponseBody(body *ImageArtifactResponseBody) (err error) {
	if body.Platform == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateTektonStatusResponseBody runs the validations defined on
// TektonStatusResponseBody
func ValidateTektonStatusResponseBody(body *TektonStatusResponseBody) (err error) {
	if body.Pipelines == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelines", "body"))
	}
	for _, e := range body.Pipelines {
		if e != nil {
			if err2 := ValidateTektonPipelineResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTektonPipelineResponseBody runs the validations defined on
// TektonPipelineResponseBody
func ValidateTektonPipelineResponseBody(body *TektonPipelineResponseBody) (err error) {
	if body.EndAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endAt", "body"))
	}
	if body.GitHash == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("gitHash", "body"))
	}
	if body.Images == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("images", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.OciArtifacts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ociArtifacts", "body"))
	}
	if body.Platform == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform", "body"))
	}
	if body.StartAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startAt", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	for _, e := range body.Images {
		if e != nil {
			if err2 := ValidateImageArtifactResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.OciArtifacts {
		if e != nil {
			if err2 := ValidateOciArtifactResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Status != nil {
		if !(*body.Status == "PENDING" || *body.Status == "PROCESSING" || *body.Status == "ABORTED" || *body.Status == "SUCCESS" || *body.Status == "FAILURE" || *body.Status == "ERROR") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"PENDING", "PROCESSING", "ABORTED", "SUCCESS", "FAILURE", "ERROR"}))
		}
	}
	return
}

// ValidateOciArtifactResponseBody runs the validations defined on
// OciArtifactResponseBody
func ValidateOciArtifactResponseBody(body *OciArtifactResponseBody) (err error) {
	if body.Files == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("files", "body"))
	}
	if body.Repo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repo", "body"))
	}
	if body.Tag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tag", "body"))
	}
	return
}

// ValidateDevBuildRequestBody runs the validations defined on
// DevBuildRequestBody
func ValidateDevBuildRequestBody(body *DevBuildRequestBody) (err error) {
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	if body.Spec == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("spec", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Spec != nil {
		if err2 := ValidateDevBuildSpecRequestBody(body.Spec); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if err2 := ValidateDevBuildStatusRequestBody(body.Status); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDevBuildSpecRequestBody runs the validations defined on
// DevBuildSpecRequestBody
func ValidateDevBuildSpecRequestBody(body *DevBuildSpecRequestBody) (err error) {
	if !(body.Edition == "enterprise" || body.Edition == "community") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.edition", body.Edition, []any{"enterprise", "community"}))
	}
	if !(body.PipelineEngine == "jenkins" || body.PipelineEngine == "tekton") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.pipelineEngine", body.PipelineEngine, []any{"jenkins", "tekton"}))
	}
	if !(body.Product == "tidb" || body.Product == "enterprise-plugin" || body.Product == "tikv" || body.Product == "pd" || body.Product == "tiflash" || body.Product == "br" || body.Product == "dumpling" || body.Product == "tidb-lightning" || body.Product == "ticdc" || body.Product == "ticdc-newarch" || body.Product == "dm" || body.Product == "tidb-binlog" || body.Product == "tidb-tools" || body.Product == "ng-monitoring" || body.Product == "tidb-dashboard" || body.Product == "drainer" || body.Product == "pump" || body.Product == "") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.product", body.Product, []any{"tidb", "enterprise-plugin", "tikv", "pd", "tiflash", "br", "dumpling", "tidb-lightning", "ticdc", "ticdc-newarch", "dm", "tidb-binlog", "tidb-tools", "ng-monitoring", "tidb-dashboard", "drainer", "pump", ""}))
	}
	return
}

// ValidateDevBuildStatusRequestBody runs the validations defined on
// DevBuildStatusRequestBody
func ValidateDevBuildStatusRequestBody(body *DevBuildStatusRequestBody) (err error) {
	if body.BuildReport == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("buildReport", "body"))
	}
	if body.PipelineViewURLs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelineViewURLs", "body"))
	}
	if body.TektonStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tektonStatus", "body"))
	}
	if body.BuildReport != nil {
		if err2 := ValidateBuildReportRequestBody(body.BuildReport); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if !(body.Status == "PENDING" || body.Status == "PROCESSING" || body.Status == "ABORTED" || body.Status == "SUCCESS" || body.Status == "FAILURE" || body.Status == "ERROR") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", body.Status, []any{"PENDING", "PROCESSING", "ABORTED", "SUCCESS", "FAILURE", "ERROR"}))
	}
	if body.TektonStatus != nil {
		if err2 := ValidateTektonStatusRequestBody(body.TektonStatus); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBuildReportRequestBody runs the validations defined on
// BuildReportRequestBody
func ValidateBuildReportRequestBody(body *BuildReportRequestBody) (err error) {
	if body.Binaries == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("binaries", "body"))
	}
	if body.Images == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("images", "body"))
	}
	for _, e := range body.Binaries {
		if e != nil {
			if err2 := ValidateBinArtifactRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateBinArtifactRequestBody runs the validations defined on
// BinArtifactRequestBody
func ValidateBinArtifactRequestBody(body *BinArtifactRequestBody) (err error) {
	if body.OciFile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ociFile", "body"))
	}
	if body.Sha256OciFile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sha256OciFile", "body"))
	}
	return
}

// ValidateTektonStatusRequestBody runs the validations defined on
// TektonStatusRequestBody
func ValidateTektonStatusRequestBody(body *TektonStatusRequestBody) (err error) {
	if body.Pipelines == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pipelines", "body"))
	}
	for _, e := range body.Pipelines {
		if e != nil {
			if err2 := ValidateTektonPipelineRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTektonPipelineRequestBody runs the validations defined on
// TektonPipelineRequestBody
func ValidateTektonPipelineRequestBody(body *TektonPipelineRequestBody) (err error) {
	if body.Images == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("images", "body"))
	}
	if body.OciArtifacts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ociArtifacts", "body"))
	}
	for _, e := range body.OciArtifacts {
		if e != nil {
			if err2 := ValidateOciArtifactRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if !(body.Status == "PENDING" || body.Status == "PROCESSING" || body.Status == "ABORTED" || body.Status == "SUCCESS" || body.Status == "FAILURE" || body.Status == "ERROR") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", body.Status, []any{"PENDING", "PROCESSING", "ABORTED", "SUCCESS", "FAILURE", "ERROR"}))
	}
	return
}

// ValidateOciArtifactRequestBody runs the validations defined on
// OciArtifactRequestBody
func ValidateOciArtifactRequestBody(body *OciArtifactRequestBody) (err error) {
	if body.Files == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("files", "body"))
	}
	return
}
