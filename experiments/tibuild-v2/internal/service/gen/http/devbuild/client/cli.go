// Code generated by goa v3.20.0, DO NOT EDIT.
//
// devbuild HTTP client CLI support package
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/tibuild/internal/service/design -o
// ./service

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	devbuild "github.com/PingCAP-QE/ee-apps/tibuild/internal/service/gen/devbuild"
	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the devbuild list endpoint from CLI
// flags.
func BuildListPayload(devbuildListPage string, devbuildListPageSize string, devbuildListHotfix string, devbuildListSort string, devbuildListDirection string, devbuildListCreatedBy string) (*devbuild.ListPayload, error) {
	var err error
	var page int
	{
		if devbuildListPage != "" {
			var v int64
			v, err = strconv.ParseInt(devbuildListPage, 10, strconv.IntSize)
			page = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
		}
	}
	var pageSize int
	{
		if devbuildListPageSize != "" {
			var v int64
			v, err = strconv.ParseInt(devbuildListPageSize, 10, strconv.IntSize)
			pageSize = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for pageSize, must be INT")
			}
		}
	}
	var hotfix bool
	{
		if devbuildListHotfix != "" {
			hotfix, err = strconv.ParseBool(devbuildListHotfix)
			if err != nil {
				return nil, fmt.Errorf("invalid value for hotfix, must be BOOL")
			}
		}
	}
	var sort string
	{
		if devbuildListSort != "" {
			sort = devbuildListSort
			if !(sort == "created_at" || sort == "updated_at") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("sort", sort, []any{"created_at", "updated_at"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var direction string
	{
		if devbuildListDirection != "" {
			direction = devbuildListDirection
			if !(direction == "asc" || direction == "desc") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("direction", direction, []any{"asc", "desc"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var createdBy *string
	{
		if devbuildListCreatedBy != "" {
			createdBy = &devbuildListCreatedBy
		}
	}
	v := &devbuild.ListPayload{}
	v.Page = page
	v.PageSize = pageSize
	v.Hotfix = hotfix
	v.Sort = sort
	v.Direction = direction
	v.CreatedBy = createdBy

	return v, nil
}

// BuildCreatePayload builds the payload for the devbuild create endpoint from
// CLI flags.
func BuildCreatePayload(devbuildCreateBody string, devbuildCreateDryrun string) (*devbuild.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(devbuildCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"created_by\": \"nyah@ondricka.org\",\n      \"request\": {\n         \"build_env\": \"Quaerat necessitatibus distinctio nobis sit.\",\n         \"builder_img\": \"Vero sunt culpa molestiae sint ut.\",\n         \"edition\": \"community\",\n         \"features\": \"Molestias facilis voluptatem voluptate dignissimos ducimus.\",\n         \"git_ref\": \"Delectus accusantium.\",\n         \"git_sha\": \"Expedita non facilis a iste qui.\",\n         \"github_repo\": \"Provident voluptatem eum.\",\n         \"is_hotfix\": false,\n         \"is_push_gcr\": true,\n         \"pipeline_engine\": \"jenkins\",\n         \"platform\": \"linux/amd64\",\n         \"plugin_git_ref\": \"Autem distinctio.\",\n         \"product\": \"tikv\",\n         \"product_base_img\": \"Itaque dolor recusandae.\",\n         \"product_dockerfile\": \"Deleniti eum.\",\n         \"target_img\": \"Eligendi dolorem autem ullam.\",\n         \"version\": \"Quaerat repellendus similique expedita quia.\"\n      }\n   }'")
		}
		if body.Request == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("request", "body"))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_by", body.CreatedBy, goa.FormatEmail))
		if body.Request != nil {
			if err2 := ValidateDevBuildSpecRequestBody(body.Request); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var dryrun bool
	{
		if devbuildCreateDryrun != "" {
			dryrun, err = strconv.ParseBool(devbuildCreateDryrun)
			if err != nil {
				return nil, fmt.Errorf("invalid value for dryrun, must be BOOL")
			}
		}
	}
	v := &devbuild.CreatePayload{
		CreatedBy: body.CreatedBy,
	}
	if body.Request != nil {
		v.Request = marshalDevBuildSpecRequestBodyToDevbuildDevBuildSpec(body.Request)
	}
	v.Dryrun = dryrun

	return v, nil
}

// BuildGetPayload builds the payload for the devbuild get endpoint from CLI
// flags.
func BuildGetPayload(devbuildGetID string, devbuildGetSync string) (*devbuild.GetPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(devbuildGetID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	var sync bool
	{
		if devbuildGetSync != "" {
			sync, err = strconv.ParseBool(devbuildGetSync)
			if err != nil {
				return nil, fmt.Errorf("invalid value for sync, must be BOOL")
			}
		}
	}
	v := &devbuild.GetPayload{}
	v.ID = id
	v.Sync = sync

	return v, nil
}

// BuildUpdatePayload builds the payload for the devbuild update endpoint from
// CLI flags.
func BuildUpdatePayload(devbuildUpdateBody string, devbuildUpdateID string, devbuildUpdateDryrun string) (*devbuild.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(devbuildUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"status\": {\n         \"build_report\": {\n            \"binaries\": [\n               {\n                  \"component\": \"Impedit rerum sunt sunt.\",\n                  \"oci_file\": {\n                     \"file\": \"Voluptates eos eveniet ratione quia delectus voluptas.\",\n                     \"repo\": \"Molestiae consequatur atque ut fugit.\",\n                     \"tag\": \"Explicabo reprehenderit cumque fugiat.\"\n                  },\n                  \"platform\": \"Quas ut voluptatibus nobis.\",\n                  \"sha256_oci_file\": {\n                     \"file\": \"Voluptates eos eveniet ratione quia delectus voluptas.\",\n                     \"repo\": \"Molestiae consequatur atque ut fugit.\",\n                     \"tag\": \"Explicabo reprehenderit cumque fugiat.\"\n                  },\n                  \"sha256_url\": \"http://mayertowne.info/nina\",\n                  \"url\": \"http://ortizvandervort.name/alysa.rippin\"\n               },\n               {\n                  \"component\": \"Impedit rerum sunt sunt.\",\n                  \"oci_file\": {\n                     \"file\": \"Voluptates eos eveniet ratione quia delectus voluptas.\",\n                     \"repo\": \"Molestiae consequatur atque ut fugit.\",\n                     \"tag\": \"Explicabo reprehenderit cumque fugiat.\"\n                  },\n                  \"platform\": \"Quas ut voluptatibus nobis.\",\n                  \"sha256_oci_file\": {\n                     \"file\": \"Voluptates eos eveniet ratione quia delectus voluptas.\",\n                     \"repo\": \"Molestiae consequatur atque ut fugit.\",\n                     \"tag\": \"Explicabo reprehenderit cumque fugiat.\"\n                  },\n                  \"sha256_url\": \"http://mayertowne.info/nina\",\n                  \"url\": \"http://ortizvandervort.name/alysa.rippin\"\n               }\n            ],\n            \"git_sha\": \"q1m\",\n            \"images\": [\n               {\n                  \"internal_url\": \"http://bartoletti.org/tad\",\n                  \"platform\": \"Suscipit non molestias consequatur aut.\",\n                  \"url\": \"http://conroy.org/chaz_zieme\"\n               },\n               {\n                  \"internal_url\": \"http://bartoletti.org/tad\",\n                  \"platform\": \"Suscipit non molestias consequatur aut.\",\n                  \"url\": \"http://conroy.org/chaz_zieme\"\n               },\n               {\n                  \"internal_url\": \"http://bartoletti.org/tad\",\n                  \"platform\": \"Suscipit non molestias consequatur aut.\",\n                  \"url\": \"http://conroy.org/chaz_zieme\"\n               }\n            ],\n            \"plugin_git_sha\": \"9au\",\n            \"printed_version\": \"Ducimus tenetur eum quia veniam.\"\n         },\n         \"err_msg\": \"Adipisci recusandae labore voluptas quam.\",\n         \"pipeline_build_id\": 1835437060330262989,\n         \"pipeline_end_at\": \"9311-38-47 43:78:42\",\n         \"pipeline_start_at\": \"2322-07-62 56:66:66\",\n         \"pipeline_view_url\": \"http://padberg.info/emery\",\n         \"pipeline_view_urls\": [\n            \"http://block.net/mohammed\",\n            \"http://jonescrona.name/foster.hoeger\"\n         ],\n         \"status\": \"error\",\n         \"tekton_status\": {\n            \"pipelines\": [\n               {\n                  \"end_at\": \"1972-07-18T22:38:23Z\",\n                  \"git_sha\": \"pez\",\n                  \"images\": [\n                     {\n                        \"internal_url\": \"http://bartoletti.org/tad\",\n                        \"platform\": \"Suscipit non molestias consequatur aut.\",\n                        \"url\": \"http://conroy.org/chaz_zieme\"\n                     },\n                     {\n                        \"internal_url\": \"http://bartoletti.org/tad\",\n                        \"platform\": \"Suscipit non molestias consequatur aut.\",\n                        \"url\": \"http://conroy.org/chaz_zieme\"\n                     },\n                     {\n                        \"internal_url\": \"http://bartoletti.org/tad\",\n                        \"platform\": \"Suscipit non molestias consequatur aut.\",\n                        \"url\": \"http://conroy.org/chaz_zieme\"\n                     },\n                     {\n                        \"internal_url\": \"http://bartoletti.org/tad\",\n                        \"platform\": \"Suscipit non molestias consequatur aut.\",\n                        \"url\": \"http://conroy.org/chaz_zieme\"\n                     }\n                  ],\n                  \"name\": \"Et quia dolor perspiciatis animi.\",\n                  \"oci_artifacts\": [\n                     {\n                        \"files\": [\n                           \"Sapiente vero facere quo aspernatur.\",\n                           \"Quia tempora dolor.\"\n                        ],\n                        \"repo\": \"Harum minima accusamus sequi aut.\",\n                        \"tag\": \"Voluptatem quam ea voluptatem aliquam amet quam.\"\n                     },\n                     {\n                        \"files\": [\n                           \"Sapiente vero facere quo aspernatur.\",\n                           \"Quia tempora dolor.\"\n                        ],\n                        \"repo\": \"Harum minima accusamus sequi aut.\",\n                        \"tag\": \"Voluptatem quam ea voluptatem aliquam amet quam.\"\n                     }\n                  ],\n                  \"platform\": \"Est iure.\",\n                  \"start_at\": \"1973-01-10T13:53:53Z\",\n                  \"status\": \"pending\",\n                  \"url\": \"http://jacobibailey.biz/mattie\"\n               },\n               {\n                  \"end_at\": \"1972-07-18T22:38:23Z\",\n                  \"git_sha\": \"pez\",\n                  \"images\": [\n                     {\n                        \"internal_url\": \"http://bartoletti.org/tad\",\n                        \"platform\": \"Suscipit non molestias consequatur aut.\",\n                        \"url\": \"http://conroy.org/chaz_zieme\"\n                     },\n                     {\n                        \"internal_url\": \"http://bartoletti.org/tad\",\n                        \"platform\": \"Suscipit non molestias consequatur aut.\",\n                        \"url\": \"http://conroy.org/chaz_zieme\"\n                     },\n                     {\n                        \"internal_url\": \"http://bartoletti.org/tad\",\n                        \"platform\": \"Suscipit non molestias consequatur aut.\",\n                        \"url\": \"http://conroy.org/chaz_zieme\"\n                     },\n                     {\n                        \"internal_url\": \"http://bartoletti.org/tad\",\n                        \"platform\": \"Suscipit non molestias consequatur aut.\",\n                        \"url\": \"http://conroy.org/chaz_zieme\"\n                     }\n                  ],\n                  \"name\": \"Et quia dolor perspiciatis animi.\",\n                  \"oci_artifacts\": [\n                     {\n                        \"files\": [\n                           \"Sapiente vero facere quo aspernatur.\",\n                           \"Quia tempora dolor.\"\n                        ],\n                        \"repo\": \"Harum minima accusamus sequi aut.\",\n                        \"tag\": \"Voluptatem quam ea voluptatem aliquam amet quam.\"\n                     },\n                     {\n                        \"files\": [\n                           \"Sapiente vero facere quo aspernatur.\",\n                           \"Quia tempora dolor.\"\n                        ],\n                        \"repo\": \"Harum minima accusamus sequi aut.\",\n                        \"tag\": \"Voluptatem quam ea voluptatem aliquam amet quam.\"\n                     }\n                  ],\n                  \"platform\": \"Est iure.\",\n                  \"start_at\": \"1973-01-10T13:53:53Z\",\n                  \"status\": \"pending\",\n                  \"url\": \"http://jacobibailey.biz/mattie\"\n               }\n            ]\n         }\n      }\n   }'")
		}
		if body.Status == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
		}
		if body.Status != nil {
			if err2 := ValidateDevBuildStatusRequestBody(body.Status); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(devbuildUpdateID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	var dryrun bool
	{
		if devbuildUpdateDryrun != "" {
			dryrun, err = strconv.ParseBool(devbuildUpdateDryrun)
			if err != nil {
				return nil, fmt.Errorf("invalid value for dryrun, must be BOOL")
			}
		}
	}
	v := &devbuild.UpdatePayload{}
	if body.Status != nil {
		v.Status = marshalDevBuildStatusRequestBodyToDevbuildDevBuildStatus(body.Status)
	}
	v.ID = id
	v.Dryrun = dryrun

	return v, nil
}

// BuildRerunPayload builds the payload for the devbuild rerun endpoint from
// CLI flags.
func BuildRerunPayload(devbuildRerunID string, devbuildRerunDryrun string) (*devbuild.RerunPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(devbuildRerunID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	var dryrun bool
	{
		if devbuildRerunDryrun != "" {
			dryrun, err = strconv.ParseBool(devbuildRerunDryrun)
			if err != nil {
				return nil, fmt.Errorf("invalid value for dryrun, must be BOOL")
			}
		}
	}
	v := &devbuild.RerunPayload{}
	v.ID = id
	v.Dryrun = dryrun

	return v, nil
}

// BuildIngestEventPayload builds the payload for the devbuild ingestEvent
// endpoint from CLI flags.
func BuildIngestEventPayload(devbuildIngestEventBody string, devbuildIngestEventDatacontenttype string, devbuildIngestEventID string, devbuildIngestEventSource string, devbuildIngestEventType string, devbuildIngestEventSpecversion string, devbuildIngestEventTime string) (*devbuild.CloudEventIngestEventPayload, error) {
	var err error
	var body IngestEventRequestBody
	{
		err = json.Unmarshal([]byte(devbuildIngestEventBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"data\": {\n         \"buildId\": \"123\",\n         \"duration\": 3600,\n         \"status\": \"success\",\n         \"version\": \"v6.1.0\"\n      },\n      \"dataschema\": \"https://example.com/registry/schemas/build-event.json\",\n      \"subject\": \"tidb-build-123\"\n   }'")
		}
		if body.Data == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var datacontenttype *string
	{
		if devbuildIngestEventDatacontenttype != "" {
			datacontenttype = &devbuildIngestEventDatacontenttype
		}
	}
	var id string
	{
		id = devbuildIngestEventID
	}
	var source string
	{
		source = devbuildIngestEventSource
	}
	var type_ string
	{
		type_ = devbuildIngestEventType
	}
	var specversion string
	{
		specversion = devbuildIngestEventSpecversion
	}
	var time_ string
	{
		time_ = devbuildIngestEventTime
		err = goa.MergeErrors(err, goa.ValidateFormat("time", time_, goa.FormatDateTime))
		if err != nil {
			return nil, err
		}
	}
	v := &devbuild.CloudEventIngestEventPayload{
		Dataschema: body.Dataschema,
		Subject:    body.Subject,
		Data:       body.Data,
	}
	v.Datacontenttype = datacontenttype
	v.ID = id
	v.Source = source
	v.Type = type_
	v.Specversion = specversion
	v.Time = time_

	return v, nil
}
