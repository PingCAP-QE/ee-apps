// Code generated by goa v3.20.0, DO NOT EDIT.
//
// devbuild HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/PingCAP-QE/ee-apps/tibuild/internal/service/design -o
// ./service

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"

	devbuild "github.com/PingCAP-QE/ee-apps/tibuild/internal/service/gen/devbuild"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "devbuild" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListDevbuildPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("devbuild", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the devbuild list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*devbuild.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("devbuild", "list", "*devbuild.ListPayload", v)
		}
		values := req.URL.Query()
		values.Add("page", fmt.Sprintf("%v", p.Page))
		values.Add("page_size", fmt.Sprintf("%v", p.PageSize))
		values.Add("hotfix", fmt.Sprintf("%v", p.Hotfix))
		values.Add("sort", p.Sort)
		if p.CreatedBy != nil {
			values.Add("created_by", *p.CreatedBy)
		}
		req.URL.RawQuery = values.Encode()
		body := NewListRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("devbuild", "list", err)
		}
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the devbuild
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListResponse may return the following errors:
//   - "BadRequest" (type *devbuild.HTTPError): http.StatusBadRequest
//   - error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "list", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateDevBuildResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "list", err)
			}
			res := NewListDevBuildOK(body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "list", err)
			}
			err = ValidateListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "list", err)
			}
			return nil, NewListBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("devbuild", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "devbuild" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateDevbuildPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("devbuild", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the devbuild
// create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*devbuild.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("devbuild", "create", "*devbuild.CreatePayload", v)
		}
		values := req.URL.Query()
		values.Add("dryrun", fmt.Sprintf("%v", p.Dryrun))
		req.URL.RawQuery = values.Encode()
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("devbuild", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the
// devbuild create endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateResponse may return the following errors:
//   - "BadRequest" (type *devbuild.HTTPError): http.StatusBadRequest
//   - "InternalServerError" (type *devbuild.HTTPError): http.StatusInternalServerError
//   - error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "create", err)
			}
			err = ValidateCreateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "create", err)
			}
			res := NewCreateDevBuildOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body CreateInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "create", err)
			}
			err = ValidateCreateInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "create", err)
			}
			return nil, NewCreateInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("devbuild", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "devbuild" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*devbuild.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("devbuild", "get", "*devbuild.GetPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDevbuildPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("devbuild", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the devbuild get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*devbuild.GetPayload)
		if !ok {
			return goahttp.ErrInvalidType("devbuild", "get", "*devbuild.GetPayload", v)
		}
		values := req.URL.Query()
		values.Add("sync", fmt.Sprintf("%v", p.Sync))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the devbuild
// get endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetResponse may return the following errors:
//   - "BadRequest" (type *devbuild.HTTPError): http.StatusBadRequest
//   - "InternalServerError" (type *devbuild.HTTPError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "get", err)
			}
			err = ValidateGetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "get", err)
			}
			res := NewGetDevBuildOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "get", err)
			}
			err = ValidateGetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "get", err)
			}
			return nil, NewGetBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GetInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "get", err)
			}
			err = ValidateGetInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "get", err)
			}
			return nil, NewGetInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("devbuild", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "devbuild" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*devbuild.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("devbuild", "update", "*devbuild.UpdatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateDevbuildPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("devbuild", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the devbuild
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*devbuild.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("devbuild", "update", "*devbuild.UpdatePayload", v)
		}
		values := req.URL.Query()
		values.Add("dryrun", fmt.Sprintf("%v", p.Dryrun))
		req.URL.RawQuery = values.Encode()
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("devbuild", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// devbuild update endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateResponse may return the following errors:
//   - "BadRequest" (type *devbuild.HTTPError): http.StatusBadRequest
//   - "InternalServerError" (type *devbuild.HTTPError): http.StatusInternalServerError
//   - error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "update", err)
			}
			err = ValidateUpdateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "update", err)
			}
			res := NewUpdateDevBuildOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "update", err)
			}
			err = ValidateUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "update", err)
			}
			return nil, NewUpdateBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "update", err)
			}
			err = ValidateUpdateInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "update", err)
			}
			return nil, NewUpdateInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("devbuild", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildRerunRequest instantiates a HTTP request object with method and path
// set to call the "devbuild" service "rerun" endpoint
func (c *Client) BuildRerunRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*devbuild.RerunPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("devbuild", "rerun", "*devbuild.RerunPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RerunDevbuildPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("devbuild", "rerun", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRerunRequest returns an encoder for requests sent to the devbuild
// rerun server.
func EncodeRerunRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*devbuild.RerunPayload)
		if !ok {
			return goahttp.ErrInvalidType("devbuild", "rerun", "*devbuild.RerunPayload", v)
		}
		values := req.URL.Query()
		values.Add("dryrun", fmt.Sprintf("%v", p.Dryrun))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRerunResponse returns a decoder for responses returned by the devbuild
// rerun endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRerunResponse may return the following errors:
//   - "BadRequest" (type *devbuild.HTTPError): http.StatusBadRequest
//   - "InternalServerError" (type *devbuild.HTTPError): http.StatusInternalServerError
//   - error: internal error
func DecodeRerunResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RerunResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "rerun", err)
			}
			err = ValidateRerunResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "rerun", err)
			}
			res := NewRerunDevBuildOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body RerunBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "rerun", err)
			}
			err = ValidateRerunBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "rerun", err)
			}
			return nil, NewRerunBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body RerunInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("devbuild", "rerun", err)
			}
			err = ValidateRerunInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("devbuild", "rerun", err)
			}
			return nil, NewRerunInternalServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("devbuild", "rerun", resp.StatusCode, string(body))
		}
	}
}

// unmarshalDevBuildResponseToDevbuildDevBuild builds a value of type
// *devbuild.DevBuild from a value of type *DevBuildResponse.
func unmarshalDevBuildResponseToDevbuildDevBuild(v *DevBuildResponse) *devbuild.DevBuild {
	res := &devbuild.DevBuild{
		ID: *v.ID,
	}
	res.Meta = unmarshalDevBuildMetaResponseToDevbuildDevBuildMeta(v.Meta)
	res.Spec = unmarshalDevBuildSpecResponseToDevbuildDevBuildSpec(v.Spec)
	res.Status = unmarshalDevBuildStatusResponseToDevbuildDevBuildStatus(v.Status)

	return res
}

// unmarshalDevBuildMetaResponseToDevbuildDevBuildMeta builds a value of type
// *devbuild.DevBuildMeta from a value of type *DevBuildMetaResponse.
func unmarshalDevBuildMetaResponseToDevbuildDevBuildMeta(v *DevBuildMetaResponse) *devbuild.DevBuildMeta {
	res := &devbuild.DevBuildMeta{
		CreatedBy: *v.CreatedBy,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}

// unmarshalDevBuildSpecResponseToDevbuildDevBuildSpec builds a value of type
// *devbuild.DevBuildSpec from a value of type *DevBuildSpecResponse.
func unmarshalDevBuildSpecResponseToDevbuildDevBuildSpec(v *DevBuildSpecResponse) *devbuild.DevBuildSpec {
	res := &devbuild.DevBuildSpec{
		BuildEnv:          *v.BuildEnv,
		BuilderImg:        *v.BuilderImg,
		Edition:           devbuild.ProductEdition(*v.Edition),
		Features:          *v.Features,
		GitHash:           *v.GitHash,
		GitRef:            *v.GitRef,
		GithubRepo:        *v.GithubRepo,
		IsHotfix:          *v.IsHotfix,
		IsPushGcr:         *v.IsPushGcr,
		PipelineEngine:    devbuild.PipelineEngine(*v.PipelineEngine),
		PluginGitRef:      *v.PluginGitRef,
		Product:           devbuild.Product(*v.Product),
		ProductBaseImg:    *v.ProductBaseImg,
		ProductDockerfile: *v.ProductDockerfile,
		TargetImg:         *v.TargetImg,
		Version:           *v.Version,
	}

	return res
}

// unmarshalDevBuildStatusResponseToDevbuildDevBuildStatus builds a value of
// type *devbuild.DevBuildStatus from a value of type *DevBuildStatusResponse.
func unmarshalDevBuildStatusResponseToDevbuildDevBuildStatus(v *DevBuildStatusResponse) *devbuild.DevBuildStatus {
	res := &devbuild.DevBuildStatus{
		ErrMsg:          *v.ErrMsg,
		PipelineBuildID: *v.PipelineBuildID,
		PipelineEndAt:   *v.PipelineEndAt,
		PipelineStartAt: *v.PipelineStartAt,
		PipelineViewURL: *v.PipelineViewURL,
		Status:          devbuild.BuildStatus(*v.Status),
	}
	res.BuildReport = unmarshalBuildReportResponseToDevbuildBuildReport(v.BuildReport)
	res.PipelineViewURLs = make([]string, len(v.PipelineViewURLs))
	for i, val := range v.PipelineViewURLs {
		res.PipelineViewURLs[i] = val
	}
	res.TektonStatus = unmarshalTektonStatusResponseToDevbuildTektonStatus(v.TektonStatus)

	return res
}

// unmarshalBuildReportResponseToDevbuildBuildReport builds a value of type
// *devbuild.BuildReport from a value of type *BuildReportResponse.
func unmarshalBuildReportResponseToDevbuildBuildReport(v *BuildReportResponse) *devbuild.BuildReport {
	res := &devbuild.BuildReport{
		GitHash:        *v.GitHash,
		PluginGitHash:  *v.PluginGitHash,
		PrintedVersion: *v.PrintedVersion,
	}
	res.Binaries = make([]*devbuild.BinArtifact, len(v.Binaries))
	for i, val := range v.Binaries {
		res.Binaries[i] = unmarshalBinArtifactResponseToDevbuildBinArtifact(val)
	}
	res.Images = make([]*devbuild.ImageArtifact, len(v.Images))
	for i, val := range v.Images {
		res.Images[i] = unmarshalImageArtifactResponseToDevbuildImageArtifact(val)
	}

	return res
}

// unmarshalBinArtifactResponseToDevbuildBinArtifact builds a value of type
// *devbuild.BinArtifact from a value of type *BinArtifactResponse.
func unmarshalBinArtifactResponseToDevbuildBinArtifact(v *BinArtifactResponse) *devbuild.BinArtifact {
	res := &devbuild.BinArtifact{
		Component: *v.Component,
		Platform:  *v.Platform,
		Sha256URL: *v.Sha256URL,
		URL:       *v.URL,
	}
	res.OciFile = unmarshalOciFileResponseToDevbuildOciFile(v.OciFile)
	res.Sha256OciFile = unmarshalOciFileResponseToDevbuildOciFile(v.Sha256OciFile)

	return res
}

// unmarshalOciFileResponseToDevbuildOciFile builds a value of type
// *devbuild.OciFile from a value of type *OciFileResponse.
func unmarshalOciFileResponseToDevbuildOciFile(v *OciFileResponse) *devbuild.OciFile {
	res := &devbuild.OciFile{
		File: *v.File,
		Repo: *v.Repo,
		Tag:  *v.Tag,
	}

	return res
}

// unmarshalImageArtifactResponseToDevbuildImageArtifact builds a value of type
// *devbuild.ImageArtifact from a value of type *ImageArtifactResponse.
func unmarshalImageArtifactResponseToDevbuildImageArtifact(v *ImageArtifactResponse) *devbuild.ImageArtifact {
	res := &devbuild.ImageArtifact{
		Platform: *v.Platform,
		URL:      *v.URL,
	}

	return res
}

// unmarshalTektonStatusResponseToDevbuildTektonStatus builds a value of type
// *devbuild.TektonStatus from a value of type *TektonStatusResponse.
func unmarshalTektonStatusResponseToDevbuildTektonStatus(v *TektonStatusResponse) *devbuild.TektonStatus {
	res := &devbuild.TektonStatus{}
	res.Pipelines = make([]*devbuild.TektonPipeline, len(v.Pipelines))
	for i, val := range v.Pipelines {
		res.Pipelines[i] = unmarshalTektonPipelineResponseToDevbuildTektonPipeline(val)
	}

	return res
}

// unmarshalTektonPipelineResponseToDevbuildTektonPipeline builds a value of
// type *devbuild.TektonPipeline from a value of type *TektonPipelineResponse.
func unmarshalTektonPipelineResponseToDevbuildTektonPipeline(v *TektonPipelineResponse) *devbuild.TektonPipeline {
	res := &devbuild.TektonPipeline{
		EndAt:    *v.EndAt,
		GitHash:  *v.GitHash,
		Name:     *v.Name,
		Platform: *v.Platform,
		StartAt:  *v.StartAt,
		Status:   devbuild.BuildStatus(*v.Status),
		URL:      *v.URL,
	}
	res.Images = make([]*devbuild.ImageArtifact, len(v.Images))
	for i, val := range v.Images {
		res.Images[i] = unmarshalImageArtifactResponseToDevbuildImageArtifact(val)
	}
	res.OciArtifacts = make([]*devbuild.OciArtifact, len(v.OciArtifacts))
	for i, val := range v.OciArtifacts {
		res.OciArtifacts[i] = unmarshalOciArtifactResponseToDevbuildOciArtifact(val)
	}

	return res
}

// unmarshalOciArtifactResponseToDevbuildOciArtifact builds a value of type
// *devbuild.OciArtifact from a value of type *OciArtifactResponse.
func unmarshalOciArtifactResponseToDevbuildOciArtifact(v *OciArtifactResponse) *devbuild.OciArtifact {
	res := &devbuild.OciArtifact{
		Repo: *v.Repo,
		Tag:  *v.Tag,
	}
	res.Files = make([]string, len(v.Files))
	for i, val := range v.Files {
		res.Files[i] = val
	}

	return res
}

// marshalDevbuildDevBuildRequestToDevBuildRequestRequestBody builds a value of
// type *DevBuildRequestRequestBody from a value of type
// *devbuild.DevBuildRequest.
func marshalDevbuildDevBuildRequestToDevBuildRequestRequestBody(v *devbuild.DevBuildRequest) *DevBuildRequestRequestBody {
	res := &DevBuildRequestRequestBody{
		BuildEnv:          v.BuildEnv,
		BuilderImg:        v.BuilderImg,
		Edition:           string(v.Edition),
		Features:          v.Features,
		GitRef:            v.GitRef,
		GithubRepo:        v.GithubRepo,
		IsHotfix:          v.IsHotfix,
		IsPushGcr:         v.IsPushGcr,
		PluginGitRef:      v.PluginGitRef,
		Product:           string(v.Product),
		ProductBaseImg:    v.ProductBaseImg,
		ProductDockerfile: v.ProductDockerfile,
		TargetImg:         v.TargetImg,
		Version:           v.Version,
	}
	if v.PipelineEngine != nil {
		pipelineEngine := string(*v.PipelineEngine)
		res.PipelineEngine = &pipelineEngine
	}

	return res
}

// marshalDevBuildRequestRequestBodyToDevbuildDevBuildRequest builds a value of
// type *devbuild.DevBuildRequest from a value of type
// *DevBuildRequestRequestBody.
func marshalDevBuildRequestRequestBodyToDevbuildDevBuildRequest(v *DevBuildRequestRequestBody) *devbuild.DevBuildRequest {
	res := &devbuild.DevBuildRequest{
		BuildEnv:          v.BuildEnv,
		BuilderImg:        v.BuilderImg,
		Edition:           devbuild.ProductEdition(v.Edition),
		Features:          v.Features,
		GitRef:            v.GitRef,
		GithubRepo:        v.GithubRepo,
		IsHotfix:          v.IsHotfix,
		IsPushGcr:         v.IsPushGcr,
		PluginGitRef:      v.PluginGitRef,
		Product:           devbuild.Product(v.Product),
		ProductBaseImg:    v.ProductBaseImg,
		ProductDockerfile: v.ProductDockerfile,
		TargetImg:         v.TargetImg,
		Version:           v.Version,
	}
	if v.PipelineEngine != nil {
		pipelineEngine := devbuild.PipelineEngine(*v.PipelineEngine)
		res.PipelineEngine = &pipelineEngine
	}

	return res
}

// unmarshalDevBuildMetaResponseBodyToDevbuildDevBuildMeta builds a value of
// type *devbuild.DevBuildMeta from a value of type *DevBuildMetaResponseBody.
func unmarshalDevBuildMetaResponseBodyToDevbuildDevBuildMeta(v *DevBuildMetaResponseBody) *devbuild.DevBuildMeta {
	res := &devbuild.DevBuildMeta{
		CreatedBy: *v.CreatedBy,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}

// unmarshalDevBuildSpecResponseBodyToDevbuildDevBuildSpec builds a value of
// type *devbuild.DevBuildSpec from a value of type *DevBuildSpecResponseBody.
func unmarshalDevBuildSpecResponseBodyToDevbuildDevBuildSpec(v *DevBuildSpecResponseBody) *devbuild.DevBuildSpec {
	res := &devbuild.DevBuildSpec{
		BuildEnv:          *v.BuildEnv,
		BuilderImg:        *v.BuilderImg,
		Edition:           devbuild.ProductEdition(*v.Edition),
		Features:          *v.Features,
		GitHash:           *v.GitHash,
		GitRef:            *v.GitRef,
		GithubRepo:        *v.GithubRepo,
		IsHotfix:          *v.IsHotfix,
		IsPushGcr:         *v.IsPushGcr,
		PipelineEngine:    devbuild.PipelineEngine(*v.PipelineEngine),
		PluginGitRef:      *v.PluginGitRef,
		Product:           devbuild.Product(*v.Product),
		ProductBaseImg:    *v.ProductBaseImg,
		ProductDockerfile: *v.ProductDockerfile,
		TargetImg:         *v.TargetImg,
		Version:           *v.Version,
	}

	return res
}

// unmarshalDevBuildStatusResponseBodyToDevbuildDevBuildStatus builds a value
// of type *devbuild.DevBuildStatus from a value of type
// *DevBuildStatusResponseBody.
func unmarshalDevBuildStatusResponseBodyToDevbuildDevBuildStatus(v *DevBuildStatusResponseBody) *devbuild.DevBuildStatus {
	res := &devbuild.DevBuildStatus{
		ErrMsg:          *v.ErrMsg,
		PipelineBuildID: *v.PipelineBuildID,
		PipelineEndAt:   *v.PipelineEndAt,
		PipelineStartAt: *v.PipelineStartAt,
		PipelineViewURL: *v.PipelineViewURL,
		Status:          devbuild.BuildStatus(*v.Status),
	}
	res.BuildReport = unmarshalBuildReportResponseBodyToDevbuildBuildReport(v.BuildReport)
	res.PipelineViewURLs = make([]string, len(v.PipelineViewURLs))
	for i, val := range v.PipelineViewURLs {
		res.PipelineViewURLs[i] = val
	}
	res.TektonStatus = unmarshalTektonStatusResponseBodyToDevbuildTektonStatus(v.TektonStatus)

	return res
}

// unmarshalBuildReportResponseBodyToDevbuildBuildReport builds a value of type
// *devbuild.BuildReport from a value of type *BuildReportResponseBody.
func unmarshalBuildReportResponseBodyToDevbuildBuildReport(v *BuildReportResponseBody) *devbuild.BuildReport {
	res := &devbuild.BuildReport{
		GitHash:        *v.GitHash,
		PluginGitHash:  *v.PluginGitHash,
		PrintedVersion: *v.PrintedVersion,
	}
	res.Binaries = make([]*devbuild.BinArtifact, len(v.Binaries))
	for i, val := range v.Binaries {
		res.Binaries[i] = unmarshalBinArtifactResponseBodyToDevbuildBinArtifact(val)
	}
	res.Images = make([]*devbuild.ImageArtifact, len(v.Images))
	for i, val := range v.Images {
		res.Images[i] = unmarshalImageArtifactResponseBodyToDevbuildImageArtifact(val)
	}

	return res
}

// unmarshalBinArtifactResponseBodyToDevbuildBinArtifact builds a value of type
// *devbuild.BinArtifact from a value of type *BinArtifactResponseBody.
func unmarshalBinArtifactResponseBodyToDevbuildBinArtifact(v *BinArtifactResponseBody) *devbuild.BinArtifact {
	res := &devbuild.BinArtifact{
		Component: *v.Component,
		Platform:  *v.Platform,
		Sha256URL: *v.Sha256URL,
		URL:       *v.URL,
	}
	res.OciFile = unmarshalOciFileResponseBodyToDevbuildOciFile(v.OciFile)
	res.Sha256OciFile = unmarshalOciFileResponseBodyToDevbuildOciFile(v.Sha256OciFile)

	return res
}

// unmarshalOciFileResponseBodyToDevbuildOciFile builds a value of type
// *devbuild.OciFile from a value of type *OciFileResponseBody.
func unmarshalOciFileResponseBodyToDevbuildOciFile(v *OciFileResponseBody) *devbuild.OciFile {
	res := &devbuild.OciFile{
		File: *v.File,
		Repo: *v.Repo,
		Tag:  *v.Tag,
	}

	return res
}

// unmarshalImageArtifactResponseBodyToDevbuildImageArtifact builds a value of
// type *devbuild.ImageArtifact from a value of type *ImageArtifactResponseBody.
func unmarshalImageArtifactResponseBodyToDevbuildImageArtifact(v *ImageArtifactResponseBody) *devbuild.ImageArtifact {
	res := &devbuild.ImageArtifact{
		Platform: *v.Platform,
		URL:      *v.URL,
	}

	return res
}

// unmarshalTektonStatusResponseBodyToDevbuildTektonStatus builds a value of
// type *devbuild.TektonStatus from a value of type *TektonStatusResponseBody.
func unmarshalTektonStatusResponseBodyToDevbuildTektonStatus(v *TektonStatusResponseBody) *devbuild.TektonStatus {
	res := &devbuild.TektonStatus{}
	res.Pipelines = make([]*devbuild.TektonPipeline, len(v.Pipelines))
	for i, val := range v.Pipelines {
		res.Pipelines[i] = unmarshalTektonPipelineResponseBodyToDevbuildTektonPipeline(val)
	}

	return res
}

// unmarshalTektonPipelineResponseBodyToDevbuildTektonPipeline builds a value
// of type *devbuild.TektonPipeline from a value of type
// *TektonPipelineResponseBody.
func unmarshalTektonPipelineResponseBodyToDevbuildTektonPipeline(v *TektonPipelineResponseBody) *devbuild.TektonPipeline {
	res := &devbuild.TektonPipeline{
		EndAt:    *v.EndAt,
		GitHash:  *v.GitHash,
		Name:     *v.Name,
		Platform: *v.Platform,
		StartAt:  *v.StartAt,
		Status:   devbuild.BuildStatus(*v.Status),
		URL:      *v.URL,
	}
	res.Images = make([]*devbuild.ImageArtifact, len(v.Images))
	for i, val := range v.Images {
		res.Images[i] = unmarshalImageArtifactResponseBodyToDevbuildImageArtifact(val)
	}
	res.OciArtifacts = make([]*devbuild.OciArtifact, len(v.OciArtifacts))
	for i, val := range v.OciArtifacts {
		res.OciArtifacts[i] = unmarshalOciArtifactResponseBodyToDevbuildOciArtifact(val)
	}

	return res
}

// unmarshalOciArtifactResponseBodyToDevbuildOciArtifact builds a value of type
// *devbuild.OciArtifact from a value of type *OciArtifactResponseBody.
func unmarshalOciArtifactResponseBodyToDevbuildOciArtifact(v *OciArtifactResponseBody) *devbuild.OciArtifact {
	res := &devbuild.OciArtifact{
		Repo: *v.Repo,
		Tag:  *v.Tag,
	}
	res.Files = make([]string, len(v.Files))
	for i, val := range v.Files {
		res.Files[i] = val
	}

	return res
}

// marshalDevbuildDevBuildToDevBuildRequestBody builds a value of type
// *DevBuildRequestBody from a value of type *devbuild.DevBuild.
func marshalDevbuildDevBuildToDevBuildRequestBody(v *devbuild.DevBuild) *DevBuildRequestBody {
	res := &DevBuildRequestBody{
		ID: v.ID,
	}
	if v.Meta != nil {
		res.Meta = marshalDevbuildDevBuildMetaToDevBuildMetaRequestBody(v.Meta)
	}
	if v.Spec != nil {
		res.Spec = marshalDevbuildDevBuildSpecToDevBuildSpecRequestBody(v.Spec)
	}
	if v.Status != nil {
		res.Status = marshalDevbuildDevBuildStatusToDevBuildStatusRequestBody(v.Status)
	}

	return res
}

// marshalDevbuildDevBuildMetaToDevBuildMetaRequestBody builds a value of type
// *DevBuildMetaRequestBody from a value of type *devbuild.DevBuildMeta.
func marshalDevbuildDevBuildMetaToDevBuildMetaRequestBody(v *devbuild.DevBuildMeta) *DevBuildMetaRequestBody {
	res := &DevBuildMetaRequestBody{
		CreatedBy: v.CreatedBy,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
	}

	return res
}

// marshalDevbuildDevBuildSpecToDevBuildSpecRequestBody builds a value of type
// *DevBuildSpecRequestBody from a value of type *devbuild.DevBuildSpec.
func marshalDevbuildDevBuildSpecToDevBuildSpecRequestBody(v *devbuild.DevBuildSpec) *DevBuildSpecRequestBody {
	res := &DevBuildSpecRequestBody{
		BuildEnv:          v.BuildEnv,
		BuilderImg:        v.BuilderImg,
		Edition:           string(v.Edition),
		Features:          v.Features,
		GitHash:           v.GitHash,
		GitRef:            v.GitRef,
		GithubRepo:        v.GithubRepo,
		IsHotfix:          v.IsHotfix,
		IsPushGcr:         v.IsPushGcr,
		PipelineEngine:    string(v.PipelineEngine),
		PluginGitRef:      v.PluginGitRef,
		Product:           string(v.Product),
		ProductBaseImg:    v.ProductBaseImg,
		ProductDockerfile: v.ProductDockerfile,
		TargetImg:         v.TargetImg,
		Version:           v.Version,
	}

	return res
}

// marshalDevbuildDevBuildStatusToDevBuildStatusRequestBody builds a value of
// type *DevBuildStatusRequestBody from a value of type
// *devbuild.DevBuildStatus.
func marshalDevbuildDevBuildStatusToDevBuildStatusRequestBody(v *devbuild.DevBuildStatus) *DevBuildStatusRequestBody {
	res := &DevBuildStatusRequestBody{
		ErrMsg:          v.ErrMsg,
		PipelineBuildID: v.PipelineBuildID,
		PipelineEndAt:   v.PipelineEndAt,
		PipelineStartAt: v.PipelineStartAt,
		PipelineViewURL: v.PipelineViewURL,
		Status:          string(v.Status),
	}
	if v.BuildReport != nil {
		res.BuildReport = marshalDevbuildBuildReportToBuildReportRequestBody(v.BuildReport)
	}
	if v.PipelineViewURLs != nil {
		res.PipelineViewURLs = make([]string, len(v.PipelineViewURLs))
		for i, val := range v.PipelineViewURLs {
			res.PipelineViewURLs[i] = val
		}
	} else {
		res.PipelineViewURLs = []string{}
	}
	if v.TektonStatus != nil {
		res.TektonStatus = marshalDevbuildTektonStatusToTektonStatusRequestBody(v.TektonStatus)
	}

	return res
}

// marshalDevbuildBuildReportToBuildReportRequestBody builds a value of type
// *BuildReportRequestBody from a value of type *devbuild.BuildReport.
func marshalDevbuildBuildReportToBuildReportRequestBody(v *devbuild.BuildReport) *BuildReportRequestBody {
	res := &BuildReportRequestBody{
		GitHash:        v.GitHash,
		PluginGitHash:  v.PluginGitHash,
		PrintedVersion: v.PrintedVersion,
	}
	if v.Binaries != nil {
		res.Binaries = make([]*BinArtifactRequestBody, len(v.Binaries))
		for i, val := range v.Binaries {
			res.Binaries[i] = marshalDevbuildBinArtifactToBinArtifactRequestBody(val)
		}
	} else {
		res.Binaries = []*BinArtifactRequestBody{}
	}
	if v.Images != nil {
		res.Images = make([]*ImageArtifactRequestBody, len(v.Images))
		for i, val := range v.Images {
			res.Images[i] = marshalDevbuildImageArtifactToImageArtifactRequestBody(val)
		}
	} else {
		res.Images = []*ImageArtifactRequestBody{}
	}

	return res
}

// marshalDevbuildBinArtifactToBinArtifactRequestBody builds a value of type
// *BinArtifactRequestBody from a value of type *devbuild.BinArtifact.
func marshalDevbuildBinArtifactToBinArtifactRequestBody(v *devbuild.BinArtifact) *BinArtifactRequestBody {
	res := &BinArtifactRequestBody{
		Component: v.Component,
		Platform:  v.Platform,
		Sha256URL: v.Sha256URL,
		URL:       v.URL,
	}
	if v.OciFile != nil {
		res.OciFile = marshalDevbuildOciFileToOciFileRequestBody(v.OciFile)
	}
	if v.Sha256OciFile != nil {
		res.Sha256OciFile = marshalDevbuildOciFileToOciFileRequestBody(v.Sha256OciFile)
	}

	return res
}

// marshalDevbuildOciFileToOciFileRequestBody builds a value of type
// *OciFileRequestBody from a value of type *devbuild.OciFile.
func marshalDevbuildOciFileToOciFileRequestBody(v *devbuild.OciFile) *OciFileRequestBody {
	res := &OciFileRequestBody{
		File: v.File,
		Repo: v.Repo,
		Tag:  v.Tag,
	}

	return res
}

// marshalDevbuildImageArtifactToImageArtifactRequestBody builds a value of
// type *ImageArtifactRequestBody from a value of type *devbuild.ImageArtifact.
func marshalDevbuildImageArtifactToImageArtifactRequestBody(v *devbuild.ImageArtifact) *ImageArtifactRequestBody {
	res := &ImageArtifactRequestBody{
		Platform: v.Platform,
		URL:      v.URL,
	}

	return res
}

// marshalDevbuildTektonStatusToTektonStatusRequestBody builds a value of type
// *TektonStatusRequestBody from a value of type *devbuild.TektonStatus.
func marshalDevbuildTektonStatusToTektonStatusRequestBody(v *devbuild.TektonStatus) *TektonStatusRequestBody {
	res := &TektonStatusRequestBody{}
	if v.Pipelines != nil {
		res.Pipelines = make([]*TektonPipelineRequestBody, len(v.Pipelines))
		for i, val := range v.Pipelines {
			res.Pipelines[i] = marshalDevbuildTektonPipelineToTektonPipelineRequestBody(val)
		}
	} else {
		res.Pipelines = []*TektonPipelineRequestBody{}
	}

	return res
}

// marshalDevbuildTektonPipelineToTektonPipelineRequestBody builds a value of
// type *TektonPipelineRequestBody from a value of type
// *devbuild.TektonPipeline.
func marshalDevbuildTektonPipelineToTektonPipelineRequestBody(v *devbuild.TektonPipeline) *TektonPipelineRequestBody {
	res := &TektonPipelineRequestBody{
		EndAt:    v.EndAt,
		GitHash:  v.GitHash,
		Name:     v.Name,
		Platform: v.Platform,
		StartAt:  v.StartAt,
		Status:   string(v.Status),
		URL:      v.URL,
	}
	if v.Images != nil {
		res.Images = make([]*ImageArtifactRequestBody, len(v.Images))
		for i, val := range v.Images {
			res.Images[i] = marshalDevbuildImageArtifactToImageArtifactRequestBody(val)
		}
	} else {
		res.Images = []*ImageArtifactRequestBody{}
	}
	if v.OciArtifacts != nil {
		res.OciArtifacts = make([]*OciArtifactRequestBody, len(v.OciArtifacts))
		for i, val := range v.OciArtifacts {
			res.OciArtifacts[i] = marshalDevbuildOciArtifactToOciArtifactRequestBody(val)
		}
	} else {
		res.OciArtifacts = []*OciArtifactRequestBody{}
	}

	return res
}

// marshalDevbuildOciArtifactToOciArtifactRequestBody builds a value of type
// *OciArtifactRequestBody from a value of type *devbuild.OciArtifact.
func marshalDevbuildOciArtifactToOciArtifactRequestBody(v *devbuild.OciArtifact) *OciArtifactRequestBody {
	res := &OciArtifactRequestBody{
		Repo: v.Repo,
		Tag:  v.Tag,
	}
	if v.Files != nil {
		res.Files = make([]string, len(v.Files))
		for i, val := range v.Files {
			res.Files[i] = val
		}
	} else {
		res.Files = []string{}
	}

	return res
}

// marshalDevBuildRequestBodyToDevbuildDevBuild builds a value of type
// *devbuild.DevBuild from a value of type *DevBuildRequestBody.
func marshalDevBuildRequestBodyToDevbuildDevBuild(v *DevBuildRequestBody) *devbuild.DevBuild {
	res := &devbuild.DevBuild{
		ID: v.ID,
	}
	if v.Meta != nil {
		res.Meta = marshalDevBuildMetaRequestBodyToDevbuildDevBuildMeta(v.Meta)
	}
	if v.Spec != nil {
		res.Spec = marshalDevBuildSpecRequestBodyToDevbuildDevBuildSpec(v.Spec)
	}
	if v.Status != nil {
		res.Status = marshalDevBuildStatusRequestBodyToDevbuildDevBuildStatus(v.Status)
	}

	return res
}

// marshalDevBuildMetaRequestBodyToDevbuildDevBuildMeta builds a value of type
// *devbuild.DevBuildMeta from a value of type *DevBuildMetaRequestBody.
func marshalDevBuildMetaRequestBodyToDevbuildDevBuildMeta(v *DevBuildMetaRequestBody) *devbuild.DevBuildMeta {
	res := &devbuild.DevBuildMeta{
		CreatedBy: v.CreatedBy,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
	}

	return res
}

// marshalDevBuildSpecRequestBodyToDevbuildDevBuildSpec builds a value of type
// *devbuild.DevBuildSpec from a value of type *DevBuildSpecRequestBody.
func marshalDevBuildSpecRequestBodyToDevbuildDevBuildSpec(v *DevBuildSpecRequestBody) *devbuild.DevBuildSpec {
	res := &devbuild.DevBuildSpec{
		BuildEnv:          v.BuildEnv,
		BuilderImg:        v.BuilderImg,
		Edition:           devbuild.ProductEdition(v.Edition),
		Features:          v.Features,
		GitHash:           v.GitHash,
		GitRef:            v.GitRef,
		GithubRepo:        v.GithubRepo,
		IsHotfix:          v.IsHotfix,
		IsPushGcr:         v.IsPushGcr,
		PipelineEngine:    devbuild.PipelineEngine(v.PipelineEngine),
		PluginGitRef:      v.PluginGitRef,
		Product:           devbuild.Product(v.Product),
		ProductBaseImg:    v.ProductBaseImg,
		ProductDockerfile: v.ProductDockerfile,
		TargetImg:         v.TargetImg,
		Version:           v.Version,
	}

	return res
}

// marshalDevBuildStatusRequestBodyToDevbuildDevBuildStatus builds a value of
// type *devbuild.DevBuildStatus from a value of type
// *DevBuildStatusRequestBody.
func marshalDevBuildStatusRequestBodyToDevbuildDevBuildStatus(v *DevBuildStatusRequestBody) *devbuild.DevBuildStatus {
	res := &devbuild.DevBuildStatus{
		ErrMsg:          v.ErrMsg,
		PipelineBuildID: v.PipelineBuildID,
		PipelineEndAt:   v.PipelineEndAt,
		PipelineStartAt: v.PipelineStartAt,
		PipelineViewURL: v.PipelineViewURL,
		Status:          devbuild.BuildStatus(v.Status),
	}
	if v.BuildReport != nil {
		res.BuildReport = marshalBuildReportRequestBodyToDevbuildBuildReport(v.BuildReport)
	}
	if v.PipelineViewURLs != nil {
		res.PipelineViewURLs = make([]string, len(v.PipelineViewURLs))
		for i, val := range v.PipelineViewURLs {
			res.PipelineViewURLs[i] = val
		}
	} else {
		res.PipelineViewURLs = []string{}
	}
	if v.TektonStatus != nil {
		res.TektonStatus = marshalTektonStatusRequestBodyToDevbuildTektonStatus(v.TektonStatus)
	}

	return res
}

// marshalBuildReportRequestBodyToDevbuildBuildReport builds a value of type
// *devbuild.BuildReport from a value of type *BuildReportRequestBody.
func marshalBuildReportRequestBodyToDevbuildBuildReport(v *BuildReportRequestBody) *devbuild.BuildReport {
	res := &devbuild.BuildReport{
		GitHash:        v.GitHash,
		PluginGitHash:  v.PluginGitHash,
		PrintedVersion: v.PrintedVersion,
	}
	if v.Binaries != nil {
		res.Binaries = make([]*devbuild.BinArtifact, len(v.Binaries))
		for i, val := range v.Binaries {
			res.Binaries[i] = marshalBinArtifactRequestBodyToDevbuildBinArtifact(val)
		}
	} else {
		res.Binaries = []*devbuild.BinArtifact{}
	}
	if v.Images != nil {
		res.Images = make([]*devbuild.ImageArtifact, len(v.Images))
		for i, val := range v.Images {
			res.Images[i] = marshalImageArtifactRequestBodyToDevbuildImageArtifact(val)
		}
	} else {
		res.Images = []*devbuild.ImageArtifact{}
	}

	return res
}

// marshalBinArtifactRequestBodyToDevbuildBinArtifact builds a value of type
// *devbuild.BinArtifact from a value of type *BinArtifactRequestBody.
func marshalBinArtifactRequestBodyToDevbuildBinArtifact(v *BinArtifactRequestBody) *devbuild.BinArtifact {
	res := &devbuild.BinArtifact{
		Component: v.Component,
		Platform:  v.Platform,
		Sha256URL: v.Sha256URL,
		URL:       v.URL,
	}
	if v.OciFile != nil {
		res.OciFile = marshalOciFileRequestBodyToDevbuildOciFile(v.OciFile)
	}
	if v.Sha256OciFile != nil {
		res.Sha256OciFile = marshalOciFileRequestBodyToDevbuildOciFile(v.Sha256OciFile)
	}

	return res
}

// marshalOciFileRequestBodyToDevbuildOciFile builds a value of type
// *devbuild.OciFile from a value of type *OciFileRequestBody.
func marshalOciFileRequestBodyToDevbuildOciFile(v *OciFileRequestBody) *devbuild.OciFile {
	res := &devbuild.OciFile{
		File: v.File,
		Repo: v.Repo,
		Tag:  v.Tag,
	}

	return res
}

// marshalImageArtifactRequestBodyToDevbuildImageArtifact builds a value of
// type *devbuild.ImageArtifact from a value of type *ImageArtifactRequestBody.
func marshalImageArtifactRequestBodyToDevbuildImageArtifact(v *ImageArtifactRequestBody) *devbuild.ImageArtifact {
	res := &devbuild.ImageArtifact{
		Platform: v.Platform,
		URL:      v.URL,
	}

	return res
}

// marshalTektonStatusRequestBodyToDevbuildTektonStatus builds a value of type
// *devbuild.TektonStatus from a value of type *TektonStatusRequestBody.
func marshalTektonStatusRequestBodyToDevbuildTektonStatus(v *TektonStatusRequestBody) *devbuild.TektonStatus {
	res := &devbuild.TektonStatus{}
	if v.Pipelines != nil {
		res.Pipelines = make([]*devbuild.TektonPipeline, len(v.Pipelines))
		for i, val := range v.Pipelines {
			res.Pipelines[i] = marshalTektonPipelineRequestBodyToDevbuildTektonPipeline(val)
		}
	} else {
		res.Pipelines = []*devbuild.TektonPipeline{}
	}

	return res
}

// marshalTektonPipelineRequestBodyToDevbuildTektonPipeline builds a value of
// type *devbuild.TektonPipeline from a value of type
// *TektonPipelineRequestBody.
func marshalTektonPipelineRequestBodyToDevbuildTektonPipeline(v *TektonPipelineRequestBody) *devbuild.TektonPipeline {
	res := &devbuild.TektonPipeline{
		EndAt:    v.EndAt,
		GitHash:  v.GitHash,
		Name:     v.Name,
		Platform: v.Platform,
		StartAt:  v.StartAt,
		Status:   devbuild.BuildStatus(v.Status),
		URL:      v.URL,
	}
	if v.Images != nil {
		res.Images = make([]*devbuild.ImageArtifact, len(v.Images))
		for i, val := range v.Images {
			res.Images[i] = marshalImageArtifactRequestBodyToDevbuildImageArtifact(val)
		}
	} else {
		res.Images = []*devbuild.ImageArtifact{}
	}
	if v.OciArtifacts != nil {
		res.OciArtifacts = make([]*devbuild.OciArtifact, len(v.OciArtifacts))
		for i, val := range v.OciArtifacts {
			res.OciArtifacts[i] = marshalOciArtifactRequestBodyToDevbuildOciArtifact(val)
		}
	} else {
		res.OciArtifacts = []*devbuild.OciArtifact{}
	}

	return res
}

// marshalOciArtifactRequestBodyToDevbuildOciArtifact builds a value of type
// *devbuild.OciArtifact from a value of type *OciArtifactRequestBody.
func marshalOciArtifactRequestBodyToDevbuildOciArtifact(v *OciArtifactRequestBody) *devbuild.OciArtifact {
	res := &devbuild.OciArtifact{
		Repo: v.Repo,
		Tag:  v.Tag,
	}
	if v.Files != nil {
		res.Files = make([]string, len(v.Files))
		for i, val := range v.Files {
			res.Files[i] = val
		}
	} else {
		res.Files = []string{}
	}

	return res
}
