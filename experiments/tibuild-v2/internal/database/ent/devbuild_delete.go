// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PingCAP-QE/ee-apps/tibuild/internal/database/ent/devbuild"
	"github.com/PingCAP-QE/ee-apps/tibuild/internal/database/ent/predicate"
)

// DevBuildDelete is the builder for deleting a DevBuild entity.
type DevBuildDelete struct {
	config
	hooks    []Hook
	mutation *DevBuildMutation
}

// Where appends a list predicates to the DevBuildDelete builder.
func (dbd *DevBuildDelete) Where(ps ...predicate.DevBuild) *DevBuildDelete {
	dbd.mutation.Where(ps...)
	return dbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dbd *DevBuildDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dbd.sqlExec, dbd.mutation, dbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dbd *DevBuildDelete) ExecX(ctx context.Context) int {
	n, err := dbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dbd *DevBuildDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(devbuild.Table, sqlgraph.NewFieldSpec(devbuild.FieldID, field.TypeInt))
	if ps := dbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dbd.mutation.done = true
	return affected, err
}

// DevBuildDeleteOne is the builder for deleting a single DevBuild entity.
type DevBuildDeleteOne struct {
	dbd *DevBuildDelete
}

// Where appends a list predicates to the DevBuildDelete builder.
func (dbdo *DevBuildDeleteOne) Where(ps ...predicate.DevBuild) *DevBuildDeleteOne {
	dbdo.dbd.mutation.Where(ps...)
	return dbdo
}

// Exec executes the deletion query.
func (dbdo *DevBuildDeleteOne) Exec(ctx context.Context) error {
	n, err := dbdo.dbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{devbuild.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dbdo *DevBuildDeleteOne) ExecX(ctx context.Context) {
	if err := dbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
