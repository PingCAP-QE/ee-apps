// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PingCAP-QE/ee-apps/tibuild/internal/database/ent/devbuild"
	"github.com/PingCAP-QE/ee-apps/tibuild/internal/database/ent/predicate"
)

// DevBuildUpdate is the builder for updating DevBuild entities.
type DevBuildUpdate struct {
	config
	hooks    []Hook
	mutation *DevBuildMutation
}

// Where appends a list predicates to the DevBuildUpdate builder.
func (dbu *DevBuildUpdate) Where(ps ...predicate.DevBuild) *DevBuildUpdate {
	dbu.mutation.Where(ps...)
	return dbu
}

// SetCreatedBy sets the "created_by" field.
func (dbu *DevBuildUpdate) SetCreatedBy(s string) *DevBuildUpdate {
	dbu.mutation.SetCreatedBy(s)
	return dbu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableCreatedBy(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetCreatedBy(*s)
	}
	return dbu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (dbu *DevBuildUpdate) ClearCreatedBy() *DevBuildUpdate {
	dbu.mutation.ClearCreatedBy()
	return dbu
}

// SetCreatedAt sets the "created_at" field.
func (dbu *DevBuildUpdate) SetCreatedAt(t time.Time) *DevBuildUpdate {
	dbu.mutation.SetCreatedAt(t)
	return dbu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableCreatedAt(t *time.Time) *DevBuildUpdate {
	if t != nil {
		dbu.SetCreatedAt(*t)
	}
	return dbu
}

// SetUpdatedAt sets the "updated_at" field.
func (dbu *DevBuildUpdate) SetUpdatedAt(t time.Time) *DevBuildUpdate {
	dbu.mutation.SetUpdatedAt(t)
	return dbu
}

// SetProduct sets the "product" field.
func (dbu *DevBuildUpdate) SetProduct(s string) *DevBuildUpdate {
	dbu.mutation.SetProduct(s)
	return dbu
}

// SetNillableProduct sets the "product" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableProduct(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetProduct(*s)
	}
	return dbu
}

// ClearProduct clears the value of the "product" field.
func (dbu *DevBuildUpdate) ClearProduct() *DevBuildUpdate {
	dbu.mutation.ClearProduct()
	return dbu
}

// SetEdition sets the "edition" field.
func (dbu *DevBuildUpdate) SetEdition(s string) *DevBuildUpdate {
	dbu.mutation.SetEdition(s)
	return dbu
}

// SetNillableEdition sets the "edition" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableEdition(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetEdition(*s)
	}
	return dbu
}

// ClearEdition clears the value of the "edition" field.
func (dbu *DevBuildUpdate) ClearEdition() *DevBuildUpdate {
	dbu.mutation.ClearEdition()
	return dbu
}

// SetVersion sets the "version" field.
func (dbu *DevBuildUpdate) SetVersion(s string) *DevBuildUpdate {
	dbu.mutation.SetVersion(s)
	return dbu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableVersion(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetVersion(*s)
	}
	return dbu
}

// ClearVersion clears the value of the "version" field.
func (dbu *DevBuildUpdate) ClearVersion() *DevBuildUpdate {
	dbu.mutation.ClearVersion()
	return dbu
}

// SetGithubRepo sets the "github_repo" field.
func (dbu *DevBuildUpdate) SetGithubRepo(s string) *DevBuildUpdate {
	dbu.mutation.SetGithubRepo(s)
	return dbu
}

// SetNillableGithubRepo sets the "github_repo" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableGithubRepo(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetGithubRepo(*s)
	}
	return dbu
}

// ClearGithubRepo clears the value of the "github_repo" field.
func (dbu *DevBuildUpdate) ClearGithubRepo() *DevBuildUpdate {
	dbu.mutation.ClearGithubRepo()
	return dbu
}

// SetGitRef sets the "git_ref" field.
func (dbu *DevBuildUpdate) SetGitRef(s string) *DevBuildUpdate {
	dbu.mutation.SetGitRef(s)
	return dbu
}

// SetNillableGitRef sets the "git_ref" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableGitRef(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetGitRef(*s)
	}
	return dbu
}

// ClearGitRef clears the value of the "git_ref" field.
func (dbu *DevBuildUpdate) ClearGitRef() *DevBuildUpdate {
	dbu.mutation.ClearGitRef()
	return dbu
}

// SetGitHash sets the "git_hash" field.
func (dbu *DevBuildUpdate) SetGitHash(s string) *DevBuildUpdate {
	dbu.mutation.SetGitHash(s)
	return dbu
}

// SetNillableGitHash sets the "git_hash" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableGitHash(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetGitHash(*s)
	}
	return dbu
}

// ClearGitHash clears the value of the "git_hash" field.
func (dbu *DevBuildUpdate) ClearGitHash() *DevBuildUpdate {
	dbu.mutation.ClearGitHash()
	return dbu
}

// SetPluginGitRef sets the "plugin_git_ref" field.
func (dbu *DevBuildUpdate) SetPluginGitRef(s string) *DevBuildUpdate {
	dbu.mutation.SetPluginGitRef(s)
	return dbu
}

// SetNillablePluginGitRef sets the "plugin_git_ref" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillablePluginGitRef(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetPluginGitRef(*s)
	}
	return dbu
}

// ClearPluginGitRef clears the value of the "plugin_git_ref" field.
func (dbu *DevBuildUpdate) ClearPluginGitRef() *DevBuildUpdate {
	dbu.mutation.ClearPluginGitRef()
	return dbu
}

// SetIsHotfix sets the "is_hotfix" field.
func (dbu *DevBuildUpdate) SetIsHotfix(b bool) *DevBuildUpdate {
	dbu.mutation.SetIsHotfix(b)
	return dbu
}

// SetNillableIsHotfix sets the "is_hotfix" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableIsHotfix(b *bool) *DevBuildUpdate {
	if b != nil {
		dbu.SetIsHotfix(*b)
	}
	return dbu
}

// SetIsPushGcr sets the "is_push_gcr" field.
func (dbu *DevBuildUpdate) SetIsPushGcr(b bool) *DevBuildUpdate {
	dbu.mutation.SetIsPushGcr(b)
	return dbu
}

// SetNillableIsPushGcr sets the "is_push_gcr" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableIsPushGcr(b *bool) *DevBuildUpdate {
	if b != nil {
		dbu.SetIsPushGcr(*b)
	}
	return dbu
}

// ClearIsPushGcr clears the value of the "is_push_gcr" field.
func (dbu *DevBuildUpdate) ClearIsPushGcr() *DevBuildUpdate {
	dbu.mutation.ClearIsPushGcr()
	return dbu
}

// SetTargetImg sets the "target_img" field.
func (dbu *DevBuildUpdate) SetTargetImg(s string) *DevBuildUpdate {
	dbu.mutation.SetTargetImg(s)
	return dbu
}

// SetNillableTargetImg sets the "target_img" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableTargetImg(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetTargetImg(*s)
	}
	return dbu
}

// ClearTargetImg clears the value of the "target_img" field.
func (dbu *DevBuildUpdate) ClearTargetImg() *DevBuildUpdate {
	dbu.mutation.ClearTargetImg()
	return dbu
}

// SetPipelineEngine sets the "pipeline_engine" field.
func (dbu *DevBuildUpdate) SetPipelineEngine(s string) *DevBuildUpdate {
	dbu.mutation.SetPipelineEngine(s)
	return dbu
}

// SetNillablePipelineEngine sets the "pipeline_engine" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillablePipelineEngine(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetPipelineEngine(*s)
	}
	return dbu
}

// ClearPipelineEngine clears the value of the "pipeline_engine" field.
func (dbu *DevBuildUpdate) ClearPipelineEngine() *DevBuildUpdate {
	dbu.mutation.ClearPipelineEngine()
	return dbu
}

// SetBuilderImg sets the "builder_img" field.
func (dbu *DevBuildUpdate) SetBuilderImg(s string) *DevBuildUpdate {
	dbu.mutation.SetBuilderImg(s)
	return dbu
}

// SetNillableBuilderImg sets the "builder_img" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableBuilderImg(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetBuilderImg(*s)
	}
	return dbu
}

// ClearBuilderImg clears the value of the "builder_img" field.
func (dbu *DevBuildUpdate) ClearBuilderImg() *DevBuildUpdate {
	dbu.mutation.ClearBuilderImg()
	return dbu
}

// SetBuildEnv sets the "build_env" field.
func (dbu *DevBuildUpdate) SetBuildEnv(s string) *DevBuildUpdate {
	dbu.mutation.SetBuildEnv(s)
	return dbu
}

// SetNillableBuildEnv sets the "build_env" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableBuildEnv(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetBuildEnv(*s)
	}
	return dbu
}

// ClearBuildEnv clears the value of the "build_env" field.
func (dbu *DevBuildUpdate) ClearBuildEnv() *DevBuildUpdate {
	dbu.mutation.ClearBuildEnv()
	return dbu
}

// SetFeatures sets the "features" field.
func (dbu *DevBuildUpdate) SetFeatures(s string) *DevBuildUpdate {
	dbu.mutation.SetFeatures(s)
	return dbu
}

// SetNillableFeatures sets the "features" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableFeatures(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetFeatures(*s)
	}
	return dbu
}

// ClearFeatures clears the value of the "features" field.
func (dbu *DevBuildUpdate) ClearFeatures() *DevBuildUpdate {
	dbu.mutation.ClearFeatures()
	return dbu
}

// SetProductBaseImg sets the "product_base_img" field.
func (dbu *DevBuildUpdate) SetProductBaseImg(s string) *DevBuildUpdate {
	dbu.mutation.SetProductBaseImg(s)
	return dbu
}

// SetNillableProductBaseImg sets the "product_base_img" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableProductBaseImg(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetProductBaseImg(*s)
	}
	return dbu
}

// ClearProductBaseImg clears the value of the "product_base_img" field.
func (dbu *DevBuildUpdate) ClearProductBaseImg() *DevBuildUpdate {
	dbu.mutation.ClearProductBaseImg()
	return dbu
}

// SetProductDockerfile sets the "product_dockerfile" field.
func (dbu *DevBuildUpdate) SetProductDockerfile(s string) *DevBuildUpdate {
	dbu.mutation.SetProductDockerfile(s)
	return dbu
}

// SetNillableProductDockerfile sets the "product_dockerfile" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableProductDockerfile(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetProductDockerfile(*s)
	}
	return dbu
}

// ClearProductDockerfile clears the value of the "product_dockerfile" field.
func (dbu *DevBuildUpdate) ClearProductDockerfile() *DevBuildUpdate {
	dbu.mutation.ClearProductDockerfile()
	return dbu
}

// SetStatus sets the "status" field.
func (dbu *DevBuildUpdate) SetStatus(s string) *DevBuildUpdate {
	dbu.mutation.SetStatus(s)
	return dbu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableStatus(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetStatus(*s)
	}
	return dbu
}

// ClearStatus clears the value of the "status" field.
func (dbu *DevBuildUpdate) ClearStatus() *DevBuildUpdate {
	dbu.mutation.ClearStatus()
	return dbu
}

// SetErrMsg sets the "err_msg" field.
func (dbu *DevBuildUpdate) SetErrMsg(s string) *DevBuildUpdate {
	dbu.mutation.SetErrMsg(s)
	return dbu
}

// SetNillableErrMsg sets the "err_msg" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillableErrMsg(s *string) *DevBuildUpdate {
	if s != nil {
		dbu.SetErrMsg(*s)
	}
	return dbu
}

// ClearErrMsg clears the value of the "err_msg" field.
func (dbu *DevBuildUpdate) ClearErrMsg() *DevBuildUpdate {
	dbu.mutation.ClearErrMsg()
	return dbu
}

// SetPipelineBuildID sets the "pipeline_build_id" field.
func (dbu *DevBuildUpdate) SetPipelineBuildID(i int64) *DevBuildUpdate {
	dbu.mutation.ResetPipelineBuildID()
	dbu.mutation.SetPipelineBuildID(i)
	return dbu
}

// SetNillablePipelineBuildID sets the "pipeline_build_id" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillablePipelineBuildID(i *int64) *DevBuildUpdate {
	if i != nil {
		dbu.SetPipelineBuildID(*i)
	}
	return dbu
}

// AddPipelineBuildID adds i to the "pipeline_build_id" field.
func (dbu *DevBuildUpdate) AddPipelineBuildID(i int64) *DevBuildUpdate {
	dbu.mutation.AddPipelineBuildID(i)
	return dbu
}

// ClearPipelineBuildID clears the value of the "pipeline_build_id" field.
func (dbu *DevBuildUpdate) ClearPipelineBuildID() *DevBuildUpdate {
	dbu.mutation.ClearPipelineBuildID()
	return dbu
}

// SetPipelineStartAt sets the "pipeline_start_at" field.
func (dbu *DevBuildUpdate) SetPipelineStartAt(t time.Time) *DevBuildUpdate {
	dbu.mutation.SetPipelineStartAt(t)
	return dbu
}

// SetNillablePipelineStartAt sets the "pipeline_start_at" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillablePipelineStartAt(t *time.Time) *DevBuildUpdate {
	if t != nil {
		dbu.SetPipelineStartAt(*t)
	}
	return dbu
}

// ClearPipelineStartAt clears the value of the "pipeline_start_at" field.
func (dbu *DevBuildUpdate) ClearPipelineStartAt() *DevBuildUpdate {
	dbu.mutation.ClearPipelineStartAt()
	return dbu
}

// SetPipelineEndAt sets the "pipeline_end_at" field.
func (dbu *DevBuildUpdate) SetPipelineEndAt(t time.Time) *DevBuildUpdate {
	dbu.mutation.SetPipelineEndAt(t)
	return dbu
}

// SetNillablePipelineEndAt sets the "pipeline_end_at" field if the given value is not nil.
func (dbu *DevBuildUpdate) SetNillablePipelineEndAt(t *time.Time) *DevBuildUpdate {
	if t != nil {
		dbu.SetPipelineEndAt(*t)
	}
	return dbu
}

// ClearPipelineEndAt clears the value of the "pipeline_end_at" field.
func (dbu *DevBuildUpdate) ClearPipelineEndAt() *DevBuildUpdate {
	dbu.mutation.ClearPipelineEndAt()
	return dbu
}

// SetBuildReport sets the "build_report" field.
func (dbu *DevBuildUpdate) SetBuildReport(m map[string]interface{}) *DevBuildUpdate {
	dbu.mutation.SetBuildReport(m)
	return dbu
}

// ClearBuildReport clears the value of the "build_report" field.
func (dbu *DevBuildUpdate) ClearBuildReport() *DevBuildUpdate {
	dbu.mutation.ClearBuildReport()
	return dbu
}

// SetTektonStatus sets the "tekton_status" field.
func (dbu *DevBuildUpdate) SetTektonStatus(m map[string]interface{}) *DevBuildUpdate {
	dbu.mutation.SetTektonStatus(m)
	return dbu
}

// ClearTektonStatus clears the value of the "tekton_status" field.
func (dbu *DevBuildUpdate) ClearTektonStatus() *DevBuildUpdate {
	dbu.mutation.ClearTektonStatus()
	return dbu
}

// Mutation returns the DevBuildMutation object of the builder.
func (dbu *DevBuildUpdate) Mutation() *DevBuildMutation {
	return dbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dbu *DevBuildUpdate) Save(ctx context.Context) (int, error) {
	dbu.defaults()
	return withHooks(ctx, dbu.sqlSave, dbu.mutation, dbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dbu *DevBuildUpdate) SaveX(ctx context.Context) int {
	affected, err := dbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dbu *DevBuildUpdate) Exec(ctx context.Context) error {
	_, err := dbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dbu *DevBuildUpdate) ExecX(ctx context.Context) {
	if err := dbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dbu *DevBuildUpdate) defaults() {
	if _, ok := dbu.mutation.UpdatedAt(); !ok {
		v := devbuild.UpdateDefaultUpdatedAt()
		dbu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dbu *DevBuildUpdate) check() error {
	if v, ok := dbu.mutation.CreatedBy(); ok {
		if err := devbuild.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "DevBuild.created_by": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.Product(); ok {
		if err := devbuild.ProductValidator(v); err != nil {
			return &ValidationError{Name: "product", err: fmt.Errorf(`ent: validator failed for field "DevBuild.product": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.Edition(); ok {
		if err := devbuild.EditionValidator(v); err != nil {
			return &ValidationError{Name: "edition", err: fmt.Errorf(`ent: validator failed for field "DevBuild.edition": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.Version(); ok {
		if err := devbuild.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "DevBuild.version": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.GithubRepo(); ok {
		if err := devbuild.GithubRepoValidator(v); err != nil {
			return &ValidationError{Name: "github_repo", err: fmt.Errorf(`ent: validator failed for field "DevBuild.github_repo": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.GitRef(); ok {
		if err := devbuild.GitRefValidator(v); err != nil {
			return &ValidationError{Name: "git_ref", err: fmt.Errorf(`ent: validator failed for field "DevBuild.git_ref": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.GitHash(); ok {
		if err := devbuild.GitHashValidator(v); err != nil {
			return &ValidationError{Name: "git_hash", err: fmt.Errorf(`ent: validator failed for field "DevBuild.git_hash": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.PluginGitRef(); ok {
		if err := devbuild.PluginGitRefValidator(v); err != nil {
			return &ValidationError{Name: "plugin_git_ref", err: fmt.Errorf(`ent: validator failed for field "DevBuild.plugin_git_ref": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.TargetImg(); ok {
		if err := devbuild.TargetImgValidator(v); err != nil {
			return &ValidationError{Name: "target_img", err: fmt.Errorf(`ent: validator failed for field "DevBuild.target_img": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.PipelineEngine(); ok {
		if err := devbuild.PipelineEngineValidator(v); err != nil {
			return &ValidationError{Name: "pipeline_engine", err: fmt.Errorf(`ent: validator failed for field "DevBuild.pipeline_engine": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.BuilderImg(); ok {
		if err := devbuild.BuilderImgValidator(v); err != nil {
			return &ValidationError{Name: "builder_img", err: fmt.Errorf(`ent: validator failed for field "DevBuild.builder_img": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.BuildEnv(); ok {
		if err := devbuild.BuildEnvValidator(v); err != nil {
			return &ValidationError{Name: "build_env", err: fmt.Errorf(`ent: validator failed for field "DevBuild.build_env": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.Features(); ok {
		if err := devbuild.FeaturesValidator(v); err != nil {
			return &ValidationError{Name: "features", err: fmt.Errorf(`ent: validator failed for field "DevBuild.features": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.ProductBaseImg(); ok {
		if err := devbuild.ProductBaseImgValidator(v); err != nil {
			return &ValidationError{Name: "product_base_img", err: fmt.Errorf(`ent: validator failed for field "DevBuild.product_base_img": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.ProductDockerfile(); ok {
		if err := devbuild.ProductDockerfileValidator(v); err != nil {
			return &ValidationError{Name: "product_dockerfile", err: fmt.Errorf(`ent: validator failed for field "DevBuild.product_dockerfile": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.Status(); ok {
		if err := devbuild.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DevBuild.status": %w`, err)}
		}
	}
	if v, ok := dbu.mutation.ErrMsg(); ok {
		if err := devbuild.ErrMsgValidator(v); err != nil {
			return &ValidationError{Name: "err_msg", err: fmt.Errorf(`ent: validator failed for field "DevBuild.err_msg": %w`, err)}
		}
	}
	return nil
}

func (dbu *DevBuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(devbuild.Table, devbuild.Columns, sqlgraph.NewFieldSpec(devbuild.FieldID, field.TypeInt))
	if ps := dbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dbu.mutation.CreatedBy(); ok {
		_spec.SetField(devbuild.FieldCreatedBy, field.TypeString, value)
	}
	if dbu.mutation.CreatedByCleared() {
		_spec.ClearField(devbuild.FieldCreatedBy, field.TypeString)
	}
	if value, ok := dbu.mutation.CreatedAt(); ok {
		_spec.SetField(devbuild.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dbu.mutation.UpdatedAt(); ok {
		_spec.SetField(devbuild.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dbu.mutation.Product(); ok {
		_spec.SetField(devbuild.FieldProduct, field.TypeString, value)
	}
	if dbu.mutation.ProductCleared() {
		_spec.ClearField(devbuild.FieldProduct, field.TypeString)
	}
	if value, ok := dbu.mutation.Edition(); ok {
		_spec.SetField(devbuild.FieldEdition, field.TypeString, value)
	}
	if dbu.mutation.EditionCleared() {
		_spec.ClearField(devbuild.FieldEdition, field.TypeString)
	}
	if value, ok := dbu.mutation.Version(); ok {
		_spec.SetField(devbuild.FieldVersion, field.TypeString, value)
	}
	if dbu.mutation.VersionCleared() {
		_spec.ClearField(devbuild.FieldVersion, field.TypeString)
	}
	if value, ok := dbu.mutation.GithubRepo(); ok {
		_spec.SetField(devbuild.FieldGithubRepo, field.TypeString, value)
	}
	if dbu.mutation.GithubRepoCleared() {
		_spec.ClearField(devbuild.FieldGithubRepo, field.TypeString)
	}
	if value, ok := dbu.mutation.GitRef(); ok {
		_spec.SetField(devbuild.FieldGitRef, field.TypeString, value)
	}
	if dbu.mutation.GitRefCleared() {
		_spec.ClearField(devbuild.FieldGitRef, field.TypeString)
	}
	if value, ok := dbu.mutation.GitHash(); ok {
		_spec.SetField(devbuild.FieldGitHash, field.TypeString, value)
	}
	if dbu.mutation.GitHashCleared() {
		_spec.ClearField(devbuild.FieldGitHash, field.TypeString)
	}
	if value, ok := dbu.mutation.PluginGitRef(); ok {
		_spec.SetField(devbuild.FieldPluginGitRef, field.TypeString, value)
	}
	if dbu.mutation.PluginGitRefCleared() {
		_spec.ClearField(devbuild.FieldPluginGitRef, field.TypeString)
	}
	if value, ok := dbu.mutation.IsHotfix(); ok {
		_spec.SetField(devbuild.FieldIsHotfix, field.TypeBool, value)
	}
	if value, ok := dbu.mutation.IsPushGcr(); ok {
		_spec.SetField(devbuild.FieldIsPushGcr, field.TypeBool, value)
	}
	if dbu.mutation.IsPushGcrCleared() {
		_spec.ClearField(devbuild.FieldIsPushGcr, field.TypeBool)
	}
	if value, ok := dbu.mutation.TargetImg(); ok {
		_spec.SetField(devbuild.FieldTargetImg, field.TypeString, value)
	}
	if dbu.mutation.TargetImgCleared() {
		_spec.ClearField(devbuild.FieldTargetImg, field.TypeString)
	}
	if value, ok := dbu.mutation.PipelineEngine(); ok {
		_spec.SetField(devbuild.FieldPipelineEngine, field.TypeString, value)
	}
	if dbu.mutation.PipelineEngineCleared() {
		_spec.ClearField(devbuild.FieldPipelineEngine, field.TypeString)
	}
	if value, ok := dbu.mutation.BuilderImg(); ok {
		_spec.SetField(devbuild.FieldBuilderImg, field.TypeString, value)
	}
	if dbu.mutation.BuilderImgCleared() {
		_spec.ClearField(devbuild.FieldBuilderImg, field.TypeString)
	}
	if value, ok := dbu.mutation.BuildEnv(); ok {
		_spec.SetField(devbuild.FieldBuildEnv, field.TypeString, value)
	}
	if dbu.mutation.BuildEnvCleared() {
		_spec.ClearField(devbuild.FieldBuildEnv, field.TypeString)
	}
	if value, ok := dbu.mutation.Features(); ok {
		_spec.SetField(devbuild.FieldFeatures, field.TypeString, value)
	}
	if dbu.mutation.FeaturesCleared() {
		_spec.ClearField(devbuild.FieldFeatures, field.TypeString)
	}
	if value, ok := dbu.mutation.ProductBaseImg(); ok {
		_spec.SetField(devbuild.FieldProductBaseImg, field.TypeString, value)
	}
	if dbu.mutation.ProductBaseImgCleared() {
		_spec.ClearField(devbuild.FieldProductBaseImg, field.TypeString)
	}
	if value, ok := dbu.mutation.ProductDockerfile(); ok {
		_spec.SetField(devbuild.FieldProductDockerfile, field.TypeString, value)
	}
	if dbu.mutation.ProductDockerfileCleared() {
		_spec.ClearField(devbuild.FieldProductDockerfile, field.TypeString)
	}
	if value, ok := dbu.mutation.Status(); ok {
		_spec.SetField(devbuild.FieldStatus, field.TypeString, value)
	}
	if dbu.mutation.StatusCleared() {
		_spec.ClearField(devbuild.FieldStatus, field.TypeString)
	}
	if value, ok := dbu.mutation.ErrMsg(); ok {
		_spec.SetField(devbuild.FieldErrMsg, field.TypeString, value)
	}
	if dbu.mutation.ErrMsgCleared() {
		_spec.ClearField(devbuild.FieldErrMsg, field.TypeString)
	}
	if value, ok := dbu.mutation.PipelineBuildID(); ok {
		_spec.SetField(devbuild.FieldPipelineBuildID, field.TypeInt64, value)
	}
	if value, ok := dbu.mutation.AddedPipelineBuildID(); ok {
		_spec.AddField(devbuild.FieldPipelineBuildID, field.TypeInt64, value)
	}
	if dbu.mutation.PipelineBuildIDCleared() {
		_spec.ClearField(devbuild.FieldPipelineBuildID, field.TypeInt64)
	}
	if value, ok := dbu.mutation.PipelineStartAt(); ok {
		_spec.SetField(devbuild.FieldPipelineStartAt, field.TypeTime, value)
	}
	if dbu.mutation.PipelineStartAtCleared() {
		_spec.ClearField(devbuild.FieldPipelineStartAt, field.TypeTime)
	}
	if value, ok := dbu.mutation.PipelineEndAt(); ok {
		_spec.SetField(devbuild.FieldPipelineEndAt, field.TypeTime, value)
	}
	if dbu.mutation.PipelineEndAtCleared() {
		_spec.ClearField(devbuild.FieldPipelineEndAt, field.TypeTime)
	}
	if value, ok := dbu.mutation.BuildReport(); ok {
		_spec.SetField(devbuild.FieldBuildReport, field.TypeJSON, value)
	}
	if dbu.mutation.BuildReportCleared() {
		_spec.ClearField(devbuild.FieldBuildReport, field.TypeJSON)
	}
	if value, ok := dbu.mutation.TektonStatus(); ok {
		_spec.SetField(devbuild.FieldTektonStatus, field.TypeJSON, value)
	}
	if dbu.mutation.TektonStatusCleared() {
		_spec.ClearField(devbuild.FieldTektonStatus, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devbuild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dbu.mutation.done = true
	return n, nil
}

// DevBuildUpdateOne is the builder for updating a single DevBuild entity.
type DevBuildUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DevBuildMutation
}

// SetCreatedBy sets the "created_by" field.
func (dbuo *DevBuildUpdateOne) SetCreatedBy(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetCreatedBy(s)
	return dbuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableCreatedBy(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetCreatedBy(*s)
	}
	return dbuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (dbuo *DevBuildUpdateOne) ClearCreatedBy() *DevBuildUpdateOne {
	dbuo.mutation.ClearCreatedBy()
	return dbuo
}

// SetCreatedAt sets the "created_at" field.
func (dbuo *DevBuildUpdateOne) SetCreatedAt(t time.Time) *DevBuildUpdateOne {
	dbuo.mutation.SetCreatedAt(t)
	return dbuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableCreatedAt(t *time.Time) *DevBuildUpdateOne {
	if t != nil {
		dbuo.SetCreatedAt(*t)
	}
	return dbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dbuo *DevBuildUpdateOne) SetUpdatedAt(t time.Time) *DevBuildUpdateOne {
	dbuo.mutation.SetUpdatedAt(t)
	return dbuo
}

// SetProduct sets the "product" field.
func (dbuo *DevBuildUpdateOne) SetProduct(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetProduct(s)
	return dbuo
}

// SetNillableProduct sets the "product" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableProduct(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetProduct(*s)
	}
	return dbuo
}

// ClearProduct clears the value of the "product" field.
func (dbuo *DevBuildUpdateOne) ClearProduct() *DevBuildUpdateOne {
	dbuo.mutation.ClearProduct()
	return dbuo
}

// SetEdition sets the "edition" field.
func (dbuo *DevBuildUpdateOne) SetEdition(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetEdition(s)
	return dbuo
}

// SetNillableEdition sets the "edition" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableEdition(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetEdition(*s)
	}
	return dbuo
}

// ClearEdition clears the value of the "edition" field.
func (dbuo *DevBuildUpdateOne) ClearEdition() *DevBuildUpdateOne {
	dbuo.mutation.ClearEdition()
	return dbuo
}

// SetVersion sets the "version" field.
func (dbuo *DevBuildUpdateOne) SetVersion(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetVersion(s)
	return dbuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableVersion(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetVersion(*s)
	}
	return dbuo
}

// ClearVersion clears the value of the "version" field.
func (dbuo *DevBuildUpdateOne) ClearVersion() *DevBuildUpdateOne {
	dbuo.mutation.ClearVersion()
	return dbuo
}

// SetGithubRepo sets the "github_repo" field.
func (dbuo *DevBuildUpdateOne) SetGithubRepo(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetGithubRepo(s)
	return dbuo
}

// SetNillableGithubRepo sets the "github_repo" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableGithubRepo(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetGithubRepo(*s)
	}
	return dbuo
}

// ClearGithubRepo clears the value of the "github_repo" field.
func (dbuo *DevBuildUpdateOne) ClearGithubRepo() *DevBuildUpdateOne {
	dbuo.mutation.ClearGithubRepo()
	return dbuo
}

// SetGitRef sets the "git_ref" field.
func (dbuo *DevBuildUpdateOne) SetGitRef(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetGitRef(s)
	return dbuo
}

// SetNillableGitRef sets the "git_ref" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableGitRef(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetGitRef(*s)
	}
	return dbuo
}

// ClearGitRef clears the value of the "git_ref" field.
func (dbuo *DevBuildUpdateOne) ClearGitRef() *DevBuildUpdateOne {
	dbuo.mutation.ClearGitRef()
	return dbuo
}

// SetGitHash sets the "git_hash" field.
func (dbuo *DevBuildUpdateOne) SetGitHash(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetGitHash(s)
	return dbuo
}

// SetNillableGitHash sets the "git_hash" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableGitHash(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetGitHash(*s)
	}
	return dbuo
}

// ClearGitHash clears the value of the "git_hash" field.
func (dbuo *DevBuildUpdateOne) ClearGitHash() *DevBuildUpdateOne {
	dbuo.mutation.ClearGitHash()
	return dbuo
}

// SetPluginGitRef sets the "plugin_git_ref" field.
func (dbuo *DevBuildUpdateOne) SetPluginGitRef(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetPluginGitRef(s)
	return dbuo
}

// SetNillablePluginGitRef sets the "plugin_git_ref" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillablePluginGitRef(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetPluginGitRef(*s)
	}
	return dbuo
}

// ClearPluginGitRef clears the value of the "plugin_git_ref" field.
func (dbuo *DevBuildUpdateOne) ClearPluginGitRef() *DevBuildUpdateOne {
	dbuo.mutation.ClearPluginGitRef()
	return dbuo
}

// SetIsHotfix sets the "is_hotfix" field.
func (dbuo *DevBuildUpdateOne) SetIsHotfix(b bool) *DevBuildUpdateOne {
	dbuo.mutation.SetIsHotfix(b)
	return dbuo
}

// SetNillableIsHotfix sets the "is_hotfix" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableIsHotfix(b *bool) *DevBuildUpdateOne {
	if b != nil {
		dbuo.SetIsHotfix(*b)
	}
	return dbuo
}

// SetIsPushGcr sets the "is_push_gcr" field.
func (dbuo *DevBuildUpdateOne) SetIsPushGcr(b bool) *DevBuildUpdateOne {
	dbuo.mutation.SetIsPushGcr(b)
	return dbuo
}

// SetNillableIsPushGcr sets the "is_push_gcr" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableIsPushGcr(b *bool) *DevBuildUpdateOne {
	if b != nil {
		dbuo.SetIsPushGcr(*b)
	}
	return dbuo
}

// ClearIsPushGcr clears the value of the "is_push_gcr" field.
func (dbuo *DevBuildUpdateOne) ClearIsPushGcr() *DevBuildUpdateOne {
	dbuo.mutation.ClearIsPushGcr()
	return dbuo
}

// SetTargetImg sets the "target_img" field.
func (dbuo *DevBuildUpdateOne) SetTargetImg(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetTargetImg(s)
	return dbuo
}

// SetNillableTargetImg sets the "target_img" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableTargetImg(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetTargetImg(*s)
	}
	return dbuo
}

// ClearTargetImg clears the value of the "target_img" field.
func (dbuo *DevBuildUpdateOne) ClearTargetImg() *DevBuildUpdateOne {
	dbuo.mutation.ClearTargetImg()
	return dbuo
}

// SetPipelineEngine sets the "pipeline_engine" field.
func (dbuo *DevBuildUpdateOne) SetPipelineEngine(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetPipelineEngine(s)
	return dbuo
}

// SetNillablePipelineEngine sets the "pipeline_engine" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillablePipelineEngine(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetPipelineEngine(*s)
	}
	return dbuo
}

// ClearPipelineEngine clears the value of the "pipeline_engine" field.
func (dbuo *DevBuildUpdateOne) ClearPipelineEngine() *DevBuildUpdateOne {
	dbuo.mutation.ClearPipelineEngine()
	return dbuo
}

// SetBuilderImg sets the "builder_img" field.
func (dbuo *DevBuildUpdateOne) SetBuilderImg(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetBuilderImg(s)
	return dbuo
}

// SetNillableBuilderImg sets the "builder_img" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableBuilderImg(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetBuilderImg(*s)
	}
	return dbuo
}

// ClearBuilderImg clears the value of the "builder_img" field.
func (dbuo *DevBuildUpdateOne) ClearBuilderImg() *DevBuildUpdateOne {
	dbuo.mutation.ClearBuilderImg()
	return dbuo
}

// SetBuildEnv sets the "build_env" field.
func (dbuo *DevBuildUpdateOne) SetBuildEnv(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetBuildEnv(s)
	return dbuo
}

// SetNillableBuildEnv sets the "build_env" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableBuildEnv(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetBuildEnv(*s)
	}
	return dbuo
}

// ClearBuildEnv clears the value of the "build_env" field.
func (dbuo *DevBuildUpdateOne) ClearBuildEnv() *DevBuildUpdateOne {
	dbuo.mutation.ClearBuildEnv()
	return dbuo
}

// SetFeatures sets the "features" field.
func (dbuo *DevBuildUpdateOne) SetFeatures(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetFeatures(s)
	return dbuo
}

// SetNillableFeatures sets the "features" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableFeatures(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetFeatures(*s)
	}
	return dbuo
}

// ClearFeatures clears the value of the "features" field.
func (dbuo *DevBuildUpdateOne) ClearFeatures() *DevBuildUpdateOne {
	dbuo.mutation.ClearFeatures()
	return dbuo
}

// SetProductBaseImg sets the "product_base_img" field.
func (dbuo *DevBuildUpdateOne) SetProductBaseImg(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetProductBaseImg(s)
	return dbuo
}

// SetNillableProductBaseImg sets the "product_base_img" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableProductBaseImg(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetProductBaseImg(*s)
	}
	return dbuo
}

// ClearProductBaseImg clears the value of the "product_base_img" field.
func (dbuo *DevBuildUpdateOne) ClearProductBaseImg() *DevBuildUpdateOne {
	dbuo.mutation.ClearProductBaseImg()
	return dbuo
}

// SetProductDockerfile sets the "product_dockerfile" field.
func (dbuo *DevBuildUpdateOne) SetProductDockerfile(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetProductDockerfile(s)
	return dbuo
}

// SetNillableProductDockerfile sets the "product_dockerfile" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableProductDockerfile(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetProductDockerfile(*s)
	}
	return dbuo
}

// ClearProductDockerfile clears the value of the "product_dockerfile" field.
func (dbuo *DevBuildUpdateOne) ClearProductDockerfile() *DevBuildUpdateOne {
	dbuo.mutation.ClearProductDockerfile()
	return dbuo
}

// SetStatus sets the "status" field.
func (dbuo *DevBuildUpdateOne) SetStatus(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetStatus(s)
	return dbuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableStatus(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetStatus(*s)
	}
	return dbuo
}

// ClearStatus clears the value of the "status" field.
func (dbuo *DevBuildUpdateOne) ClearStatus() *DevBuildUpdateOne {
	dbuo.mutation.ClearStatus()
	return dbuo
}

// SetErrMsg sets the "err_msg" field.
func (dbuo *DevBuildUpdateOne) SetErrMsg(s string) *DevBuildUpdateOne {
	dbuo.mutation.SetErrMsg(s)
	return dbuo
}

// SetNillableErrMsg sets the "err_msg" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillableErrMsg(s *string) *DevBuildUpdateOne {
	if s != nil {
		dbuo.SetErrMsg(*s)
	}
	return dbuo
}

// ClearErrMsg clears the value of the "err_msg" field.
func (dbuo *DevBuildUpdateOne) ClearErrMsg() *DevBuildUpdateOne {
	dbuo.mutation.ClearErrMsg()
	return dbuo
}

// SetPipelineBuildID sets the "pipeline_build_id" field.
func (dbuo *DevBuildUpdateOne) SetPipelineBuildID(i int64) *DevBuildUpdateOne {
	dbuo.mutation.ResetPipelineBuildID()
	dbuo.mutation.SetPipelineBuildID(i)
	return dbuo
}

// SetNillablePipelineBuildID sets the "pipeline_build_id" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillablePipelineBuildID(i *int64) *DevBuildUpdateOne {
	if i != nil {
		dbuo.SetPipelineBuildID(*i)
	}
	return dbuo
}

// AddPipelineBuildID adds i to the "pipeline_build_id" field.
func (dbuo *DevBuildUpdateOne) AddPipelineBuildID(i int64) *DevBuildUpdateOne {
	dbuo.mutation.AddPipelineBuildID(i)
	return dbuo
}

// ClearPipelineBuildID clears the value of the "pipeline_build_id" field.
func (dbuo *DevBuildUpdateOne) ClearPipelineBuildID() *DevBuildUpdateOne {
	dbuo.mutation.ClearPipelineBuildID()
	return dbuo
}

// SetPipelineStartAt sets the "pipeline_start_at" field.
func (dbuo *DevBuildUpdateOne) SetPipelineStartAt(t time.Time) *DevBuildUpdateOne {
	dbuo.mutation.SetPipelineStartAt(t)
	return dbuo
}

// SetNillablePipelineStartAt sets the "pipeline_start_at" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillablePipelineStartAt(t *time.Time) *DevBuildUpdateOne {
	if t != nil {
		dbuo.SetPipelineStartAt(*t)
	}
	return dbuo
}

// ClearPipelineStartAt clears the value of the "pipeline_start_at" field.
func (dbuo *DevBuildUpdateOne) ClearPipelineStartAt() *DevBuildUpdateOne {
	dbuo.mutation.ClearPipelineStartAt()
	return dbuo
}

// SetPipelineEndAt sets the "pipeline_end_at" field.
func (dbuo *DevBuildUpdateOne) SetPipelineEndAt(t time.Time) *DevBuildUpdateOne {
	dbuo.mutation.SetPipelineEndAt(t)
	return dbuo
}

// SetNillablePipelineEndAt sets the "pipeline_end_at" field if the given value is not nil.
func (dbuo *DevBuildUpdateOne) SetNillablePipelineEndAt(t *time.Time) *DevBuildUpdateOne {
	if t != nil {
		dbuo.SetPipelineEndAt(*t)
	}
	return dbuo
}

// ClearPipelineEndAt clears the value of the "pipeline_end_at" field.
func (dbuo *DevBuildUpdateOne) ClearPipelineEndAt() *DevBuildUpdateOne {
	dbuo.mutation.ClearPipelineEndAt()
	return dbuo
}

// SetBuildReport sets the "build_report" field.
func (dbuo *DevBuildUpdateOne) SetBuildReport(m map[string]interface{}) *DevBuildUpdateOne {
	dbuo.mutation.SetBuildReport(m)
	return dbuo
}

// ClearBuildReport clears the value of the "build_report" field.
func (dbuo *DevBuildUpdateOne) ClearBuildReport() *DevBuildUpdateOne {
	dbuo.mutation.ClearBuildReport()
	return dbuo
}

// SetTektonStatus sets the "tekton_status" field.
func (dbuo *DevBuildUpdateOne) SetTektonStatus(m map[string]interface{}) *DevBuildUpdateOne {
	dbuo.mutation.SetTektonStatus(m)
	return dbuo
}

// ClearTektonStatus clears the value of the "tekton_status" field.
func (dbuo *DevBuildUpdateOne) ClearTektonStatus() *DevBuildUpdateOne {
	dbuo.mutation.ClearTektonStatus()
	return dbuo
}

// Mutation returns the DevBuildMutation object of the builder.
func (dbuo *DevBuildUpdateOne) Mutation() *DevBuildMutation {
	return dbuo.mutation
}

// Where appends a list predicates to the DevBuildUpdate builder.
func (dbuo *DevBuildUpdateOne) Where(ps ...predicate.DevBuild) *DevBuildUpdateOne {
	dbuo.mutation.Where(ps...)
	return dbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dbuo *DevBuildUpdateOne) Select(field string, fields ...string) *DevBuildUpdateOne {
	dbuo.fields = append([]string{field}, fields...)
	return dbuo
}

// Save executes the query and returns the updated DevBuild entity.
func (dbuo *DevBuildUpdateOne) Save(ctx context.Context) (*DevBuild, error) {
	dbuo.defaults()
	return withHooks(ctx, dbuo.sqlSave, dbuo.mutation, dbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dbuo *DevBuildUpdateOne) SaveX(ctx context.Context) *DevBuild {
	node, err := dbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dbuo *DevBuildUpdateOne) Exec(ctx context.Context) error {
	_, err := dbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dbuo *DevBuildUpdateOne) ExecX(ctx context.Context) {
	if err := dbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dbuo *DevBuildUpdateOne) defaults() {
	if _, ok := dbuo.mutation.UpdatedAt(); !ok {
		v := devbuild.UpdateDefaultUpdatedAt()
		dbuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dbuo *DevBuildUpdateOne) check() error {
	if v, ok := dbuo.mutation.CreatedBy(); ok {
		if err := devbuild.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "DevBuild.created_by": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.Product(); ok {
		if err := devbuild.ProductValidator(v); err != nil {
			return &ValidationError{Name: "product", err: fmt.Errorf(`ent: validator failed for field "DevBuild.product": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.Edition(); ok {
		if err := devbuild.EditionValidator(v); err != nil {
			return &ValidationError{Name: "edition", err: fmt.Errorf(`ent: validator failed for field "DevBuild.edition": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.Version(); ok {
		if err := devbuild.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "DevBuild.version": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.GithubRepo(); ok {
		if err := devbuild.GithubRepoValidator(v); err != nil {
			return &ValidationError{Name: "github_repo", err: fmt.Errorf(`ent: validator failed for field "DevBuild.github_repo": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.GitRef(); ok {
		if err := devbuild.GitRefValidator(v); err != nil {
			return &ValidationError{Name: "git_ref", err: fmt.Errorf(`ent: validator failed for field "DevBuild.git_ref": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.GitHash(); ok {
		if err := devbuild.GitHashValidator(v); err != nil {
			return &ValidationError{Name: "git_hash", err: fmt.Errorf(`ent: validator failed for field "DevBuild.git_hash": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.PluginGitRef(); ok {
		if err := devbuild.PluginGitRefValidator(v); err != nil {
			return &ValidationError{Name: "plugin_git_ref", err: fmt.Errorf(`ent: validator failed for field "DevBuild.plugin_git_ref": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.TargetImg(); ok {
		if err := devbuild.TargetImgValidator(v); err != nil {
			return &ValidationError{Name: "target_img", err: fmt.Errorf(`ent: validator failed for field "DevBuild.target_img": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.PipelineEngine(); ok {
		if err := devbuild.PipelineEngineValidator(v); err != nil {
			return &ValidationError{Name: "pipeline_engine", err: fmt.Errorf(`ent: validator failed for field "DevBuild.pipeline_engine": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.BuilderImg(); ok {
		if err := devbuild.BuilderImgValidator(v); err != nil {
			return &ValidationError{Name: "builder_img", err: fmt.Errorf(`ent: validator failed for field "DevBuild.builder_img": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.BuildEnv(); ok {
		if err := devbuild.BuildEnvValidator(v); err != nil {
			return &ValidationError{Name: "build_env", err: fmt.Errorf(`ent: validator failed for field "DevBuild.build_env": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.Features(); ok {
		if err := devbuild.FeaturesValidator(v); err != nil {
			return &ValidationError{Name: "features", err: fmt.Errorf(`ent: validator failed for field "DevBuild.features": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.ProductBaseImg(); ok {
		if err := devbuild.ProductBaseImgValidator(v); err != nil {
			return &ValidationError{Name: "product_base_img", err: fmt.Errorf(`ent: validator failed for field "DevBuild.product_base_img": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.ProductDockerfile(); ok {
		if err := devbuild.ProductDockerfileValidator(v); err != nil {
			return &ValidationError{Name: "product_dockerfile", err: fmt.Errorf(`ent: validator failed for field "DevBuild.product_dockerfile": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.Status(); ok {
		if err := devbuild.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DevBuild.status": %w`, err)}
		}
	}
	if v, ok := dbuo.mutation.ErrMsg(); ok {
		if err := devbuild.ErrMsgValidator(v); err != nil {
			return &ValidationError{Name: "err_msg", err: fmt.Errorf(`ent: validator failed for field "DevBuild.err_msg": %w`, err)}
		}
	}
	return nil
}

func (dbuo *DevBuildUpdateOne) sqlSave(ctx context.Context) (_node *DevBuild, err error) {
	if err := dbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(devbuild.Table, devbuild.Columns, sqlgraph.NewFieldSpec(devbuild.FieldID, field.TypeInt))
	id, ok := dbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DevBuild.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devbuild.FieldID)
		for _, f := range fields {
			if !devbuild.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != devbuild.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dbuo.mutation.CreatedBy(); ok {
		_spec.SetField(devbuild.FieldCreatedBy, field.TypeString, value)
	}
	if dbuo.mutation.CreatedByCleared() {
		_spec.ClearField(devbuild.FieldCreatedBy, field.TypeString)
	}
	if value, ok := dbuo.mutation.CreatedAt(); ok {
		_spec.SetField(devbuild.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(devbuild.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dbuo.mutation.Product(); ok {
		_spec.SetField(devbuild.FieldProduct, field.TypeString, value)
	}
	if dbuo.mutation.ProductCleared() {
		_spec.ClearField(devbuild.FieldProduct, field.TypeString)
	}
	if value, ok := dbuo.mutation.Edition(); ok {
		_spec.SetField(devbuild.FieldEdition, field.TypeString, value)
	}
	if dbuo.mutation.EditionCleared() {
		_spec.ClearField(devbuild.FieldEdition, field.TypeString)
	}
	if value, ok := dbuo.mutation.Version(); ok {
		_spec.SetField(devbuild.FieldVersion, field.TypeString, value)
	}
	if dbuo.mutation.VersionCleared() {
		_spec.ClearField(devbuild.FieldVersion, field.TypeString)
	}
	if value, ok := dbuo.mutation.GithubRepo(); ok {
		_spec.SetField(devbuild.FieldGithubRepo, field.TypeString, value)
	}
	if dbuo.mutation.GithubRepoCleared() {
		_spec.ClearField(devbuild.FieldGithubRepo, field.TypeString)
	}
	if value, ok := dbuo.mutation.GitRef(); ok {
		_spec.SetField(devbuild.FieldGitRef, field.TypeString, value)
	}
	if dbuo.mutation.GitRefCleared() {
		_spec.ClearField(devbuild.FieldGitRef, field.TypeString)
	}
	if value, ok := dbuo.mutation.GitHash(); ok {
		_spec.SetField(devbuild.FieldGitHash, field.TypeString, value)
	}
	if dbuo.mutation.GitHashCleared() {
		_spec.ClearField(devbuild.FieldGitHash, field.TypeString)
	}
	if value, ok := dbuo.mutation.PluginGitRef(); ok {
		_spec.SetField(devbuild.FieldPluginGitRef, field.TypeString, value)
	}
	if dbuo.mutation.PluginGitRefCleared() {
		_spec.ClearField(devbuild.FieldPluginGitRef, field.TypeString)
	}
	if value, ok := dbuo.mutation.IsHotfix(); ok {
		_spec.SetField(devbuild.FieldIsHotfix, field.TypeBool, value)
	}
	if value, ok := dbuo.mutation.IsPushGcr(); ok {
		_spec.SetField(devbuild.FieldIsPushGcr, field.TypeBool, value)
	}
	if dbuo.mutation.IsPushGcrCleared() {
		_spec.ClearField(devbuild.FieldIsPushGcr, field.TypeBool)
	}
	if value, ok := dbuo.mutation.TargetImg(); ok {
		_spec.SetField(devbuild.FieldTargetImg, field.TypeString, value)
	}
	if dbuo.mutation.TargetImgCleared() {
		_spec.ClearField(devbuild.FieldTargetImg, field.TypeString)
	}
	if value, ok := dbuo.mutation.PipelineEngine(); ok {
		_spec.SetField(devbuild.FieldPipelineEngine, field.TypeString, value)
	}
	if dbuo.mutation.PipelineEngineCleared() {
		_spec.ClearField(devbuild.FieldPipelineEngine, field.TypeString)
	}
	if value, ok := dbuo.mutation.BuilderImg(); ok {
		_spec.SetField(devbuild.FieldBuilderImg, field.TypeString, value)
	}
	if dbuo.mutation.BuilderImgCleared() {
		_spec.ClearField(devbuild.FieldBuilderImg, field.TypeString)
	}
	if value, ok := dbuo.mutation.BuildEnv(); ok {
		_spec.SetField(devbuild.FieldBuildEnv, field.TypeString, value)
	}
	if dbuo.mutation.BuildEnvCleared() {
		_spec.ClearField(devbuild.FieldBuildEnv, field.TypeString)
	}
	if value, ok := dbuo.mutation.Features(); ok {
		_spec.SetField(devbuild.FieldFeatures, field.TypeString, value)
	}
	if dbuo.mutation.FeaturesCleared() {
		_spec.ClearField(devbuild.FieldFeatures, field.TypeString)
	}
	if value, ok := dbuo.mutation.ProductBaseImg(); ok {
		_spec.SetField(devbuild.FieldProductBaseImg, field.TypeString, value)
	}
	if dbuo.mutation.ProductBaseImgCleared() {
		_spec.ClearField(devbuild.FieldProductBaseImg, field.TypeString)
	}
	if value, ok := dbuo.mutation.ProductDockerfile(); ok {
		_spec.SetField(devbuild.FieldProductDockerfile, field.TypeString, value)
	}
	if dbuo.mutation.ProductDockerfileCleared() {
		_spec.ClearField(devbuild.FieldProductDockerfile, field.TypeString)
	}
	if value, ok := dbuo.mutation.Status(); ok {
		_spec.SetField(devbuild.FieldStatus, field.TypeString, value)
	}
	if dbuo.mutation.StatusCleared() {
		_spec.ClearField(devbuild.FieldStatus, field.TypeString)
	}
	if value, ok := dbuo.mutation.ErrMsg(); ok {
		_spec.SetField(devbuild.FieldErrMsg, field.TypeString, value)
	}
	if dbuo.mutation.ErrMsgCleared() {
		_spec.ClearField(devbuild.FieldErrMsg, field.TypeString)
	}
	if value, ok := dbuo.mutation.PipelineBuildID(); ok {
		_spec.SetField(devbuild.FieldPipelineBuildID, field.TypeInt64, value)
	}
	if value, ok := dbuo.mutation.AddedPipelineBuildID(); ok {
		_spec.AddField(devbuild.FieldPipelineBuildID, field.TypeInt64, value)
	}
	if dbuo.mutation.PipelineBuildIDCleared() {
		_spec.ClearField(devbuild.FieldPipelineBuildID, field.TypeInt64)
	}
	if value, ok := dbuo.mutation.PipelineStartAt(); ok {
		_spec.SetField(devbuild.FieldPipelineStartAt, field.TypeTime, value)
	}
	if dbuo.mutation.PipelineStartAtCleared() {
		_spec.ClearField(devbuild.FieldPipelineStartAt, field.TypeTime)
	}
	if value, ok := dbuo.mutation.PipelineEndAt(); ok {
		_spec.SetField(devbuild.FieldPipelineEndAt, field.TypeTime, value)
	}
	if dbuo.mutation.PipelineEndAtCleared() {
		_spec.ClearField(devbuild.FieldPipelineEndAt, field.TypeTime)
	}
	if value, ok := dbuo.mutation.BuildReport(); ok {
		_spec.SetField(devbuild.FieldBuildReport, field.TypeJSON, value)
	}
	if dbuo.mutation.BuildReportCleared() {
		_spec.ClearField(devbuild.FieldBuildReport, field.TypeJSON)
	}
	if value, ok := dbuo.mutation.TektonStatus(); ok {
		_spec.SetField(devbuild.FieldTektonStatus, field.TypeJSON, value)
	}
	if dbuo.mutation.TektonStatusCleared() {
		_spec.ClearField(devbuild.FieldTektonStatus, field.TypeJSON)
	}
	_node = &DevBuild{config: dbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devbuild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dbuo.mutation.done = true
	return _node, nil
}
