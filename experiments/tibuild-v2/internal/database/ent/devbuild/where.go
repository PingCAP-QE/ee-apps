// Code generated by ent, DO NOT EDIT.

package devbuild

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/PingCAP-QE/ee-apps/tibuild/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldUpdatedAt, v))
}

// Product applies equality check predicate on the "product" field. It's identical to ProductEQ.
func Product(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldProduct, v))
}

// Edition applies equality check predicate on the "edition" field. It's identical to EditionEQ.
func Edition(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldEdition, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldVersion, v))
}

// GithubRepo applies equality check predicate on the "github_repo" field. It's identical to GithubRepoEQ.
func GithubRepo(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldGithubRepo, v))
}

// GitRef applies equality check predicate on the "git_ref" field. It's identical to GitRefEQ.
func GitRef(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldGitRef, v))
}

// GitSha applies equality check predicate on the "git_sha" field. It's identical to GitShaEQ.
func GitSha(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldGitSha, v))
}

// PluginGitRef applies equality check predicate on the "plugin_git_ref" field. It's identical to PluginGitRefEQ.
func PluginGitRef(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldPluginGitRef, v))
}

// IsHotfix applies equality check predicate on the "is_hotfix" field. It's identical to IsHotfixEQ.
func IsHotfix(v bool) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldIsHotfix, v))
}

// IsPushGcr applies equality check predicate on the "is_push_gcr" field. It's identical to IsPushGcrEQ.
func IsPushGcr(v bool) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldIsPushGcr, v))
}

// TargetImg applies equality check predicate on the "target_img" field. It's identical to TargetImgEQ.
func TargetImg(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldTargetImg, v))
}

// PipelineEngine applies equality check predicate on the "pipeline_engine" field. It's identical to PipelineEngineEQ.
func PipelineEngine(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldPipelineEngine, v))
}

// BuilderImg applies equality check predicate on the "builder_img" field. It's identical to BuilderImgEQ.
func BuilderImg(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldBuilderImg, v))
}

// BuildEnv applies equality check predicate on the "build_env" field. It's identical to BuildEnvEQ.
func BuildEnv(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldBuildEnv, v))
}

// Features applies equality check predicate on the "features" field. It's identical to FeaturesEQ.
func Features(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldFeatures, v))
}

// ProductBaseImg applies equality check predicate on the "product_base_img" field. It's identical to ProductBaseImgEQ.
func ProductBaseImg(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldProductBaseImg, v))
}

// ProductDockerfile applies equality check predicate on the "product_dockerfile" field. It's identical to ProductDockerfileEQ.
func ProductDockerfile(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldProductDockerfile, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldStatus, v))
}

// ErrMsg applies equality check predicate on the "err_msg" field. It's identical to ErrMsgEQ.
func ErrMsg(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldErrMsg, v))
}

// PipelineBuildID applies equality check predicate on the "pipeline_build_id" field. It's identical to PipelineBuildIDEQ.
func PipelineBuildID(v int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldPipelineBuildID, v))
}

// PipelineStartAt applies equality check predicate on the "pipeline_start_at" field. It's identical to PipelineStartAtEQ.
func PipelineStartAt(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldPipelineStartAt, v))
}

// PipelineEndAt applies equality check predicate on the "pipeline_end_at" field. It's identical to PipelineEndAtEQ.
func PipelineEndAt(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldPipelineEndAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldUpdatedAt, v))
}

// ProductEQ applies the EQ predicate on the "product" field.
func ProductEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldProduct, v))
}

// ProductNEQ applies the NEQ predicate on the "product" field.
func ProductNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldProduct, v))
}

// ProductIn applies the In predicate on the "product" field.
func ProductIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldProduct, vs...))
}

// ProductNotIn applies the NotIn predicate on the "product" field.
func ProductNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldProduct, vs...))
}

// ProductGT applies the GT predicate on the "product" field.
func ProductGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldProduct, v))
}

// ProductGTE applies the GTE predicate on the "product" field.
func ProductGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldProduct, v))
}

// ProductLT applies the LT predicate on the "product" field.
func ProductLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldProduct, v))
}

// ProductLTE applies the LTE predicate on the "product" field.
func ProductLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldProduct, v))
}

// ProductContains applies the Contains predicate on the "product" field.
func ProductContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldProduct, v))
}

// ProductHasPrefix applies the HasPrefix predicate on the "product" field.
func ProductHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldProduct, v))
}

// ProductHasSuffix applies the HasSuffix predicate on the "product" field.
func ProductHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldProduct, v))
}

// ProductIsNil applies the IsNil predicate on the "product" field.
func ProductIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldProduct))
}

// ProductNotNil applies the NotNil predicate on the "product" field.
func ProductNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldProduct))
}

// ProductEqualFold applies the EqualFold predicate on the "product" field.
func ProductEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldProduct, v))
}

// ProductContainsFold applies the ContainsFold predicate on the "product" field.
func ProductContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldProduct, v))
}

// EditionEQ applies the EQ predicate on the "edition" field.
func EditionEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldEdition, v))
}

// EditionNEQ applies the NEQ predicate on the "edition" field.
func EditionNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldEdition, v))
}

// EditionIn applies the In predicate on the "edition" field.
func EditionIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldEdition, vs...))
}

// EditionNotIn applies the NotIn predicate on the "edition" field.
func EditionNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldEdition, vs...))
}

// EditionGT applies the GT predicate on the "edition" field.
func EditionGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldEdition, v))
}

// EditionGTE applies the GTE predicate on the "edition" field.
func EditionGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldEdition, v))
}

// EditionLT applies the LT predicate on the "edition" field.
func EditionLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldEdition, v))
}

// EditionLTE applies the LTE predicate on the "edition" field.
func EditionLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldEdition, v))
}

// EditionContains applies the Contains predicate on the "edition" field.
func EditionContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldEdition, v))
}

// EditionHasPrefix applies the HasPrefix predicate on the "edition" field.
func EditionHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldEdition, v))
}

// EditionHasSuffix applies the HasSuffix predicate on the "edition" field.
func EditionHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldEdition, v))
}

// EditionIsNil applies the IsNil predicate on the "edition" field.
func EditionIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldEdition))
}

// EditionNotNil applies the NotNil predicate on the "edition" field.
func EditionNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldEdition))
}

// EditionEqualFold applies the EqualFold predicate on the "edition" field.
func EditionEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldEdition, v))
}

// EditionContainsFold applies the ContainsFold predicate on the "edition" field.
func EditionContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldEdition, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldVersion, v))
}

// GithubRepoEQ applies the EQ predicate on the "github_repo" field.
func GithubRepoEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldGithubRepo, v))
}

// GithubRepoNEQ applies the NEQ predicate on the "github_repo" field.
func GithubRepoNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldGithubRepo, v))
}

// GithubRepoIn applies the In predicate on the "github_repo" field.
func GithubRepoIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldGithubRepo, vs...))
}

// GithubRepoNotIn applies the NotIn predicate on the "github_repo" field.
func GithubRepoNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldGithubRepo, vs...))
}

// GithubRepoGT applies the GT predicate on the "github_repo" field.
func GithubRepoGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldGithubRepo, v))
}

// GithubRepoGTE applies the GTE predicate on the "github_repo" field.
func GithubRepoGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldGithubRepo, v))
}

// GithubRepoLT applies the LT predicate on the "github_repo" field.
func GithubRepoLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldGithubRepo, v))
}

// GithubRepoLTE applies the LTE predicate on the "github_repo" field.
func GithubRepoLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldGithubRepo, v))
}

// GithubRepoContains applies the Contains predicate on the "github_repo" field.
func GithubRepoContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldGithubRepo, v))
}

// GithubRepoHasPrefix applies the HasPrefix predicate on the "github_repo" field.
func GithubRepoHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldGithubRepo, v))
}

// GithubRepoHasSuffix applies the HasSuffix predicate on the "github_repo" field.
func GithubRepoHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldGithubRepo, v))
}

// GithubRepoIsNil applies the IsNil predicate on the "github_repo" field.
func GithubRepoIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldGithubRepo))
}

// GithubRepoNotNil applies the NotNil predicate on the "github_repo" field.
func GithubRepoNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldGithubRepo))
}

// GithubRepoEqualFold applies the EqualFold predicate on the "github_repo" field.
func GithubRepoEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldGithubRepo, v))
}

// GithubRepoContainsFold applies the ContainsFold predicate on the "github_repo" field.
func GithubRepoContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldGithubRepo, v))
}

// GitRefEQ applies the EQ predicate on the "git_ref" field.
func GitRefEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldGitRef, v))
}

// GitRefNEQ applies the NEQ predicate on the "git_ref" field.
func GitRefNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldGitRef, v))
}

// GitRefIn applies the In predicate on the "git_ref" field.
func GitRefIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldGitRef, vs...))
}

// GitRefNotIn applies the NotIn predicate on the "git_ref" field.
func GitRefNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldGitRef, vs...))
}

// GitRefGT applies the GT predicate on the "git_ref" field.
func GitRefGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldGitRef, v))
}

// GitRefGTE applies the GTE predicate on the "git_ref" field.
func GitRefGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldGitRef, v))
}

// GitRefLT applies the LT predicate on the "git_ref" field.
func GitRefLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldGitRef, v))
}

// GitRefLTE applies the LTE predicate on the "git_ref" field.
func GitRefLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldGitRef, v))
}

// GitRefContains applies the Contains predicate on the "git_ref" field.
func GitRefContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldGitRef, v))
}

// GitRefHasPrefix applies the HasPrefix predicate on the "git_ref" field.
func GitRefHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldGitRef, v))
}

// GitRefHasSuffix applies the HasSuffix predicate on the "git_ref" field.
func GitRefHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldGitRef, v))
}

// GitRefIsNil applies the IsNil predicate on the "git_ref" field.
func GitRefIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldGitRef))
}

// GitRefNotNil applies the NotNil predicate on the "git_ref" field.
func GitRefNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldGitRef))
}

// GitRefEqualFold applies the EqualFold predicate on the "git_ref" field.
func GitRefEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldGitRef, v))
}

// GitRefContainsFold applies the ContainsFold predicate on the "git_ref" field.
func GitRefContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldGitRef, v))
}

// GitShaEQ applies the EQ predicate on the "git_sha" field.
func GitShaEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldGitSha, v))
}

// GitShaNEQ applies the NEQ predicate on the "git_sha" field.
func GitShaNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldGitSha, v))
}

// GitShaIn applies the In predicate on the "git_sha" field.
func GitShaIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldGitSha, vs...))
}

// GitShaNotIn applies the NotIn predicate on the "git_sha" field.
func GitShaNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldGitSha, vs...))
}

// GitShaGT applies the GT predicate on the "git_sha" field.
func GitShaGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldGitSha, v))
}

// GitShaGTE applies the GTE predicate on the "git_sha" field.
func GitShaGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldGitSha, v))
}

// GitShaLT applies the LT predicate on the "git_sha" field.
func GitShaLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldGitSha, v))
}

// GitShaLTE applies the LTE predicate on the "git_sha" field.
func GitShaLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldGitSha, v))
}

// GitShaContains applies the Contains predicate on the "git_sha" field.
func GitShaContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldGitSha, v))
}

// GitShaHasPrefix applies the HasPrefix predicate on the "git_sha" field.
func GitShaHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldGitSha, v))
}

// GitShaHasSuffix applies the HasSuffix predicate on the "git_sha" field.
func GitShaHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldGitSha, v))
}

// GitShaIsNil applies the IsNil predicate on the "git_sha" field.
func GitShaIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldGitSha))
}

// GitShaNotNil applies the NotNil predicate on the "git_sha" field.
func GitShaNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldGitSha))
}

// GitShaEqualFold applies the EqualFold predicate on the "git_sha" field.
func GitShaEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldGitSha, v))
}

// GitShaContainsFold applies the ContainsFold predicate on the "git_sha" field.
func GitShaContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldGitSha, v))
}

// PluginGitRefEQ applies the EQ predicate on the "plugin_git_ref" field.
func PluginGitRefEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldPluginGitRef, v))
}

// PluginGitRefNEQ applies the NEQ predicate on the "plugin_git_ref" field.
func PluginGitRefNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldPluginGitRef, v))
}

// PluginGitRefIn applies the In predicate on the "plugin_git_ref" field.
func PluginGitRefIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldPluginGitRef, vs...))
}

// PluginGitRefNotIn applies the NotIn predicate on the "plugin_git_ref" field.
func PluginGitRefNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldPluginGitRef, vs...))
}

// PluginGitRefGT applies the GT predicate on the "plugin_git_ref" field.
func PluginGitRefGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldPluginGitRef, v))
}

// PluginGitRefGTE applies the GTE predicate on the "plugin_git_ref" field.
func PluginGitRefGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldPluginGitRef, v))
}

// PluginGitRefLT applies the LT predicate on the "plugin_git_ref" field.
func PluginGitRefLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldPluginGitRef, v))
}

// PluginGitRefLTE applies the LTE predicate on the "plugin_git_ref" field.
func PluginGitRefLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldPluginGitRef, v))
}

// PluginGitRefContains applies the Contains predicate on the "plugin_git_ref" field.
func PluginGitRefContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldPluginGitRef, v))
}

// PluginGitRefHasPrefix applies the HasPrefix predicate on the "plugin_git_ref" field.
func PluginGitRefHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldPluginGitRef, v))
}

// PluginGitRefHasSuffix applies the HasSuffix predicate on the "plugin_git_ref" field.
func PluginGitRefHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldPluginGitRef, v))
}

// PluginGitRefIsNil applies the IsNil predicate on the "plugin_git_ref" field.
func PluginGitRefIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldPluginGitRef))
}

// PluginGitRefNotNil applies the NotNil predicate on the "plugin_git_ref" field.
func PluginGitRefNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldPluginGitRef))
}

// PluginGitRefEqualFold applies the EqualFold predicate on the "plugin_git_ref" field.
func PluginGitRefEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldPluginGitRef, v))
}

// PluginGitRefContainsFold applies the ContainsFold predicate on the "plugin_git_ref" field.
func PluginGitRefContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldPluginGitRef, v))
}

// IsHotfixEQ applies the EQ predicate on the "is_hotfix" field.
func IsHotfixEQ(v bool) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldIsHotfix, v))
}

// IsHotfixNEQ applies the NEQ predicate on the "is_hotfix" field.
func IsHotfixNEQ(v bool) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldIsHotfix, v))
}

// IsPushGcrEQ applies the EQ predicate on the "is_push_gcr" field.
func IsPushGcrEQ(v bool) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldIsPushGcr, v))
}

// IsPushGcrNEQ applies the NEQ predicate on the "is_push_gcr" field.
func IsPushGcrNEQ(v bool) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldIsPushGcr, v))
}

// IsPushGcrIsNil applies the IsNil predicate on the "is_push_gcr" field.
func IsPushGcrIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldIsPushGcr))
}

// IsPushGcrNotNil applies the NotNil predicate on the "is_push_gcr" field.
func IsPushGcrNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldIsPushGcr))
}

// TargetImgEQ applies the EQ predicate on the "target_img" field.
func TargetImgEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldTargetImg, v))
}

// TargetImgNEQ applies the NEQ predicate on the "target_img" field.
func TargetImgNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldTargetImg, v))
}

// TargetImgIn applies the In predicate on the "target_img" field.
func TargetImgIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldTargetImg, vs...))
}

// TargetImgNotIn applies the NotIn predicate on the "target_img" field.
func TargetImgNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldTargetImg, vs...))
}

// TargetImgGT applies the GT predicate on the "target_img" field.
func TargetImgGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldTargetImg, v))
}

// TargetImgGTE applies the GTE predicate on the "target_img" field.
func TargetImgGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldTargetImg, v))
}

// TargetImgLT applies the LT predicate on the "target_img" field.
func TargetImgLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldTargetImg, v))
}

// TargetImgLTE applies the LTE predicate on the "target_img" field.
func TargetImgLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldTargetImg, v))
}

// TargetImgContains applies the Contains predicate on the "target_img" field.
func TargetImgContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldTargetImg, v))
}

// TargetImgHasPrefix applies the HasPrefix predicate on the "target_img" field.
func TargetImgHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldTargetImg, v))
}

// TargetImgHasSuffix applies the HasSuffix predicate on the "target_img" field.
func TargetImgHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldTargetImg, v))
}

// TargetImgIsNil applies the IsNil predicate on the "target_img" field.
func TargetImgIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldTargetImg))
}

// TargetImgNotNil applies the NotNil predicate on the "target_img" field.
func TargetImgNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldTargetImg))
}

// TargetImgEqualFold applies the EqualFold predicate on the "target_img" field.
func TargetImgEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldTargetImg, v))
}

// TargetImgContainsFold applies the ContainsFold predicate on the "target_img" field.
func TargetImgContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldTargetImg, v))
}

// PipelineEngineEQ applies the EQ predicate on the "pipeline_engine" field.
func PipelineEngineEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldPipelineEngine, v))
}

// PipelineEngineNEQ applies the NEQ predicate on the "pipeline_engine" field.
func PipelineEngineNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldPipelineEngine, v))
}

// PipelineEngineIn applies the In predicate on the "pipeline_engine" field.
func PipelineEngineIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldPipelineEngine, vs...))
}

// PipelineEngineNotIn applies the NotIn predicate on the "pipeline_engine" field.
func PipelineEngineNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldPipelineEngine, vs...))
}

// PipelineEngineGT applies the GT predicate on the "pipeline_engine" field.
func PipelineEngineGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldPipelineEngine, v))
}

// PipelineEngineGTE applies the GTE predicate on the "pipeline_engine" field.
func PipelineEngineGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldPipelineEngine, v))
}

// PipelineEngineLT applies the LT predicate on the "pipeline_engine" field.
func PipelineEngineLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldPipelineEngine, v))
}

// PipelineEngineLTE applies the LTE predicate on the "pipeline_engine" field.
func PipelineEngineLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldPipelineEngine, v))
}

// PipelineEngineContains applies the Contains predicate on the "pipeline_engine" field.
func PipelineEngineContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldPipelineEngine, v))
}

// PipelineEngineHasPrefix applies the HasPrefix predicate on the "pipeline_engine" field.
func PipelineEngineHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldPipelineEngine, v))
}

// PipelineEngineHasSuffix applies the HasSuffix predicate on the "pipeline_engine" field.
func PipelineEngineHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldPipelineEngine, v))
}

// PipelineEngineIsNil applies the IsNil predicate on the "pipeline_engine" field.
func PipelineEngineIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldPipelineEngine))
}

// PipelineEngineNotNil applies the NotNil predicate on the "pipeline_engine" field.
func PipelineEngineNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldPipelineEngine))
}

// PipelineEngineEqualFold applies the EqualFold predicate on the "pipeline_engine" field.
func PipelineEngineEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldPipelineEngine, v))
}

// PipelineEngineContainsFold applies the ContainsFold predicate on the "pipeline_engine" field.
func PipelineEngineContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldPipelineEngine, v))
}

// BuilderImgEQ applies the EQ predicate on the "builder_img" field.
func BuilderImgEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldBuilderImg, v))
}

// BuilderImgNEQ applies the NEQ predicate on the "builder_img" field.
func BuilderImgNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldBuilderImg, v))
}

// BuilderImgIn applies the In predicate on the "builder_img" field.
func BuilderImgIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldBuilderImg, vs...))
}

// BuilderImgNotIn applies the NotIn predicate on the "builder_img" field.
func BuilderImgNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldBuilderImg, vs...))
}

// BuilderImgGT applies the GT predicate on the "builder_img" field.
func BuilderImgGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldBuilderImg, v))
}

// BuilderImgGTE applies the GTE predicate on the "builder_img" field.
func BuilderImgGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldBuilderImg, v))
}

// BuilderImgLT applies the LT predicate on the "builder_img" field.
func BuilderImgLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldBuilderImg, v))
}

// BuilderImgLTE applies the LTE predicate on the "builder_img" field.
func BuilderImgLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldBuilderImg, v))
}

// BuilderImgContains applies the Contains predicate on the "builder_img" field.
func BuilderImgContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldBuilderImg, v))
}

// BuilderImgHasPrefix applies the HasPrefix predicate on the "builder_img" field.
func BuilderImgHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldBuilderImg, v))
}

// BuilderImgHasSuffix applies the HasSuffix predicate on the "builder_img" field.
func BuilderImgHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldBuilderImg, v))
}

// BuilderImgIsNil applies the IsNil predicate on the "builder_img" field.
func BuilderImgIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldBuilderImg))
}

// BuilderImgNotNil applies the NotNil predicate on the "builder_img" field.
func BuilderImgNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldBuilderImg))
}

// BuilderImgEqualFold applies the EqualFold predicate on the "builder_img" field.
func BuilderImgEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldBuilderImg, v))
}

// BuilderImgContainsFold applies the ContainsFold predicate on the "builder_img" field.
func BuilderImgContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldBuilderImg, v))
}

// BuildEnvEQ applies the EQ predicate on the "build_env" field.
func BuildEnvEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldBuildEnv, v))
}

// BuildEnvNEQ applies the NEQ predicate on the "build_env" field.
func BuildEnvNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldBuildEnv, v))
}

// BuildEnvIn applies the In predicate on the "build_env" field.
func BuildEnvIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldBuildEnv, vs...))
}

// BuildEnvNotIn applies the NotIn predicate on the "build_env" field.
func BuildEnvNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldBuildEnv, vs...))
}

// BuildEnvGT applies the GT predicate on the "build_env" field.
func BuildEnvGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldBuildEnv, v))
}

// BuildEnvGTE applies the GTE predicate on the "build_env" field.
func BuildEnvGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldBuildEnv, v))
}

// BuildEnvLT applies the LT predicate on the "build_env" field.
func BuildEnvLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldBuildEnv, v))
}

// BuildEnvLTE applies the LTE predicate on the "build_env" field.
func BuildEnvLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldBuildEnv, v))
}

// BuildEnvContains applies the Contains predicate on the "build_env" field.
func BuildEnvContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldBuildEnv, v))
}

// BuildEnvHasPrefix applies the HasPrefix predicate on the "build_env" field.
func BuildEnvHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldBuildEnv, v))
}

// BuildEnvHasSuffix applies the HasSuffix predicate on the "build_env" field.
func BuildEnvHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldBuildEnv, v))
}

// BuildEnvIsNil applies the IsNil predicate on the "build_env" field.
func BuildEnvIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldBuildEnv))
}

// BuildEnvNotNil applies the NotNil predicate on the "build_env" field.
func BuildEnvNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldBuildEnv))
}

// BuildEnvEqualFold applies the EqualFold predicate on the "build_env" field.
func BuildEnvEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldBuildEnv, v))
}

// BuildEnvContainsFold applies the ContainsFold predicate on the "build_env" field.
func BuildEnvContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldBuildEnv, v))
}

// FeaturesEQ applies the EQ predicate on the "features" field.
func FeaturesEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldFeatures, v))
}

// FeaturesNEQ applies the NEQ predicate on the "features" field.
func FeaturesNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldFeatures, v))
}

// FeaturesIn applies the In predicate on the "features" field.
func FeaturesIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldFeatures, vs...))
}

// FeaturesNotIn applies the NotIn predicate on the "features" field.
func FeaturesNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldFeatures, vs...))
}

// FeaturesGT applies the GT predicate on the "features" field.
func FeaturesGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldFeatures, v))
}

// FeaturesGTE applies the GTE predicate on the "features" field.
func FeaturesGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldFeatures, v))
}

// FeaturesLT applies the LT predicate on the "features" field.
func FeaturesLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldFeatures, v))
}

// FeaturesLTE applies the LTE predicate on the "features" field.
func FeaturesLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldFeatures, v))
}

// FeaturesContains applies the Contains predicate on the "features" field.
func FeaturesContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldFeatures, v))
}

// FeaturesHasPrefix applies the HasPrefix predicate on the "features" field.
func FeaturesHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldFeatures, v))
}

// FeaturesHasSuffix applies the HasSuffix predicate on the "features" field.
func FeaturesHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldFeatures, v))
}

// FeaturesIsNil applies the IsNil predicate on the "features" field.
func FeaturesIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldFeatures))
}

// FeaturesNotNil applies the NotNil predicate on the "features" field.
func FeaturesNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldFeatures))
}

// FeaturesEqualFold applies the EqualFold predicate on the "features" field.
func FeaturesEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldFeatures, v))
}

// FeaturesContainsFold applies the ContainsFold predicate on the "features" field.
func FeaturesContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldFeatures, v))
}

// ProductBaseImgEQ applies the EQ predicate on the "product_base_img" field.
func ProductBaseImgEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldProductBaseImg, v))
}

// ProductBaseImgNEQ applies the NEQ predicate on the "product_base_img" field.
func ProductBaseImgNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldProductBaseImg, v))
}

// ProductBaseImgIn applies the In predicate on the "product_base_img" field.
func ProductBaseImgIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldProductBaseImg, vs...))
}

// ProductBaseImgNotIn applies the NotIn predicate on the "product_base_img" field.
func ProductBaseImgNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldProductBaseImg, vs...))
}

// ProductBaseImgGT applies the GT predicate on the "product_base_img" field.
func ProductBaseImgGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldProductBaseImg, v))
}

// ProductBaseImgGTE applies the GTE predicate on the "product_base_img" field.
func ProductBaseImgGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldProductBaseImg, v))
}

// ProductBaseImgLT applies the LT predicate on the "product_base_img" field.
func ProductBaseImgLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldProductBaseImg, v))
}

// ProductBaseImgLTE applies the LTE predicate on the "product_base_img" field.
func ProductBaseImgLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldProductBaseImg, v))
}

// ProductBaseImgContains applies the Contains predicate on the "product_base_img" field.
func ProductBaseImgContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldProductBaseImg, v))
}

// ProductBaseImgHasPrefix applies the HasPrefix predicate on the "product_base_img" field.
func ProductBaseImgHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldProductBaseImg, v))
}

// ProductBaseImgHasSuffix applies the HasSuffix predicate on the "product_base_img" field.
func ProductBaseImgHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldProductBaseImg, v))
}

// ProductBaseImgIsNil applies the IsNil predicate on the "product_base_img" field.
func ProductBaseImgIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldProductBaseImg))
}

// ProductBaseImgNotNil applies the NotNil predicate on the "product_base_img" field.
func ProductBaseImgNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldProductBaseImg))
}

// ProductBaseImgEqualFold applies the EqualFold predicate on the "product_base_img" field.
func ProductBaseImgEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldProductBaseImg, v))
}

// ProductBaseImgContainsFold applies the ContainsFold predicate on the "product_base_img" field.
func ProductBaseImgContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldProductBaseImg, v))
}

// ProductDockerfileEQ applies the EQ predicate on the "product_dockerfile" field.
func ProductDockerfileEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldProductDockerfile, v))
}

// ProductDockerfileNEQ applies the NEQ predicate on the "product_dockerfile" field.
func ProductDockerfileNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldProductDockerfile, v))
}

// ProductDockerfileIn applies the In predicate on the "product_dockerfile" field.
func ProductDockerfileIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldProductDockerfile, vs...))
}

// ProductDockerfileNotIn applies the NotIn predicate on the "product_dockerfile" field.
func ProductDockerfileNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldProductDockerfile, vs...))
}

// ProductDockerfileGT applies the GT predicate on the "product_dockerfile" field.
func ProductDockerfileGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldProductDockerfile, v))
}

// ProductDockerfileGTE applies the GTE predicate on the "product_dockerfile" field.
func ProductDockerfileGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldProductDockerfile, v))
}

// ProductDockerfileLT applies the LT predicate on the "product_dockerfile" field.
func ProductDockerfileLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldProductDockerfile, v))
}

// ProductDockerfileLTE applies the LTE predicate on the "product_dockerfile" field.
func ProductDockerfileLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldProductDockerfile, v))
}

// ProductDockerfileContains applies the Contains predicate on the "product_dockerfile" field.
func ProductDockerfileContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldProductDockerfile, v))
}

// ProductDockerfileHasPrefix applies the HasPrefix predicate on the "product_dockerfile" field.
func ProductDockerfileHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldProductDockerfile, v))
}

// ProductDockerfileHasSuffix applies the HasSuffix predicate on the "product_dockerfile" field.
func ProductDockerfileHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldProductDockerfile, v))
}

// ProductDockerfileIsNil applies the IsNil predicate on the "product_dockerfile" field.
func ProductDockerfileIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldProductDockerfile))
}

// ProductDockerfileNotNil applies the NotNil predicate on the "product_dockerfile" field.
func ProductDockerfileNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldProductDockerfile))
}

// ProductDockerfileEqualFold applies the EqualFold predicate on the "product_dockerfile" field.
func ProductDockerfileEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldProductDockerfile, v))
}

// ProductDockerfileContainsFold applies the ContainsFold predicate on the "product_dockerfile" field.
func ProductDockerfileContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldProductDockerfile, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldStatus, v))
}

// ErrMsgEQ applies the EQ predicate on the "err_msg" field.
func ErrMsgEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldErrMsg, v))
}

// ErrMsgNEQ applies the NEQ predicate on the "err_msg" field.
func ErrMsgNEQ(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldErrMsg, v))
}

// ErrMsgIn applies the In predicate on the "err_msg" field.
func ErrMsgIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldErrMsg, vs...))
}

// ErrMsgNotIn applies the NotIn predicate on the "err_msg" field.
func ErrMsgNotIn(vs ...string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldErrMsg, vs...))
}

// ErrMsgGT applies the GT predicate on the "err_msg" field.
func ErrMsgGT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldErrMsg, v))
}

// ErrMsgGTE applies the GTE predicate on the "err_msg" field.
func ErrMsgGTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldErrMsg, v))
}

// ErrMsgLT applies the LT predicate on the "err_msg" field.
func ErrMsgLT(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldErrMsg, v))
}

// ErrMsgLTE applies the LTE predicate on the "err_msg" field.
func ErrMsgLTE(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldErrMsg, v))
}

// ErrMsgContains applies the Contains predicate on the "err_msg" field.
func ErrMsgContains(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContains(FieldErrMsg, v))
}

// ErrMsgHasPrefix applies the HasPrefix predicate on the "err_msg" field.
func ErrMsgHasPrefix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasPrefix(FieldErrMsg, v))
}

// ErrMsgHasSuffix applies the HasSuffix predicate on the "err_msg" field.
func ErrMsgHasSuffix(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldHasSuffix(FieldErrMsg, v))
}

// ErrMsgIsNil applies the IsNil predicate on the "err_msg" field.
func ErrMsgIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldErrMsg))
}

// ErrMsgNotNil applies the NotNil predicate on the "err_msg" field.
func ErrMsgNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldErrMsg))
}

// ErrMsgEqualFold applies the EqualFold predicate on the "err_msg" field.
func ErrMsgEqualFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEqualFold(FieldErrMsg, v))
}

// ErrMsgContainsFold applies the ContainsFold predicate on the "err_msg" field.
func ErrMsgContainsFold(v string) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldContainsFold(FieldErrMsg, v))
}

// PipelineBuildIDEQ applies the EQ predicate on the "pipeline_build_id" field.
func PipelineBuildIDEQ(v int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldPipelineBuildID, v))
}

// PipelineBuildIDNEQ applies the NEQ predicate on the "pipeline_build_id" field.
func PipelineBuildIDNEQ(v int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldPipelineBuildID, v))
}

// PipelineBuildIDIn applies the In predicate on the "pipeline_build_id" field.
func PipelineBuildIDIn(vs ...int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldPipelineBuildID, vs...))
}

// PipelineBuildIDNotIn applies the NotIn predicate on the "pipeline_build_id" field.
func PipelineBuildIDNotIn(vs ...int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldPipelineBuildID, vs...))
}

// PipelineBuildIDGT applies the GT predicate on the "pipeline_build_id" field.
func PipelineBuildIDGT(v int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldPipelineBuildID, v))
}

// PipelineBuildIDGTE applies the GTE predicate on the "pipeline_build_id" field.
func PipelineBuildIDGTE(v int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldPipelineBuildID, v))
}

// PipelineBuildIDLT applies the LT predicate on the "pipeline_build_id" field.
func PipelineBuildIDLT(v int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldPipelineBuildID, v))
}

// PipelineBuildIDLTE applies the LTE predicate on the "pipeline_build_id" field.
func PipelineBuildIDLTE(v int) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldPipelineBuildID, v))
}

// PipelineBuildIDIsNil applies the IsNil predicate on the "pipeline_build_id" field.
func PipelineBuildIDIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldPipelineBuildID))
}

// PipelineBuildIDNotNil applies the NotNil predicate on the "pipeline_build_id" field.
func PipelineBuildIDNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldPipelineBuildID))
}

// PipelineStartAtEQ applies the EQ predicate on the "pipeline_start_at" field.
func PipelineStartAtEQ(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldPipelineStartAt, v))
}

// PipelineStartAtNEQ applies the NEQ predicate on the "pipeline_start_at" field.
func PipelineStartAtNEQ(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldPipelineStartAt, v))
}

// PipelineStartAtIn applies the In predicate on the "pipeline_start_at" field.
func PipelineStartAtIn(vs ...time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldPipelineStartAt, vs...))
}

// PipelineStartAtNotIn applies the NotIn predicate on the "pipeline_start_at" field.
func PipelineStartAtNotIn(vs ...time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldPipelineStartAt, vs...))
}

// PipelineStartAtGT applies the GT predicate on the "pipeline_start_at" field.
func PipelineStartAtGT(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldPipelineStartAt, v))
}

// PipelineStartAtGTE applies the GTE predicate on the "pipeline_start_at" field.
func PipelineStartAtGTE(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldPipelineStartAt, v))
}

// PipelineStartAtLT applies the LT predicate on the "pipeline_start_at" field.
func PipelineStartAtLT(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldPipelineStartAt, v))
}

// PipelineStartAtLTE applies the LTE predicate on the "pipeline_start_at" field.
func PipelineStartAtLTE(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldPipelineStartAt, v))
}

// PipelineStartAtIsNil applies the IsNil predicate on the "pipeline_start_at" field.
func PipelineStartAtIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldPipelineStartAt))
}

// PipelineStartAtNotNil applies the NotNil predicate on the "pipeline_start_at" field.
func PipelineStartAtNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldPipelineStartAt))
}

// PipelineEndAtEQ applies the EQ predicate on the "pipeline_end_at" field.
func PipelineEndAtEQ(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldEQ(FieldPipelineEndAt, v))
}

// PipelineEndAtNEQ applies the NEQ predicate on the "pipeline_end_at" field.
func PipelineEndAtNEQ(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNEQ(FieldPipelineEndAt, v))
}

// PipelineEndAtIn applies the In predicate on the "pipeline_end_at" field.
func PipelineEndAtIn(vs ...time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIn(FieldPipelineEndAt, vs...))
}

// PipelineEndAtNotIn applies the NotIn predicate on the "pipeline_end_at" field.
func PipelineEndAtNotIn(vs ...time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotIn(FieldPipelineEndAt, vs...))
}

// PipelineEndAtGT applies the GT predicate on the "pipeline_end_at" field.
func PipelineEndAtGT(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGT(FieldPipelineEndAt, v))
}

// PipelineEndAtGTE applies the GTE predicate on the "pipeline_end_at" field.
func PipelineEndAtGTE(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldGTE(FieldPipelineEndAt, v))
}

// PipelineEndAtLT applies the LT predicate on the "pipeline_end_at" field.
func PipelineEndAtLT(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLT(FieldPipelineEndAt, v))
}

// PipelineEndAtLTE applies the LTE predicate on the "pipeline_end_at" field.
func PipelineEndAtLTE(v time.Time) predicate.DevBuild {
	return predicate.DevBuild(sql.FieldLTE(FieldPipelineEndAt, v))
}

// PipelineEndAtIsNil applies the IsNil predicate on the "pipeline_end_at" field.
func PipelineEndAtIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldPipelineEndAt))
}

// PipelineEndAtNotNil applies the NotNil predicate on the "pipeline_end_at" field.
func PipelineEndAtNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldPipelineEndAt))
}

// BuildReportIsNil applies the IsNil predicate on the "build_report" field.
func BuildReportIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldBuildReport))
}

// BuildReportNotNil applies the NotNil predicate on the "build_report" field.
func BuildReportNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldBuildReport))
}

// TektonStatusIsNil applies the IsNil predicate on the "tekton_status" field.
func TektonStatusIsNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldIsNull(FieldTektonStatus))
}

// TektonStatusNotNil applies the NotNil predicate on the "tekton_status" field.
func TektonStatusNotNil() predicate.DevBuild {
	return predicate.DevBuild(sql.FieldNotNull(FieldTektonStatus))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DevBuild) predicate.DevBuild {
	return predicate.DevBuild(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DevBuild) predicate.DevBuild {
	return predicate.DevBuild(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DevBuild) predicate.DevBuild {
	return predicate.DevBuild(sql.NotPredicates(p))
}
