// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PingCAP-QE/ee-apps/tibuild/internal/database/ent/devbuild"
)

// DevBuild is the model entity for the DevBuild schema.
type DevBuild struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// User who created the build
	CreatedBy string `json:"created_by,omitempty"`
	// Time when the build was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Time when the build was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Product being built
	Product string `json:"product,omitempty"`
	// Edition of the product
	Edition string `json:"edition,omitempty"`
	// Version of the build
	Version string `json:"version,omitempty"`
	// GitHub repository
	GithubRepo string `json:"github_repo,omitempty"`
	// Git reference of the build
	GitRef string `json:"git_ref,omitempty"`
	// Git commit SHA
	GitHash string `json:"git_hash,omitempty"`
	// Git reference of the plugin
	PluginGitRef string `json:"plugin_git_ref,omitempty"`
	// Whether the build is a hotfix
	IsHotfix bool `json:"is_hotfix,omitempty"`
	// Whether to push to GCR
	IsPushGcr bool `json:"is_push_gcr,omitempty"`
	// Target image name
	TargetImg string `json:"target_img,omitempty"`
	// Pipeline engine used
	PipelineEngine string `json:"pipeline_engine,omitempty"`
	// Builder image used
	BuilderImg string `json:"builder_img,omitempty"`
	// Build environment
	BuildEnv string `json:"build_env,omitempty"`
	// Features included in the build
	Features string `json:"features,omitempty"`
	// Base image for the product
	ProductBaseImg string `json:"product_base_img,omitempty"`
	// Path to artifact image building dockerfile
	ProductDockerfile string `json:"product_dockerfile,omitempty"`
	// Build status
	Status string `json:"status,omitempty"`
	// Build status message
	ErrMsg string `json:"err_msg,omitempty"`
	// ID of the pipeline build
	PipelineBuildID int64 `json:"pipeline_build_id,omitempty"`
	// Build pipeline started time
	PipelineStartAt time.Time `json:"pipeline_start_at,omitempty"`
	// Build pipeline completed time
	PipelineEndAt time.Time `json:"pipeline_end_at,omitempty"`
	// JSON report of the build
	BuildReport map[string]interface{} `json:"build_report,omitempty"`
	// Tekton status
	TektonStatus map[string]interface{} `json:"tekton_status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DevBuild) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case devbuild.FieldBuildReport, devbuild.FieldTektonStatus:
			values[i] = new([]byte)
		case devbuild.FieldIsHotfix, devbuild.FieldIsPushGcr:
			values[i] = new(sql.NullBool)
		case devbuild.FieldID, devbuild.FieldPipelineBuildID:
			values[i] = new(sql.NullInt64)
		case devbuild.FieldCreatedBy, devbuild.FieldProduct, devbuild.FieldEdition, devbuild.FieldVersion, devbuild.FieldGithubRepo, devbuild.FieldGitRef, devbuild.FieldGitHash, devbuild.FieldPluginGitRef, devbuild.FieldTargetImg, devbuild.FieldPipelineEngine, devbuild.FieldBuilderImg, devbuild.FieldBuildEnv, devbuild.FieldFeatures, devbuild.FieldProductBaseImg, devbuild.FieldProductDockerfile, devbuild.FieldStatus, devbuild.FieldErrMsg:
			values[i] = new(sql.NullString)
		case devbuild.FieldCreatedAt, devbuild.FieldUpdatedAt, devbuild.FieldPipelineStartAt, devbuild.FieldPipelineEndAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DevBuild fields.
func (db *DevBuild) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case devbuild.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			db.ID = int(value.Int64)
		case devbuild.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				db.CreatedBy = value.String
			}
		case devbuild.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				db.CreatedAt = value.Time
			}
		case devbuild.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				db.UpdatedAt = value.Time
			}
		case devbuild.FieldProduct:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product", values[i])
			} else if value.Valid {
				db.Product = value.String
			}
		case devbuild.FieldEdition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field edition", values[i])
			} else if value.Valid {
				db.Edition = value.String
			}
		case devbuild.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				db.Version = value.String
			}
		case devbuild.FieldGithubRepo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github_repo", values[i])
			} else if value.Valid {
				db.GithubRepo = value.String
			}
		case devbuild.FieldGitRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_ref", values[i])
			} else if value.Valid {
				db.GitRef = value.String
			}
		case devbuild.FieldGitHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_hash", values[i])
			} else if value.Valid {
				db.GitHash = value.String
			}
		case devbuild.FieldPluginGitRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plugin_git_ref", values[i])
			} else if value.Valid {
				db.PluginGitRef = value.String
			}
		case devbuild.FieldIsHotfix:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_hotfix", values[i])
			} else if value.Valid {
				db.IsHotfix = value.Bool
			}
		case devbuild.FieldIsPushGcr:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_push_gcr", values[i])
			} else if value.Valid {
				db.IsPushGcr = value.Bool
			}
		case devbuild.FieldTargetImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_img", values[i])
			} else if value.Valid {
				db.TargetImg = value.String
			}
		case devbuild.FieldPipelineEngine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pipeline_engine", values[i])
			} else if value.Valid {
				db.PipelineEngine = value.String
			}
		case devbuild.FieldBuilderImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field builder_img", values[i])
			} else if value.Valid {
				db.BuilderImg = value.String
			}
		case devbuild.FieldBuildEnv:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field build_env", values[i])
			} else if value.Valid {
				db.BuildEnv = value.String
			}
		case devbuild.FieldFeatures:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value.Valid {
				db.Features = value.String
			}
		case devbuild.FieldProductBaseImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_base_img", values[i])
			} else if value.Valid {
				db.ProductBaseImg = value.String
			}
		case devbuild.FieldProductDockerfile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_dockerfile", values[i])
			} else if value.Valid {
				db.ProductDockerfile = value.String
			}
		case devbuild.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				db.Status = value.String
			}
		case devbuild.FieldErrMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field err_msg", values[i])
			} else if value.Valid {
				db.ErrMsg = value.String
			}
		case devbuild.FieldPipelineBuildID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pipeline_build_id", values[i])
			} else if value.Valid {
				db.PipelineBuildID = value.Int64
			}
		case devbuild.FieldPipelineStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pipeline_start_at", values[i])
			} else if value.Valid {
				db.PipelineStartAt = value.Time
			}
		case devbuild.FieldPipelineEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pipeline_end_at", values[i])
			} else if value.Valid {
				db.PipelineEndAt = value.Time
			}
		case devbuild.FieldBuildReport:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field build_report", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &db.BuildReport); err != nil {
					return fmt.Errorf("unmarshal field build_report: %w", err)
				}
			}
		case devbuild.FieldTektonStatus:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tekton_status", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &db.TektonStatus); err != nil {
					return fmt.Errorf("unmarshal field tekton_status: %w", err)
				}
			}
		default:
			db.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DevBuild.
// This includes values selected through modifiers, order, etc.
func (db *DevBuild) Value(name string) (ent.Value, error) {
	return db.selectValues.Get(name)
}

// Update returns a builder for updating this DevBuild.
// Note that you need to call DevBuild.Unwrap() before calling this method if this DevBuild
// was returned from a transaction, and the transaction was committed or rolled back.
func (db *DevBuild) Update() *DevBuildUpdateOne {
	return NewDevBuildClient(db.config).UpdateOne(db)
}

// Unwrap unwraps the DevBuild entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (db *DevBuild) Unwrap() *DevBuild {
	_tx, ok := db.config.driver.(*txDriver)
	if !ok {
		panic("ent: DevBuild is not a transactional entity")
	}
	db.config.driver = _tx.drv
	return db
}

// String implements the fmt.Stringer.
func (db *DevBuild) String() string {
	var builder strings.Builder
	builder.WriteString("DevBuild(")
	builder.WriteString(fmt.Sprintf("id=%v, ", db.ID))
	builder.WriteString("created_by=")
	builder.WriteString(db.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(db.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(db.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("product=")
	builder.WriteString(db.Product)
	builder.WriteString(", ")
	builder.WriteString("edition=")
	builder.WriteString(db.Edition)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(db.Version)
	builder.WriteString(", ")
	builder.WriteString("github_repo=")
	builder.WriteString(db.GithubRepo)
	builder.WriteString(", ")
	builder.WriteString("git_ref=")
	builder.WriteString(db.GitRef)
	builder.WriteString(", ")
	builder.WriteString("git_hash=")
	builder.WriteString(db.GitHash)
	builder.WriteString(", ")
	builder.WriteString("plugin_git_ref=")
	builder.WriteString(db.PluginGitRef)
	builder.WriteString(", ")
	builder.WriteString("is_hotfix=")
	builder.WriteString(fmt.Sprintf("%v", db.IsHotfix))
	builder.WriteString(", ")
	builder.WriteString("is_push_gcr=")
	builder.WriteString(fmt.Sprintf("%v", db.IsPushGcr))
	builder.WriteString(", ")
	builder.WriteString("target_img=")
	builder.WriteString(db.TargetImg)
	builder.WriteString(", ")
	builder.WriteString("pipeline_engine=")
	builder.WriteString(db.PipelineEngine)
	builder.WriteString(", ")
	builder.WriteString("builder_img=")
	builder.WriteString(db.BuilderImg)
	builder.WriteString(", ")
	builder.WriteString("build_env=")
	builder.WriteString(db.BuildEnv)
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(db.Features)
	builder.WriteString(", ")
	builder.WriteString("product_base_img=")
	builder.WriteString(db.ProductBaseImg)
	builder.WriteString(", ")
	builder.WriteString("product_dockerfile=")
	builder.WriteString(db.ProductDockerfile)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(db.Status)
	builder.WriteString(", ")
	builder.WriteString("err_msg=")
	builder.WriteString(db.ErrMsg)
	builder.WriteString(", ")
	builder.WriteString("pipeline_build_id=")
	builder.WriteString(fmt.Sprintf("%v", db.PipelineBuildID))
	builder.WriteString(", ")
	builder.WriteString("pipeline_start_at=")
	builder.WriteString(db.PipelineStartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("pipeline_end_at=")
	builder.WriteString(db.PipelineEndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("build_report=")
	builder.WriteString(fmt.Sprintf("%v", db.BuildReport))
	builder.WriteString(", ")
	builder.WriteString("tekton_status=")
	builder.WriteString(fmt.Sprintf("%v", db.TektonStatus))
	builder.WriteByte(')')
	return builder.String()
}

// DevBuilds is a parsable slice of DevBuild.
type DevBuilds []*DevBuild
