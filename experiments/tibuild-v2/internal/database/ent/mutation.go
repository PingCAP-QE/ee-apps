// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PingCAP-QE/ee-apps/tibuild/internal/database/ent/devbuild"
	"github.com/PingCAP-QE/ee-apps/tibuild/internal/database/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDevBuild = "DevBuild"
)

// DevBuildMutation represents an operation that mutates the DevBuild nodes in the graph.
type DevBuildMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	created_by           *string
	created_at           *time.Time
	updated_at           *time.Time
	product              *string
	edition              *string
	version              *string
	github_repo          *string
	git_ref              *string
	git_hash             *string
	plugin_git_ref       *string
	is_hotfix            *bool
	is_push_gcr          *bool
	target_img           *string
	pipeline_engine      *string
	builder_img          *string
	build_env            *string
	features             *string
	product_base_img     *string
	product_dockerfile   *string
	status               *string
	err_msg              *string
	pipeline_build_id    *int64
	addpipeline_build_id *int64
	pipeline_start_at    *time.Time
	pipeline_end_at      *time.Time
	build_report         *map[string]interface{}
	tekton_status        *map[string]interface{}
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*DevBuild, error)
	predicates           []predicate.DevBuild
}

var _ ent.Mutation = (*DevBuildMutation)(nil)

// devbuildOption allows management of the mutation configuration using functional options.
type devbuildOption func(*DevBuildMutation)

// newDevBuildMutation creates new mutation for the DevBuild entity.
func newDevBuildMutation(c config, op Op, opts ...devbuildOption) *DevBuildMutation {
	m := &DevBuildMutation{
		config:        c,
		op:            op,
		typ:           TypeDevBuild,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDevBuildID sets the ID field of the mutation.
func withDevBuildID(id int) devbuildOption {
	return func(m *DevBuildMutation) {
		var (
			err   error
			once  sync.Once
			value *DevBuild
		)
		m.oldValue = func(ctx context.Context) (*DevBuild, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DevBuild.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevBuild sets the old DevBuild of the mutation.
func withDevBuild(node *DevBuild) devbuildOption {
	return func(m *DevBuildMutation) {
		m.oldValue = func(context.Context) (*DevBuild, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DevBuildMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DevBuildMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DevBuildMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DevBuildMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DevBuild.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedBy sets the "created_by" field.
func (m *DevBuildMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *DevBuildMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *DevBuildMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[devbuild.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *DevBuildMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *DevBuildMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, devbuild.FieldCreatedBy)
}

// SetCreatedAt sets the "created_at" field.
func (m *DevBuildMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DevBuildMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DevBuildMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DevBuildMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DevBuildMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DevBuildMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetProduct sets the "product" field.
func (m *DevBuildMutation) SetProduct(s string) {
	m.product = &s
}

// Product returns the value of the "product" field in the mutation.
func (m *DevBuildMutation) Product() (r string, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProduct returns the old "product" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldProduct(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProduct is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProduct requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProduct: %w", err)
	}
	return oldValue.Product, nil
}

// ClearProduct clears the value of the "product" field.
func (m *DevBuildMutation) ClearProduct() {
	m.product = nil
	m.clearedFields[devbuild.FieldProduct] = struct{}{}
}

// ProductCleared returns if the "product" field was cleared in this mutation.
func (m *DevBuildMutation) ProductCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldProduct]
	return ok
}

// ResetProduct resets all changes to the "product" field.
func (m *DevBuildMutation) ResetProduct() {
	m.product = nil
	delete(m.clearedFields, devbuild.FieldProduct)
}

// SetEdition sets the "edition" field.
func (m *DevBuildMutation) SetEdition(s string) {
	m.edition = &s
}

// Edition returns the value of the "edition" field in the mutation.
func (m *DevBuildMutation) Edition() (r string, exists bool) {
	v := m.edition
	if v == nil {
		return
	}
	return *v, true
}

// OldEdition returns the old "edition" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldEdition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEdition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEdition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEdition: %w", err)
	}
	return oldValue.Edition, nil
}

// ClearEdition clears the value of the "edition" field.
func (m *DevBuildMutation) ClearEdition() {
	m.edition = nil
	m.clearedFields[devbuild.FieldEdition] = struct{}{}
}

// EditionCleared returns if the "edition" field was cleared in this mutation.
func (m *DevBuildMutation) EditionCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldEdition]
	return ok
}

// ResetEdition resets all changes to the "edition" field.
func (m *DevBuildMutation) ResetEdition() {
	m.edition = nil
	delete(m.clearedFields, devbuild.FieldEdition)
}

// SetVersion sets the "version" field.
func (m *DevBuildMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *DevBuildMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ClearVersion clears the value of the "version" field.
func (m *DevBuildMutation) ClearVersion() {
	m.version = nil
	m.clearedFields[devbuild.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *DevBuildMutation) VersionCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *DevBuildMutation) ResetVersion() {
	m.version = nil
	delete(m.clearedFields, devbuild.FieldVersion)
}

// SetGithubRepo sets the "github_repo" field.
func (m *DevBuildMutation) SetGithubRepo(s string) {
	m.github_repo = &s
}

// GithubRepo returns the value of the "github_repo" field in the mutation.
func (m *DevBuildMutation) GithubRepo() (r string, exists bool) {
	v := m.github_repo
	if v == nil {
		return
	}
	return *v, true
}

// OldGithubRepo returns the old "github_repo" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldGithubRepo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGithubRepo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGithubRepo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGithubRepo: %w", err)
	}
	return oldValue.GithubRepo, nil
}

// ClearGithubRepo clears the value of the "github_repo" field.
func (m *DevBuildMutation) ClearGithubRepo() {
	m.github_repo = nil
	m.clearedFields[devbuild.FieldGithubRepo] = struct{}{}
}

// GithubRepoCleared returns if the "github_repo" field was cleared in this mutation.
func (m *DevBuildMutation) GithubRepoCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldGithubRepo]
	return ok
}

// ResetGithubRepo resets all changes to the "github_repo" field.
func (m *DevBuildMutation) ResetGithubRepo() {
	m.github_repo = nil
	delete(m.clearedFields, devbuild.FieldGithubRepo)
}

// SetGitRef sets the "git_ref" field.
func (m *DevBuildMutation) SetGitRef(s string) {
	m.git_ref = &s
}

// GitRef returns the value of the "git_ref" field in the mutation.
func (m *DevBuildMutation) GitRef() (r string, exists bool) {
	v := m.git_ref
	if v == nil {
		return
	}
	return *v, true
}

// OldGitRef returns the old "git_ref" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldGitRef(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGitRef is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGitRef requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGitRef: %w", err)
	}
	return oldValue.GitRef, nil
}

// ClearGitRef clears the value of the "git_ref" field.
func (m *DevBuildMutation) ClearGitRef() {
	m.git_ref = nil
	m.clearedFields[devbuild.FieldGitRef] = struct{}{}
}

// GitRefCleared returns if the "git_ref" field was cleared in this mutation.
func (m *DevBuildMutation) GitRefCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldGitRef]
	return ok
}

// ResetGitRef resets all changes to the "git_ref" field.
func (m *DevBuildMutation) ResetGitRef() {
	m.git_ref = nil
	delete(m.clearedFields, devbuild.FieldGitRef)
}

// SetGitHash sets the "git_hash" field.
func (m *DevBuildMutation) SetGitHash(s string) {
	m.git_hash = &s
}

// GitHash returns the value of the "git_hash" field in the mutation.
func (m *DevBuildMutation) GitHash() (r string, exists bool) {
	v := m.git_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldGitHash returns the old "git_hash" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldGitHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGitHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGitHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGitHash: %w", err)
	}
	return oldValue.GitHash, nil
}

// ClearGitHash clears the value of the "git_hash" field.
func (m *DevBuildMutation) ClearGitHash() {
	m.git_hash = nil
	m.clearedFields[devbuild.FieldGitHash] = struct{}{}
}

// GitHashCleared returns if the "git_hash" field was cleared in this mutation.
func (m *DevBuildMutation) GitHashCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldGitHash]
	return ok
}

// ResetGitHash resets all changes to the "git_hash" field.
func (m *DevBuildMutation) ResetGitHash() {
	m.git_hash = nil
	delete(m.clearedFields, devbuild.FieldGitHash)
}

// SetPluginGitRef sets the "plugin_git_ref" field.
func (m *DevBuildMutation) SetPluginGitRef(s string) {
	m.plugin_git_ref = &s
}

// PluginGitRef returns the value of the "plugin_git_ref" field in the mutation.
func (m *DevBuildMutation) PluginGitRef() (r string, exists bool) {
	v := m.plugin_git_ref
	if v == nil {
		return
	}
	return *v, true
}

// OldPluginGitRef returns the old "plugin_git_ref" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldPluginGitRef(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPluginGitRef is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPluginGitRef requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPluginGitRef: %w", err)
	}
	return oldValue.PluginGitRef, nil
}

// ClearPluginGitRef clears the value of the "plugin_git_ref" field.
func (m *DevBuildMutation) ClearPluginGitRef() {
	m.plugin_git_ref = nil
	m.clearedFields[devbuild.FieldPluginGitRef] = struct{}{}
}

// PluginGitRefCleared returns if the "plugin_git_ref" field was cleared in this mutation.
func (m *DevBuildMutation) PluginGitRefCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldPluginGitRef]
	return ok
}

// ResetPluginGitRef resets all changes to the "plugin_git_ref" field.
func (m *DevBuildMutation) ResetPluginGitRef() {
	m.plugin_git_ref = nil
	delete(m.clearedFields, devbuild.FieldPluginGitRef)
}

// SetIsHotfix sets the "is_hotfix" field.
func (m *DevBuildMutation) SetIsHotfix(b bool) {
	m.is_hotfix = &b
}

// IsHotfix returns the value of the "is_hotfix" field in the mutation.
func (m *DevBuildMutation) IsHotfix() (r bool, exists bool) {
	v := m.is_hotfix
	if v == nil {
		return
	}
	return *v, true
}

// OldIsHotfix returns the old "is_hotfix" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldIsHotfix(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsHotfix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsHotfix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsHotfix: %w", err)
	}
	return oldValue.IsHotfix, nil
}

// ResetIsHotfix resets all changes to the "is_hotfix" field.
func (m *DevBuildMutation) ResetIsHotfix() {
	m.is_hotfix = nil
}

// SetIsPushGcr sets the "is_push_gcr" field.
func (m *DevBuildMutation) SetIsPushGcr(b bool) {
	m.is_push_gcr = &b
}

// IsPushGcr returns the value of the "is_push_gcr" field in the mutation.
func (m *DevBuildMutation) IsPushGcr() (r bool, exists bool) {
	v := m.is_push_gcr
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPushGcr returns the old "is_push_gcr" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldIsPushGcr(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPushGcr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPushGcr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPushGcr: %w", err)
	}
	return oldValue.IsPushGcr, nil
}

// ClearIsPushGcr clears the value of the "is_push_gcr" field.
func (m *DevBuildMutation) ClearIsPushGcr() {
	m.is_push_gcr = nil
	m.clearedFields[devbuild.FieldIsPushGcr] = struct{}{}
}

// IsPushGcrCleared returns if the "is_push_gcr" field was cleared in this mutation.
func (m *DevBuildMutation) IsPushGcrCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldIsPushGcr]
	return ok
}

// ResetIsPushGcr resets all changes to the "is_push_gcr" field.
func (m *DevBuildMutation) ResetIsPushGcr() {
	m.is_push_gcr = nil
	delete(m.clearedFields, devbuild.FieldIsPushGcr)
}

// SetTargetImg sets the "target_img" field.
func (m *DevBuildMutation) SetTargetImg(s string) {
	m.target_img = &s
}

// TargetImg returns the value of the "target_img" field in the mutation.
func (m *DevBuildMutation) TargetImg() (r string, exists bool) {
	v := m.target_img
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetImg returns the old "target_img" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldTargetImg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetImg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetImg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetImg: %w", err)
	}
	return oldValue.TargetImg, nil
}

// ClearTargetImg clears the value of the "target_img" field.
func (m *DevBuildMutation) ClearTargetImg() {
	m.target_img = nil
	m.clearedFields[devbuild.FieldTargetImg] = struct{}{}
}

// TargetImgCleared returns if the "target_img" field was cleared in this mutation.
func (m *DevBuildMutation) TargetImgCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldTargetImg]
	return ok
}

// ResetTargetImg resets all changes to the "target_img" field.
func (m *DevBuildMutation) ResetTargetImg() {
	m.target_img = nil
	delete(m.clearedFields, devbuild.FieldTargetImg)
}

// SetPipelineEngine sets the "pipeline_engine" field.
func (m *DevBuildMutation) SetPipelineEngine(s string) {
	m.pipeline_engine = &s
}

// PipelineEngine returns the value of the "pipeline_engine" field in the mutation.
func (m *DevBuildMutation) PipelineEngine() (r string, exists bool) {
	v := m.pipeline_engine
	if v == nil {
		return
	}
	return *v, true
}

// OldPipelineEngine returns the old "pipeline_engine" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldPipelineEngine(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPipelineEngine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPipelineEngine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPipelineEngine: %w", err)
	}
	return oldValue.PipelineEngine, nil
}

// ClearPipelineEngine clears the value of the "pipeline_engine" field.
func (m *DevBuildMutation) ClearPipelineEngine() {
	m.pipeline_engine = nil
	m.clearedFields[devbuild.FieldPipelineEngine] = struct{}{}
}

// PipelineEngineCleared returns if the "pipeline_engine" field was cleared in this mutation.
func (m *DevBuildMutation) PipelineEngineCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldPipelineEngine]
	return ok
}

// ResetPipelineEngine resets all changes to the "pipeline_engine" field.
func (m *DevBuildMutation) ResetPipelineEngine() {
	m.pipeline_engine = nil
	delete(m.clearedFields, devbuild.FieldPipelineEngine)
}

// SetBuilderImg sets the "builder_img" field.
func (m *DevBuildMutation) SetBuilderImg(s string) {
	m.builder_img = &s
}

// BuilderImg returns the value of the "builder_img" field in the mutation.
func (m *DevBuildMutation) BuilderImg() (r string, exists bool) {
	v := m.builder_img
	if v == nil {
		return
	}
	return *v, true
}

// OldBuilderImg returns the old "builder_img" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldBuilderImg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBuilderImg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBuilderImg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuilderImg: %w", err)
	}
	return oldValue.BuilderImg, nil
}

// ClearBuilderImg clears the value of the "builder_img" field.
func (m *DevBuildMutation) ClearBuilderImg() {
	m.builder_img = nil
	m.clearedFields[devbuild.FieldBuilderImg] = struct{}{}
}

// BuilderImgCleared returns if the "builder_img" field was cleared in this mutation.
func (m *DevBuildMutation) BuilderImgCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldBuilderImg]
	return ok
}

// ResetBuilderImg resets all changes to the "builder_img" field.
func (m *DevBuildMutation) ResetBuilderImg() {
	m.builder_img = nil
	delete(m.clearedFields, devbuild.FieldBuilderImg)
}

// SetBuildEnv sets the "build_env" field.
func (m *DevBuildMutation) SetBuildEnv(s string) {
	m.build_env = &s
}

// BuildEnv returns the value of the "build_env" field in the mutation.
func (m *DevBuildMutation) BuildEnv() (r string, exists bool) {
	v := m.build_env
	if v == nil {
		return
	}
	return *v, true
}

// OldBuildEnv returns the old "build_env" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldBuildEnv(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBuildEnv is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBuildEnv requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuildEnv: %w", err)
	}
	return oldValue.BuildEnv, nil
}

// ClearBuildEnv clears the value of the "build_env" field.
func (m *DevBuildMutation) ClearBuildEnv() {
	m.build_env = nil
	m.clearedFields[devbuild.FieldBuildEnv] = struct{}{}
}

// BuildEnvCleared returns if the "build_env" field was cleared in this mutation.
func (m *DevBuildMutation) BuildEnvCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldBuildEnv]
	return ok
}

// ResetBuildEnv resets all changes to the "build_env" field.
func (m *DevBuildMutation) ResetBuildEnv() {
	m.build_env = nil
	delete(m.clearedFields, devbuild.FieldBuildEnv)
}

// SetFeatures sets the "features" field.
func (m *DevBuildMutation) SetFeatures(s string) {
	m.features = &s
}

// Features returns the value of the "features" field in the mutation.
func (m *DevBuildMutation) Features() (r string, exists bool) {
	v := m.features
	if v == nil {
		return
	}
	return *v, true
}

// OldFeatures returns the old "features" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldFeatures(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeatures is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeatures requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeatures: %w", err)
	}
	return oldValue.Features, nil
}

// ClearFeatures clears the value of the "features" field.
func (m *DevBuildMutation) ClearFeatures() {
	m.features = nil
	m.clearedFields[devbuild.FieldFeatures] = struct{}{}
}

// FeaturesCleared returns if the "features" field was cleared in this mutation.
func (m *DevBuildMutation) FeaturesCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldFeatures]
	return ok
}

// ResetFeatures resets all changes to the "features" field.
func (m *DevBuildMutation) ResetFeatures() {
	m.features = nil
	delete(m.clearedFields, devbuild.FieldFeatures)
}

// SetProductBaseImg sets the "product_base_img" field.
func (m *DevBuildMutation) SetProductBaseImg(s string) {
	m.product_base_img = &s
}

// ProductBaseImg returns the value of the "product_base_img" field in the mutation.
func (m *DevBuildMutation) ProductBaseImg() (r string, exists bool) {
	v := m.product_base_img
	if v == nil {
		return
	}
	return *v, true
}

// OldProductBaseImg returns the old "product_base_img" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldProductBaseImg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductBaseImg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductBaseImg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductBaseImg: %w", err)
	}
	return oldValue.ProductBaseImg, nil
}

// ClearProductBaseImg clears the value of the "product_base_img" field.
func (m *DevBuildMutation) ClearProductBaseImg() {
	m.product_base_img = nil
	m.clearedFields[devbuild.FieldProductBaseImg] = struct{}{}
}

// ProductBaseImgCleared returns if the "product_base_img" field was cleared in this mutation.
func (m *DevBuildMutation) ProductBaseImgCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldProductBaseImg]
	return ok
}

// ResetProductBaseImg resets all changes to the "product_base_img" field.
func (m *DevBuildMutation) ResetProductBaseImg() {
	m.product_base_img = nil
	delete(m.clearedFields, devbuild.FieldProductBaseImg)
}

// SetProductDockerfile sets the "product_dockerfile" field.
func (m *DevBuildMutation) SetProductDockerfile(s string) {
	m.product_dockerfile = &s
}

// ProductDockerfile returns the value of the "product_dockerfile" field in the mutation.
func (m *DevBuildMutation) ProductDockerfile() (r string, exists bool) {
	v := m.product_dockerfile
	if v == nil {
		return
	}
	return *v, true
}

// OldProductDockerfile returns the old "product_dockerfile" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldProductDockerfile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductDockerfile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductDockerfile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductDockerfile: %w", err)
	}
	return oldValue.ProductDockerfile, nil
}

// ClearProductDockerfile clears the value of the "product_dockerfile" field.
func (m *DevBuildMutation) ClearProductDockerfile() {
	m.product_dockerfile = nil
	m.clearedFields[devbuild.FieldProductDockerfile] = struct{}{}
}

// ProductDockerfileCleared returns if the "product_dockerfile" field was cleared in this mutation.
func (m *DevBuildMutation) ProductDockerfileCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldProductDockerfile]
	return ok
}

// ResetProductDockerfile resets all changes to the "product_dockerfile" field.
func (m *DevBuildMutation) ResetProductDockerfile() {
	m.product_dockerfile = nil
	delete(m.clearedFields, devbuild.FieldProductDockerfile)
}

// SetStatus sets the "status" field.
func (m *DevBuildMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *DevBuildMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *DevBuildMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[devbuild.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *DevBuildMutation) StatusCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *DevBuildMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, devbuild.FieldStatus)
}

// SetErrMsg sets the "err_msg" field.
func (m *DevBuildMutation) SetErrMsg(s string) {
	m.err_msg = &s
}

// ErrMsg returns the value of the "err_msg" field in the mutation.
func (m *DevBuildMutation) ErrMsg() (r string, exists bool) {
	v := m.err_msg
	if v == nil {
		return
	}
	return *v, true
}

// OldErrMsg returns the old "err_msg" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldErrMsg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrMsg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrMsg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrMsg: %w", err)
	}
	return oldValue.ErrMsg, nil
}

// ClearErrMsg clears the value of the "err_msg" field.
func (m *DevBuildMutation) ClearErrMsg() {
	m.err_msg = nil
	m.clearedFields[devbuild.FieldErrMsg] = struct{}{}
}

// ErrMsgCleared returns if the "err_msg" field was cleared in this mutation.
func (m *DevBuildMutation) ErrMsgCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldErrMsg]
	return ok
}

// ResetErrMsg resets all changes to the "err_msg" field.
func (m *DevBuildMutation) ResetErrMsg() {
	m.err_msg = nil
	delete(m.clearedFields, devbuild.FieldErrMsg)
}

// SetPipelineBuildID sets the "pipeline_build_id" field.
func (m *DevBuildMutation) SetPipelineBuildID(i int64) {
	m.pipeline_build_id = &i
	m.addpipeline_build_id = nil
}

// PipelineBuildID returns the value of the "pipeline_build_id" field in the mutation.
func (m *DevBuildMutation) PipelineBuildID() (r int64, exists bool) {
	v := m.pipeline_build_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPipelineBuildID returns the old "pipeline_build_id" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldPipelineBuildID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPipelineBuildID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPipelineBuildID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPipelineBuildID: %w", err)
	}
	return oldValue.PipelineBuildID, nil
}

// AddPipelineBuildID adds i to the "pipeline_build_id" field.
func (m *DevBuildMutation) AddPipelineBuildID(i int64) {
	if m.addpipeline_build_id != nil {
		*m.addpipeline_build_id += i
	} else {
		m.addpipeline_build_id = &i
	}
}

// AddedPipelineBuildID returns the value that was added to the "pipeline_build_id" field in this mutation.
func (m *DevBuildMutation) AddedPipelineBuildID() (r int64, exists bool) {
	v := m.addpipeline_build_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPipelineBuildID clears the value of the "pipeline_build_id" field.
func (m *DevBuildMutation) ClearPipelineBuildID() {
	m.pipeline_build_id = nil
	m.addpipeline_build_id = nil
	m.clearedFields[devbuild.FieldPipelineBuildID] = struct{}{}
}

// PipelineBuildIDCleared returns if the "pipeline_build_id" field was cleared in this mutation.
func (m *DevBuildMutation) PipelineBuildIDCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldPipelineBuildID]
	return ok
}

// ResetPipelineBuildID resets all changes to the "pipeline_build_id" field.
func (m *DevBuildMutation) ResetPipelineBuildID() {
	m.pipeline_build_id = nil
	m.addpipeline_build_id = nil
	delete(m.clearedFields, devbuild.FieldPipelineBuildID)
}

// SetPipelineStartAt sets the "pipeline_start_at" field.
func (m *DevBuildMutation) SetPipelineStartAt(t time.Time) {
	m.pipeline_start_at = &t
}

// PipelineStartAt returns the value of the "pipeline_start_at" field in the mutation.
func (m *DevBuildMutation) PipelineStartAt() (r time.Time, exists bool) {
	v := m.pipeline_start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPipelineStartAt returns the old "pipeline_start_at" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldPipelineStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPipelineStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPipelineStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPipelineStartAt: %w", err)
	}
	return oldValue.PipelineStartAt, nil
}

// ClearPipelineStartAt clears the value of the "pipeline_start_at" field.
func (m *DevBuildMutation) ClearPipelineStartAt() {
	m.pipeline_start_at = nil
	m.clearedFields[devbuild.FieldPipelineStartAt] = struct{}{}
}

// PipelineStartAtCleared returns if the "pipeline_start_at" field was cleared in this mutation.
func (m *DevBuildMutation) PipelineStartAtCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldPipelineStartAt]
	return ok
}

// ResetPipelineStartAt resets all changes to the "pipeline_start_at" field.
func (m *DevBuildMutation) ResetPipelineStartAt() {
	m.pipeline_start_at = nil
	delete(m.clearedFields, devbuild.FieldPipelineStartAt)
}

// SetPipelineEndAt sets the "pipeline_end_at" field.
func (m *DevBuildMutation) SetPipelineEndAt(t time.Time) {
	m.pipeline_end_at = &t
}

// PipelineEndAt returns the value of the "pipeline_end_at" field in the mutation.
func (m *DevBuildMutation) PipelineEndAt() (r time.Time, exists bool) {
	v := m.pipeline_end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPipelineEndAt returns the old "pipeline_end_at" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldPipelineEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPipelineEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPipelineEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPipelineEndAt: %w", err)
	}
	return oldValue.PipelineEndAt, nil
}

// ClearPipelineEndAt clears the value of the "pipeline_end_at" field.
func (m *DevBuildMutation) ClearPipelineEndAt() {
	m.pipeline_end_at = nil
	m.clearedFields[devbuild.FieldPipelineEndAt] = struct{}{}
}

// PipelineEndAtCleared returns if the "pipeline_end_at" field was cleared in this mutation.
func (m *DevBuildMutation) PipelineEndAtCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldPipelineEndAt]
	return ok
}

// ResetPipelineEndAt resets all changes to the "pipeline_end_at" field.
func (m *DevBuildMutation) ResetPipelineEndAt() {
	m.pipeline_end_at = nil
	delete(m.clearedFields, devbuild.FieldPipelineEndAt)
}

// SetBuildReport sets the "build_report" field.
func (m *DevBuildMutation) SetBuildReport(value map[string]interface{}) {
	m.build_report = &value
}

// BuildReport returns the value of the "build_report" field in the mutation.
func (m *DevBuildMutation) BuildReport() (r map[string]interface{}, exists bool) {
	v := m.build_report
	if v == nil {
		return
	}
	return *v, true
}

// OldBuildReport returns the old "build_report" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldBuildReport(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBuildReport is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBuildReport requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuildReport: %w", err)
	}
	return oldValue.BuildReport, nil
}

// ClearBuildReport clears the value of the "build_report" field.
func (m *DevBuildMutation) ClearBuildReport() {
	m.build_report = nil
	m.clearedFields[devbuild.FieldBuildReport] = struct{}{}
}

// BuildReportCleared returns if the "build_report" field was cleared in this mutation.
func (m *DevBuildMutation) BuildReportCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldBuildReport]
	return ok
}

// ResetBuildReport resets all changes to the "build_report" field.
func (m *DevBuildMutation) ResetBuildReport() {
	m.build_report = nil
	delete(m.clearedFields, devbuild.FieldBuildReport)
}

// SetTektonStatus sets the "tekton_status" field.
func (m *DevBuildMutation) SetTektonStatus(value map[string]interface{}) {
	m.tekton_status = &value
}

// TektonStatus returns the value of the "tekton_status" field in the mutation.
func (m *DevBuildMutation) TektonStatus() (r map[string]interface{}, exists bool) {
	v := m.tekton_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTektonStatus returns the old "tekton_status" field's value of the DevBuild entity.
// If the DevBuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DevBuildMutation) OldTektonStatus(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTektonStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTektonStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTektonStatus: %w", err)
	}
	return oldValue.TektonStatus, nil
}

// ClearTektonStatus clears the value of the "tekton_status" field.
func (m *DevBuildMutation) ClearTektonStatus() {
	m.tekton_status = nil
	m.clearedFields[devbuild.FieldTektonStatus] = struct{}{}
}

// TektonStatusCleared returns if the "tekton_status" field was cleared in this mutation.
func (m *DevBuildMutation) TektonStatusCleared() bool {
	_, ok := m.clearedFields[devbuild.FieldTektonStatus]
	return ok
}

// ResetTektonStatus resets all changes to the "tekton_status" field.
func (m *DevBuildMutation) ResetTektonStatus() {
	m.tekton_status = nil
	delete(m.clearedFields, devbuild.FieldTektonStatus)
}

// Where appends a list predicates to the DevBuildMutation builder.
func (m *DevBuildMutation) Where(ps ...predicate.DevBuild) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DevBuildMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DevBuildMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DevBuild, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DevBuildMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DevBuildMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DevBuild).
func (m *DevBuildMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DevBuildMutation) Fields() []string {
	fields := make([]string, 0, 26)
	if m.created_by != nil {
		fields = append(fields, devbuild.FieldCreatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, devbuild.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, devbuild.FieldUpdatedAt)
	}
	if m.product != nil {
		fields = append(fields, devbuild.FieldProduct)
	}
	if m.edition != nil {
		fields = append(fields, devbuild.FieldEdition)
	}
	if m.version != nil {
		fields = append(fields, devbuild.FieldVersion)
	}
	if m.github_repo != nil {
		fields = append(fields, devbuild.FieldGithubRepo)
	}
	if m.git_ref != nil {
		fields = append(fields, devbuild.FieldGitRef)
	}
	if m.git_hash != nil {
		fields = append(fields, devbuild.FieldGitHash)
	}
	if m.plugin_git_ref != nil {
		fields = append(fields, devbuild.FieldPluginGitRef)
	}
	if m.is_hotfix != nil {
		fields = append(fields, devbuild.FieldIsHotfix)
	}
	if m.is_push_gcr != nil {
		fields = append(fields, devbuild.FieldIsPushGcr)
	}
	if m.target_img != nil {
		fields = append(fields, devbuild.FieldTargetImg)
	}
	if m.pipeline_engine != nil {
		fields = append(fields, devbuild.FieldPipelineEngine)
	}
	if m.builder_img != nil {
		fields = append(fields, devbuild.FieldBuilderImg)
	}
	if m.build_env != nil {
		fields = append(fields, devbuild.FieldBuildEnv)
	}
	if m.features != nil {
		fields = append(fields, devbuild.FieldFeatures)
	}
	if m.product_base_img != nil {
		fields = append(fields, devbuild.FieldProductBaseImg)
	}
	if m.product_dockerfile != nil {
		fields = append(fields, devbuild.FieldProductDockerfile)
	}
	if m.status != nil {
		fields = append(fields, devbuild.FieldStatus)
	}
	if m.err_msg != nil {
		fields = append(fields, devbuild.FieldErrMsg)
	}
	if m.pipeline_build_id != nil {
		fields = append(fields, devbuild.FieldPipelineBuildID)
	}
	if m.pipeline_start_at != nil {
		fields = append(fields, devbuild.FieldPipelineStartAt)
	}
	if m.pipeline_end_at != nil {
		fields = append(fields, devbuild.FieldPipelineEndAt)
	}
	if m.build_report != nil {
		fields = append(fields, devbuild.FieldBuildReport)
	}
	if m.tekton_status != nil {
		fields = append(fields, devbuild.FieldTektonStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DevBuildMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case devbuild.FieldCreatedBy:
		return m.CreatedBy()
	case devbuild.FieldCreatedAt:
		return m.CreatedAt()
	case devbuild.FieldUpdatedAt:
		return m.UpdatedAt()
	case devbuild.FieldProduct:
		return m.Product()
	case devbuild.FieldEdition:
		return m.Edition()
	case devbuild.FieldVersion:
		return m.Version()
	case devbuild.FieldGithubRepo:
		return m.GithubRepo()
	case devbuild.FieldGitRef:
		return m.GitRef()
	case devbuild.FieldGitHash:
		return m.GitHash()
	case devbuild.FieldPluginGitRef:
		return m.PluginGitRef()
	case devbuild.FieldIsHotfix:
		return m.IsHotfix()
	case devbuild.FieldIsPushGcr:
		return m.IsPushGcr()
	case devbuild.FieldTargetImg:
		return m.TargetImg()
	case devbuild.FieldPipelineEngine:
		return m.PipelineEngine()
	case devbuild.FieldBuilderImg:
		return m.BuilderImg()
	case devbuild.FieldBuildEnv:
		return m.BuildEnv()
	case devbuild.FieldFeatures:
		return m.Features()
	case devbuild.FieldProductBaseImg:
		return m.ProductBaseImg()
	case devbuild.FieldProductDockerfile:
		return m.ProductDockerfile()
	case devbuild.FieldStatus:
		return m.Status()
	case devbuild.FieldErrMsg:
		return m.ErrMsg()
	case devbuild.FieldPipelineBuildID:
		return m.PipelineBuildID()
	case devbuild.FieldPipelineStartAt:
		return m.PipelineStartAt()
	case devbuild.FieldPipelineEndAt:
		return m.PipelineEndAt()
	case devbuild.FieldBuildReport:
		return m.BuildReport()
	case devbuild.FieldTektonStatus:
		return m.TektonStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DevBuildMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case devbuild.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case devbuild.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case devbuild.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case devbuild.FieldProduct:
		return m.OldProduct(ctx)
	case devbuild.FieldEdition:
		return m.OldEdition(ctx)
	case devbuild.FieldVersion:
		return m.OldVersion(ctx)
	case devbuild.FieldGithubRepo:
		return m.OldGithubRepo(ctx)
	case devbuild.FieldGitRef:
		return m.OldGitRef(ctx)
	case devbuild.FieldGitHash:
		return m.OldGitHash(ctx)
	case devbuild.FieldPluginGitRef:
		return m.OldPluginGitRef(ctx)
	case devbuild.FieldIsHotfix:
		return m.OldIsHotfix(ctx)
	case devbuild.FieldIsPushGcr:
		return m.OldIsPushGcr(ctx)
	case devbuild.FieldTargetImg:
		return m.OldTargetImg(ctx)
	case devbuild.FieldPipelineEngine:
		return m.OldPipelineEngine(ctx)
	case devbuild.FieldBuilderImg:
		return m.OldBuilderImg(ctx)
	case devbuild.FieldBuildEnv:
		return m.OldBuildEnv(ctx)
	case devbuild.FieldFeatures:
		return m.OldFeatures(ctx)
	case devbuild.FieldProductBaseImg:
		return m.OldProductBaseImg(ctx)
	case devbuild.FieldProductDockerfile:
		return m.OldProductDockerfile(ctx)
	case devbuild.FieldStatus:
		return m.OldStatus(ctx)
	case devbuild.FieldErrMsg:
		return m.OldErrMsg(ctx)
	case devbuild.FieldPipelineBuildID:
		return m.OldPipelineBuildID(ctx)
	case devbuild.FieldPipelineStartAt:
		return m.OldPipelineStartAt(ctx)
	case devbuild.FieldPipelineEndAt:
		return m.OldPipelineEndAt(ctx)
	case devbuild.FieldBuildReport:
		return m.OldBuildReport(ctx)
	case devbuild.FieldTektonStatus:
		return m.OldTektonStatus(ctx)
	}
	return nil, fmt.Errorf("unknown DevBuild field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DevBuildMutation) SetField(name string, value ent.Value) error {
	switch name {
	case devbuild.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case devbuild.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case devbuild.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case devbuild.FieldProduct:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProduct(v)
		return nil
	case devbuild.FieldEdition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEdition(v)
		return nil
	case devbuild.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case devbuild.FieldGithubRepo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGithubRepo(v)
		return nil
	case devbuild.FieldGitRef:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGitRef(v)
		return nil
	case devbuild.FieldGitHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGitHash(v)
		return nil
	case devbuild.FieldPluginGitRef:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPluginGitRef(v)
		return nil
	case devbuild.FieldIsHotfix:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsHotfix(v)
		return nil
	case devbuild.FieldIsPushGcr:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPushGcr(v)
		return nil
	case devbuild.FieldTargetImg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetImg(v)
		return nil
	case devbuild.FieldPipelineEngine:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPipelineEngine(v)
		return nil
	case devbuild.FieldBuilderImg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuilderImg(v)
		return nil
	case devbuild.FieldBuildEnv:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuildEnv(v)
		return nil
	case devbuild.FieldFeatures:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeatures(v)
		return nil
	case devbuild.FieldProductBaseImg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductBaseImg(v)
		return nil
	case devbuild.FieldProductDockerfile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductDockerfile(v)
		return nil
	case devbuild.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case devbuild.FieldErrMsg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrMsg(v)
		return nil
	case devbuild.FieldPipelineBuildID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPipelineBuildID(v)
		return nil
	case devbuild.FieldPipelineStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPipelineStartAt(v)
		return nil
	case devbuild.FieldPipelineEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPipelineEndAt(v)
		return nil
	case devbuild.FieldBuildReport:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuildReport(v)
		return nil
	case devbuild.FieldTektonStatus:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTektonStatus(v)
		return nil
	}
	return fmt.Errorf("unknown DevBuild field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DevBuildMutation) AddedFields() []string {
	var fields []string
	if m.addpipeline_build_id != nil {
		fields = append(fields, devbuild.FieldPipelineBuildID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DevBuildMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case devbuild.FieldPipelineBuildID:
		return m.AddedPipelineBuildID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DevBuildMutation) AddField(name string, value ent.Value) error {
	switch name {
	case devbuild.FieldPipelineBuildID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPipelineBuildID(v)
		return nil
	}
	return fmt.Errorf("unknown DevBuild numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DevBuildMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(devbuild.FieldCreatedBy) {
		fields = append(fields, devbuild.FieldCreatedBy)
	}
	if m.FieldCleared(devbuild.FieldProduct) {
		fields = append(fields, devbuild.FieldProduct)
	}
	if m.FieldCleared(devbuild.FieldEdition) {
		fields = append(fields, devbuild.FieldEdition)
	}
	if m.FieldCleared(devbuild.FieldVersion) {
		fields = append(fields, devbuild.FieldVersion)
	}
	if m.FieldCleared(devbuild.FieldGithubRepo) {
		fields = append(fields, devbuild.FieldGithubRepo)
	}
	if m.FieldCleared(devbuild.FieldGitRef) {
		fields = append(fields, devbuild.FieldGitRef)
	}
	if m.FieldCleared(devbuild.FieldGitHash) {
		fields = append(fields, devbuild.FieldGitHash)
	}
	if m.FieldCleared(devbuild.FieldPluginGitRef) {
		fields = append(fields, devbuild.FieldPluginGitRef)
	}
	if m.FieldCleared(devbuild.FieldIsPushGcr) {
		fields = append(fields, devbuild.FieldIsPushGcr)
	}
	if m.FieldCleared(devbuild.FieldTargetImg) {
		fields = append(fields, devbuild.FieldTargetImg)
	}
	if m.FieldCleared(devbuild.FieldPipelineEngine) {
		fields = append(fields, devbuild.FieldPipelineEngine)
	}
	if m.FieldCleared(devbuild.FieldBuilderImg) {
		fields = append(fields, devbuild.FieldBuilderImg)
	}
	if m.FieldCleared(devbuild.FieldBuildEnv) {
		fields = append(fields, devbuild.FieldBuildEnv)
	}
	if m.FieldCleared(devbuild.FieldFeatures) {
		fields = append(fields, devbuild.FieldFeatures)
	}
	if m.FieldCleared(devbuild.FieldProductBaseImg) {
		fields = append(fields, devbuild.FieldProductBaseImg)
	}
	if m.FieldCleared(devbuild.FieldProductDockerfile) {
		fields = append(fields, devbuild.FieldProductDockerfile)
	}
	if m.FieldCleared(devbuild.FieldStatus) {
		fields = append(fields, devbuild.FieldStatus)
	}
	if m.FieldCleared(devbuild.FieldErrMsg) {
		fields = append(fields, devbuild.FieldErrMsg)
	}
	if m.FieldCleared(devbuild.FieldPipelineBuildID) {
		fields = append(fields, devbuild.FieldPipelineBuildID)
	}
	if m.FieldCleared(devbuild.FieldPipelineStartAt) {
		fields = append(fields, devbuild.FieldPipelineStartAt)
	}
	if m.FieldCleared(devbuild.FieldPipelineEndAt) {
		fields = append(fields, devbuild.FieldPipelineEndAt)
	}
	if m.FieldCleared(devbuild.FieldBuildReport) {
		fields = append(fields, devbuild.FieldBuildReport)
	}
	if m.FieldCleared(devbuild.FieldTektonStatus) {
		fields = append(fields, devbuild.FieldTektonStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DevBuildMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DevBuildMutation) ClearField(name string) error {
	switch name {
	case devbuild.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case devbuild.FieldProduct:
		m.ClearProduct()
		return nil
	case devbuild.FieldEdition:
		m.ClearEdition()
		return nil
	case devbuild.FieldVersion:
		m.ClearVersion()
		return nil
	case devbuild.FieldGithubRepo:
		m.ClearGithubRepo()
		return nil
	case devbuild.FieldGitRef:
		m.ClearGitRef()
		return nil
	case devbuild.FieldGitHash:
		m.ClearGitHash()
		return nil
	case devbuild.FieldPluginGitRef:
		m.ClearPluginGitRef()
		return nil
	case devbuild.FieldIsPushGcr:
		m.ClearIsPushGcr()
		return nil
	case devbuild.FieldTargetImg:
		m.ClearTargetImg()
		return nil
	case devbuild.FieldPipelineEngine:
		m.ClearPipelineEngine()
		return nil
	case devbuild.FieldBuilderImg:
		m.ClearBuilderImg()
		return nil
	case devbuild.FieldBuildEnv:
		m.ClearBuildEnv()
		return nil
	case devbuild.FieldFeatures:
		m.ClearFeatures()
		return nil
	case devbuild.FieldProductBaseImg:
		m.ClearProductBaseImg()
		return nil
	case devbuild.FieldProductDockerfile:
		m.ClearProductDockerfile()
		return nil
	case devbuild.FieldStatus:
		m.ClearStatus()
		return nil
	case devbuild.FieldErrMsg:
		m.ClearErrMsg()
		return nil
	case devbuild.FieldPipelineBuildID:
		m.ClearPipelineBuildID()
		return nil
	case devbuild.FieldPipelineStartAt:
		m.ClearPipelineStartAt()
		return nil
	case devbuild.FieldPipelineEndAt:
		m.ClearPipelineEndAt()
		return nil
	case devbuild.FieldBuildReport:
		m.ClearBuildReport()
		return nil
	case devbuild.FieldTektonStatus:
		m.ClearTektonStatus()
		return nil
	}
	return fmt.Errorf("unknown DevBuild nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DevBuildMutation) ResetField(name string) error {
	switch name {
	case devbuild.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case devbuild.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case devbuild.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case devbuild.FieldProduct:
		m.ResetProduct()
		return nil
	case devbuild.FieldEdition:
		m.ResetEdition()
		return nil
	case devbuild.FieldVersion:
		m.ResetVersion()
		return nil
	case devbuild.FieldGithubRepo:
		m.ResetGithubRepo()
		return nil
	case devbuild.FieldGitRef:
		m.ResetGitRef()
		return nil
	case devbuild.FieldGitHash:
		m.ResetGitHash()
		return nil
	case devbuild.FieldPluginGitRef:
		m.ResetPluginGitRef()
		return nil
	case devbuild.FieldIsHotfix:
		m.ResetIsHotfix()
		return nil
	case devbuild.FieldIsPushGcr:
		m.ResetIsPushGcr()
		return nil
	case devbuild.FieldTargetImg:
		m.ResetTargetImg()
		return nil
	case devbuild.FieldPipelineEngine:
		m.ResetPipelineEngine()
		return nil
	case devbuild.FieldBuilderImg:
		m.ResetBuilderImg()
		return nil
	case devbuild.FieldBuildEnv:
		m.ResetBuildEnv()
		return nil
	case devbuild.FieldFeatures:
		m.ResetFeatures()
		return nil
	case devbuild.FieldProductBaseImg:
		m.ResetProductBaseImg()
		return nil
	case devbuild.FieldProductDockerfile:
		m.ResetProductDockerfile()
		return nil
	case devbuild.FieldStatus:
		m.ResetStatus()
		return nil
	case devbuild.FieldErrMsg:
		m.ResetErrMsg()
		return nil
	case devbuild.FieldPipelineBuildID:
		m.ResetPipelineBuildID()
		return nil
	case devbuild.FieldPipelineStartAt:
		m.ResetPipelineStartAt()
		return nil
	case devbuild.FieldPipelineEndAt:
		m.ResetPipelineEndAt()
		return nil
	case devbuild.FieldBuildReport:
		m.ResetBuildReport()
		return nil
	case devbuild.FieldTektonStatus:
		m.ResetTektonStatus()
		return nil
	}
	return fmt.Errorf("unknown DevBuild field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DevBuildMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DevBuildMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DevBuildMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DevBuildMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DevBuildMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DevBuildMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DevBuildMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DevBuild unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DevBuildMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DevBuild edge %s", name)
}
