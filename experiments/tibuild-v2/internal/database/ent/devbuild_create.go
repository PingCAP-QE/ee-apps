// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PingCAP-QE/ee-apps/tibuild/internal/database/ent/devbuild"
)

// DevBuildCreate is the builder for creating a DevBuild entity.
type DevBuildCreate struct {
	config
	mutation *DevBuildMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (dbc *DevBuildCreate) SetCreatedBy(s string) *DevBuildCreate {
	dbc.mutation.SetCreatedBy(s)
	return dbc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableCreatedBy(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetCreatedBy(*s)
	}
	return dbc
}

// SetCreatedAt sets the "created_at" field.
func (dbc *DevBuildCreate) SetCreatedAt(t time.Time) *DevBuildCreate {
	dbc.mutation.SetCreatedAt(t)
	return dbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableCreatedAt(t *time.Time) *DevBuildCreate {
	if t != nil {
		dbc.SetCreatedAt(*t)
	}
	return dbc
}

// SetUpdatedAt sets the "updated_at" field.
func (dbc *DevBuildCreate) SetUpdatedAt(t time.Time) *DevBuildCreate {
	dbc.mutation.SetUpdatedAt(t)
	return dbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableUpdatedAt(t *time.Time) *DevBuildCreate {
	if t != nil {
		dbc.SetUpdatedAt(*t)
	}
	return dbc
}

// SetProduct sets the "product" field.
func (dbc *DevBuildCreate) SetProduct(s string) *DevBuildCreate {
	dbc.mutation.SetProduct(s)
	return dbc
}

// SetNillableProduct sets the "product" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableProduct(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetProduct(*s)
	}
	return dbc
}

// SetEdition sets the "edition" field.
func (dbc *DevBuildCreate) SetEdition(s string) *DevBuildCreate {
	dbc.mutation.SetEdition(s)
	return dbc
}

// SetNillableEdition sets the "edition" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableEdition(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetEdition(*s)
	}
	return dbc
}

// SetVersion sets the "version" field.
func (dbc *DevBuildCreate) SetVersion(s string) *DevBuildCreate {
	dbc.mutation.SetVersion(s)
	return dbc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableVersion(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetVersion(*s)
	}
	return dbc
}

// SetGithubRepo sets the "github_repo" field.
func (dbc *DevBuildCreate) SetGithubRepo(s string) *DevBuildCreate {
	dbc.mutation.SetGithubRepo(s)
	return dbc
}

// SetNillableGithubRepo sets the "github_repo" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableGithubRepo(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetGithubRepo(*s)
	}
	return dbc
}

// SetGitRef sets the "git_ref" field.
func (dbc *DevBuildCreate) SetGitRef(s string) *DevBuildCreate {
	dbc.mutation.SetGitRef(s)
	return dbc
}

// SetNillableGitRef sets the "git_ref" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableGitRef(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetGitRef(*s)
	}
	return dbc
}

// SetGitSha sets the "git_sha" field.
func (dbc *DevBuildCreate) SetGitSha(s string) *DevBuildCreate {
	dbc.mutation.SetGitSha(s)
	return dbc
}

// SetNillableGitSha sets the "git_sha" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableGitSha(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetGitSha(*s)
	}
	return dbc
}

// SetPluginGitRef sets the "plugin_git_ref" field.
func (dbc *DevBuildCreate) SetPluginGitRef(s string) *DevBuildCreate {
	dbc.mutation.SetPluginGitRef(s)
	return dbc
}

// SetNillablePluginGitRef sets the "plugin_git_ref" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillablePluginGitRef(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetPluginGitRef(*s)
	}
	return dbc
}

// SetIsHotfix sets the "is_hotfix" field.
func (dbc *DevBuildCreate) SetIsHotfix(b bool) *DevBuildCreate {
	dbc.mutation.SetIsHotfix(b)
	return dbc
}

// SetNillableIsHotfix sets the "is_hotfix" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableIsHotfix(b *bool) *DevBuildCreate {
	if b != nil {
		dbc.SetIsHotfix(*b)
	}
	return dbc
}

// SetIsPushGcr sets the "is_push_gcr" field.
func (dbc *DevBuildCreate) SetIsPushGcr(b bool) *DevBuildCreate {
	dbc.mutation.SetIsPushGcr(b)
	return dbc
}

// SetNillableIsPushGcr sets the "is_push_gcr" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableIsPushGcr(b *bool) *DevBuildCreate {
	if b != nil {
		dbc.SetIsPushGcr(*b)
	}
	return dbc
}

// SetTargetImg sets the "target_img" field.
func (dbc *DevBuildCreate) SetTargetImg(s string) *DevBuildCreate {
	dbc.mutation.SetTargetImg(s)
	return dbc
}

// SetNillableTargetImg sets the "target_img" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableTargetImg(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetTargetImg(*s)
	}
	return dbc
}

// SetPipelineEngine sets the "pipeline_engine" field.
func (dbc *DevBuildCreate) SetPipelineEngine(s string) *DevBuildCreate {
	dbc.mutation.SetPipelineEngine(s)
	return dbc
}

// SetNillablePipelineEngine sets the "pipeline_engine" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillablePipelineEngine(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetPipelineEngine(*s)
	}
	return dbc
}

// SetBuilderImg sets the "builder_img" field.
func (dbc *DevBuildCreate) SetBuilderImg(s string) *DevBuildCreate {
	dbc.mutation.SetBuilderImg(s)
	return dbc
}

// SetNillableBuilderImg sets the "builder_img" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableBuilderImg(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetBuilderImg(*s)
	}
	return dbc
}

// SetBuildEnv sets the "build_env" field.
func (dbc *DevBuildCreate) SetBuildEnv(s string) *DevBuildCreate {
	dbc.mutation.SetBuildEnv(s)
	return dbc
}

// SetNillableBuildEnv sets the "build_env" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableBuildEnv(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetBuildEnv(*s)
	}
	return dbc
}

// SetFeatures sets the "features" field.
func (dbc *DevBuildCreate) SetFeatures(s string) *DevBuildCreate {
	dbc.mutation.SetFeatures(s)
	return dbc
}

// SetNillableFeatures sets the "features" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableFeatures(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetFeatures(*s)
	}
	return dbc
}

// SetProductBaseImg sets the "product_base_img" field.
func (dbc *DevBuildCreate) SetProductBaseImg(s string) *DevBuildCreate {
	dbc.mutation.SetProductBaseImg(s)
	return dbc
}

// SetNillableProductBaseImg sets the "product_base_img" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableProductBaseImg(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetProductBaseImg(*s)
	}
	return dbc
}

// SetProductDockerfile sets the "product_dockerfile" field.
func (dbc *DevBuildCreate) SetProductDockerfile(s string) *DevBuildCreate {
	dbc.mutation.SetProductDockerfile(s)
	return dbc
}

// SetNillableProductDockerfile sets the "product_dockerfile" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableProductDockerfile(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetProductDockerfile(*s)
	}
	return dbc
}

// SetStatus sets the "status" field.
func (dbc *DevBuildCreate) SetStatus(s string) *DevBuildCreate {
	dbc.mutation.SetStatus(s)
	return dbc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableStatus(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetStatus(*s)
	}
	return dbc
}

// SetErrMsg sets the "err_msg" field.
func (dbc *DevBuildCreate) SetErrMsg(s string) *DevBuildCreate {
	dbc.mutation.SetErrMsg(s)
	return dbc
}

// SetNillableErrMsg sets the "err_msg" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillableErrMsg(s *string) *DevBuildCreate {
	if s != nil {
		dbc.SetErrMsg(*s)
	}
	return dbc
}

// SetPipelineBuildID sets the "pipeline_build_id" field.
func (dbc *DevBuildCreate) SetPipelineBuildID(i int) *DevBuildCreate {
	dbc.mutation.SetPipelineBuildID(i)
	return dbc
}

// SetNillablePipelineBuildID sets the "pipeline_build_id" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillablePipelineBuildID(i *int) *DevBuildCreate {
	if i != nil {
		dbc.SetPipelineBuildID(*i)
	}
	return dbc
}

// SetPipelineStartAt sets the "pipeline_start_at" field.
func (dbc *DevBuildCreate) SetPipelineStartAt(t time.Time) *DevBuildCreate {
	dbc.mutation.SetPipelineStartAt(t)
	return dbc
}

// SetNillablePipelineStartAt sets the "pipeline_start_at" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillablePipelineStartAt(t *time.Time) *DevBuildCreate {
	if t != nil {
		dbc.SetPipelineStartAt(*t)
	}
	return dbc
}

// SetPipelineEndAt sets the "pipeline_end_at" field.
func (dbc *DevBuildCreate) SetPipelineEndAt(t time.Time) *DevBuildCreate {
	dbc.mutation.SetPipelineEndAt(t)
	return dbc
}

// SetNillablePipelineEndAt sets the "pipeline_end_at" field if the given value is not nil.
func (dbc *DevBuildCreate) SetNillablePipelineEndAt(t *time.Time) *DevBuildCreate {
	if t != nil {
		dbc.SetPipelineEndAt(*t)
	}
	return dbc
}

// SetBuildReport sets the "build_report" field.
func (dbc *DevBuildCreate) SetBuildReport(m map[string]interface{}) *DevBuildCreate {
	dbc.mutation.SetBuildReport(m)
	return dbc
}

// SetTektonStatus sets the "tekton_status" field.
func (dbc *DevBuildCreate) SetTektonStatus(m map[string]interface{}) *DevBuildCreate {
	dbc.mutation.SetTektonStatus(m)
	return dbc
}

// Mutation returns the DevBuildMutation object of the builder.
func (dbc *DevBuildCreate) Mutation() *DevBuildMutation {
	return dbc.mutation
}

// Save creates the DevBuild in the database.
func (dbc *DevBuildCreate) Save(ctx context.Context) (*DevBuild, error) {
	dbc.defaults()
	return withHooks(ctx, dbc.sqlSave, dbc.mutation, dbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dbc *DevBuildCreate) SaveX(ctx context.Context) *DevBuild {
	v, err := dbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dbc *DevBuildCreate) Exec(ctx context.Context) error {
	_, err := dbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dbc *DevBuildCreate) ExecX(ctx context.Context) {
	if err := dbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dbc *DevBuildCreate) defaults() {
	if _, ok := dbc.mutation.CreatedAt(); !ok {
		v := devbuild.DefaultCreatedAt()
		dbc.mutation.SetCreatedAt(v)
	}
	if _, ok := dbc.mutation.UpdatedAt(); !ok {
		v := devbuild.DefaultUpdatedAt()
		dbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dbc.mutation.IsHotfix(); !ok {
		v := devbuild.DefaultIsHotfix
		dbc.mutation.SetIsHotfix(v)
	}
	if _, ok := dbc.mutation.PipelineEngine(); !ok {
		v := devbuild.DefaultPipelineEngine
		dbc.mutation.SetPipelineEngine(v)
	}
	if _, ok := dbc.mutation.Status(); !ok {
		v := devbuild.DefaultStatus
		dbc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dbc *DevBuildCreate) check() error {
	if v, ok := dbc.mutation.CreatedBy(); ok {
		if err := devbuild.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "DevBuild.created_by": %w`, err)}
		}
	}
	if _, ok := dbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DevBuild.created_at"`)}
	}
	if _, ok := dbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DevBuild.updated_at"`)}
	}
	if v, ok := dbc.mutation.Product(); ok {
		if err := devbuild.ProductValidator(v); err != nil {
			return &ValidationError{Name: "product", err: fmt.Errorf(`ent: validator failed for field "DevBuild.product": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.Edition(); ok {
		if err := devbuild.EditionValidator(v); err != nil {
			return &ValidationError{Name: "edition", err: fmt.Errorf(`ent: validator failed for field "DevBuild.edition": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.Version(); ok {
		if err := devbuild.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "DevBuild.version": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.GithubRepo(); ok {
		if err := devbuild.GithubRepoValidator(v); err != nil {
			return &ValidationError{Name: "github_repo", err: fmt.Errorf(`ent: validator failed for field "DevBuild.github_repo": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.GitRef(); ok {
		if err := devbuild.GitRefValidator(v); err != nil {
			return &ValidationError{Name: "git_ref", err: fmt.Errorf(`ent: validator failed for field "DevBuild.git_ref": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.GitSha(); ok {
		if err := devbuild.GitShaValidator(v); err != nil {
			return &ValidationError{Name: "git_sha", err: fmt.Errorf(`ent: validator failed for field "DevBuild.git_sha": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.PluginGitRef(); ok {
		if err := devbuild.PluginGitRefValidator(v); err != nil {
			return &ValidationError{Name: "plugin_git_ref", err: fmt.Errorf(`ent: validator failed for field "DevBuild.plugin_git_ref": %w`, err)}
		}
	}
	if _, ok := dbc.mutation.IsHotfix(); !ok {
		return &ValidationError{Name: "is_hotfix", err: errors.New(`ent: missing required field "DevBuild.is_hotfix"`)}
	}
	if v, ok := dbc.mutation.TargetImg(); ok {
		if err := devbuild.TargetImgValidator(v); err != nil {
			return &ValidationError{Name: "target_img", err: fmt.Errorf(`ent: validator failed for field "DevBuild.target_img": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.PipelineEngine(); ok {
		if err := devbuild.PipelineEngineValidator(v); err != nil {
			return &ValidationError{Name: "pipeline_engine", err: fmt.Errorf(`ent: validator failed for field "DevBuild.pipeline_engine": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.BuilderImg(); ok {
		if err := devbuild.BuilderImgValidator(v); err != nil {
			return &ValidationError{Name: "builder_img", err: fmt.Errorf(`ent: validator failed for field "DevBuild.builder_img": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.BuildEnv(); ok {
		if err := devbuild.BuildEnvValidator(v); err != nil {
			return &ValidationError{Name: "build_env", err: fmt.Errorf(`ent: validator failed for field "DevBuild.build_env": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.Features(); ok {
		if err := devbuild.FeaturesValidator(v); err != nil {
			return &ValidationError{Name: "features", err: fmt.Errorf(`ent: validator failed for field "DevBuild.features": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.ProductBaseImg(); ok {
		if err := devbuild.ProductBaseImgValidator(v); err != nil {
			return &ValidationError{Name: "product_base_img", err: fmt.Errorf(`ent: validator failed for field "DevBuild.product_base_img": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.ProductDockerfile(); ok {
		if err := devbuild.ProductDockerfileValidator(v); err != nil {
			return &ValidationError{Name: "product_dockerfile", err: fmt.Errorf(`ent: validator failed for field "DevBuild.product_dockerfile": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.Status(); ok {
		if err := devbuild.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DevBuild.status": %w`, err)}
		}
	}
	if v, ok := dbc.mutation.ErrMsg(); ok {
		if err := devbuild.ErrMsgValidator(v); err != nil {
			return &ValidationError{Name: "err_msg", err: fmt.Errorf(`ent: validator failed for field "DevBuild.err_msg": %w`, err)}
		}
	}
	return nil
}

func (dbc *DevBuildCreate) sqlSave(ctx context.Context) (*DevBuild, error) {
	if err := dbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dbc.mutation.id = &_node.ID
	dbc.mutation.done = true
	return _node, nil
}

func (dbc *DevBuildCreate) createSpec() (*DevBuild, *sqlgraph.CreateSpec) {
	var (
		_node = &DevBuild{config: dbc.config}
		_spec = sqlgraph.NewCreateSpec(devbuild.Table, sqlgraph.NewFieldSpec(devbuild.FieldID, field.TypeInt))
	)
	if value, ok := dbc.mutation.CreatedBy(); ok {
		_spec.SetField(devbuild.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := dbc.mutation.CreatedAt(); ok {
		_spec.SetField(devbuild.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dbc.mutation.UpdatedAt(); ok {
		_spec.SetField(devbuild.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dbc.mutation.Product(); ok {
		_spec.SetField(devbuild.FieldProduct, field.TypeString, value)
		_node.Product = value
	}
	if value, ok := dbc.mutation.Edition(); ok {
		_spec.SetField(devbuild.FieldEdition, field.TypeString, value)
		_node.Edition = value
	}
	if value, ok := dbc.mutation.Version(); ok {
		_spec.SetField(devbuild.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := dbc.mutation.GithubRepo(); ok {
		_spec.SetField(devbuild.FieldGithubRepo, field.TypeString, value)
		_node.GithubRepo = value
	}
	if value, ok := dbc.mutation.GitRef(); ok {
		_spec.SetField(devbuild.FieldGitRef, field.TypeString, value)
		_node.GitRef = value
	}
	if value, ok := dbc.mutation.GitSha(); ok {
		_spec.SetField(devbuild.FieldGitSha, field.TypeString, value)
		_node.GitSha = value
	}
	if value, ok := dbc.mutation.PluginGitRef(); ok {
		_spec.SetField(devbuild.FieldPluginGitRef, field.TypeString, value)
		_node.PluginGitRef = value
	}
	if value, ok := dbc.mutation.IsHotfix(); ok {
		_spec.SetField(devbuild.FieldIsHotfix, field.TypeBool, value)
		_node.IsHotfix = value
	}
	if value, ok := dbc.mutation.IsPushGcr(); ok {
		_spec.SetField(devbuild.FieldIsPushGcr, field.TypeBool, value)
		_node.IsPushGcr = value
	}
	if value, ok := dbc.mutation.TargetImg(); ok {
		_spec.SetField(devbuild.FieldTargetImg, field.TypeString, value)
		_node.TargetImg = value
	}
	if value, ok := dbc.mutation.PipelineEngine(); ok {
		_spec.SetField(devbuild.FieldPipelineEngine, field.TypeString, value)
		_node.PipelineEngine = value
	}
	if value, ok := dbc.mutation.BuilderImg(); ok {
		_spec.SetField(devbuild.FieldBuilderImg, field.TypeString, value)
		_node.BuilderImg = value
	}
	if value, ok := dbc.mutation.BuildEnv(); ok {
		_spec.SetField(devbuild.FieldBuildEnv, field.TypeString, value)
		_node.BuildEnv = value
	}
	if value, ok := dbc.mutation.Features(); ok {
		_spec.SetField(devbuild.FieldFeatures, field.TypeString, value)
		_node.Features = value
	}
	if value, ok := dbc.mutation.ProductBaseImg(); ok {
		_spec.SetField(devbuild.FieldProductBaseImg, field.TypeString, value)
		_node.ProductBaseImg = value
	}
	if value, ok := dbc.mutation.ProductDockerfile(); ok {
		_spec.SetField(devbuild.FieldProductDockerfile, field.TypeString, value)
		_node.ProductDockerfile = value
	}
	if value, ok := dbc.mutation.Status(); ok {
		_spec.SetField(devbuild.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := dbc.mutation.ErrMsg(); ok {
		_spec.SetField(devbuild.FieldErrMsg, field.TypeString, value)
		_node.ErrMsg = value
	}
	if value, ok := dbc.mutation.PipelineBuildID(); ok {
		_spec.SetField(devbuild.FieldPipelineBuildID, field.TypeInt, value)
		_node.PipelineBuildID = value
	}
	if value, ok := dbc.mutation.PipelineStartAt(); ok {
		_spec.SetField(devbuild.FieldPipelineStartAt, field.TypeTime, value)
		_node.PipelineStartAt = value
	}
	if value, ok := dbc.mutation.PipelineEndAt(); ok {
		_spec.SetField(devbuild.FieldPipelineEndAt, field.TypeTime, value)
		_node.PipelineEndAt = value
	}
	if value, ok := dbc.mutation.BuildReport(); ok {
		_spec.SetField(devbuild.FieldBuildReport, field.TypeJSON, value)
		_node.BuildReport = value
	}
	if value, ok := dbc.mutation.TektonStatus(); ok {
		_spec.SetField(devbuild.FieldTektonStatus, field.TypeJSON, value)
		_node.TektonStatus = value
	}
	return _node, _spec
}

// DevBuildCreateBulk is the builder for creating many DevBuild entities in bulk.
type DevBuildCreateBulk struct {
	config
	err      error
	builders []*DevBuildCreate
}

// Save creates the DevBuild entities in the database.
func (dbcb *DevBuildCreateBulk) Save(ctx context.Context) ([]*DevBuild, error) {
	if dbcb.err != nil {
		return nil, dbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dbcb.builders))
	nodes := make([]*DevBuild, len(dbcb.builders))
	mutators := make([]Mutator, len(dbcb.builders))
	for i := range dbcb.builders {
		func(i int, root context.Context) {
			builder := dbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DevBuildMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dbcb *DevBuildCreateBulk) SaveX(ctx context.Context) []*DevBuild {
	v, err := dbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dbcb *DevBuildCreateBulk) Exec(ctx context.Context) error {
	_, err := dbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dbcb *DevBuildCreateBulk) ExecX(ctx context.Context) {
	if err := dbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
